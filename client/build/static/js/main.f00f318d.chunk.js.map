{"version":3,"sources":["band.js","components/FormSendToken.js","routes/SendToken.js","components/FormSendRequest.js","routes/SendRequest.js","components/FormGetPrice.js","routes/GetPrice.js","components/FormDelegate.js","routes/Delegate.js","components/FormIBCTransfer.js","routes/IBCTransfer.js","App.js","reportWebVitals.js","index.js"],"names":["client","Client","makeRequest","symbols","a","split","console","log","PrivateKey","Wallet","privateKey","fromMnemonic","pubkey","toPubkey","sender","toAddress","toAccBech32","obi","Obi","calldata","encodeInput","multiplier","feeLimit","Coin","setDenom","setAmount","requestMessage","Message","MsgRequestData","feeCoin","fee","Fee","setAmountList","setGasLimit","getChainId","chainId","txn","Transaction","withMessages","withSender","withChainId","withFee","withMemo","signDoc","getSignDoc","signature","sign","txRawBytes","getTxData","sendTxBlockMode","sendTx","sendCoin","address","amount","action","MsgSend","MsgDelegate","MsgTransfer","mnemonic","receiver","sendAmount","msg","getAccount","account","tx","withAccountNum","accountNumber","withSequence","sequence","txSignData","signedTx","response","sendIBC","timeoutTimestamp","Date","getTime","FormSendToken","useState","tokenAmount","setTokenAmount","receiverAddress","setReceiverAddress","sendResult","setSendResult","sendResultSuccess","setSendResultSuccess","sendBandToken","data","rawLog","txhash","className","htmlFor","type","id","value","onChange","e","target","min","onClick","href","SendToken","FormSendRequest","sendResultError","setSendResultError","setSymbols","sendRequest","requestID","logsList","eventsList","attributesList","map","res","ind","key","SendRequest","FormGetPrice","prices","setPrice","pairInput","setPairInput","pairs","setPairs","getReferenceData","rate","placeholder","price","pair","GetPrice","FormDelegate","validator","setValidator","Delegate","disabled","IBCTransfer","FormIBCTransfer","App","to","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f00f318d.chunk.js","sourcesContent":["import { Client, Wallet, Obi, Message, Coin, Transaction, Fee } from \"@bandprotocol/bandchain.js\";\nimport moment from 'moment';\n\nconst grpcUrl = 'https://laozi-testnet4.bandchain.org/grpc-web';\nconst client = new Client(grpcUrl)\n\nexport async function makeRequest(symbols) {\n    symbols = symbols.split(',')\n    console.log(symbols)\n    // Step 1: Import a private key for signing transaction\n    const { PrivateKey } = Wallet\n    const mnemonic = \"subject economy equal whisper turn boil guard giraffe stick retreat wealth card only buddy joy leave genuine resemble submit ghost top polar adjust avoid\"\n    const privateKey = PrivateKey.fromMnemonic(mnemonic)\n    const pubkey = privateKey.toPubkey()\n    const sender = pubkey.toAddress().toAccBech32()\n    // console.log(sender)\n    // const sender = \"band1jrhuqrymzt4mnvgw8cvy3s9zhx3jj0dq30qpte\"\n  \n    // Step 2.1: Prepare oracle request's properties\n    const obi = new Obi(\"{symbols:[string],multiplier:u64}/{rates:[u64]}\")\n    const calldata = obi.encodeInput({ symbols: symbols, multiplier: 100 })\n  \n    const oracleScriptId = 37\n    const askCount = 2\n    const minCount = 1\n    const clientId = \"from_bandchain.js\"\n  \n    let feeLimit = new Coin()\n    feeLimit.setDenom(\"uband\")\n    feeLimit.setAmount(\"10\")\n  \n    const prepareGas = 100000\n    const executeGas = 200000\n  \n    // Step 2.2: Create an oracle request message\n    const requestMessage = new Message.MsgRequestData(\n      oracleScriptId,\n      calldata,\n      askCount,\n      minCount,\n      clientId,\n      sender,\n      [feeLimit],\n      prepareGas,\n      executeGas\n    )\n  \n    let feeCoin = new Coin()\n    feeCoin.setDenom(\"uband\")\n    feeCoin.setAmount(\"50000\")\n  \n    // Step 3.1: Construct a transaction\n    const fee = new Fee()\n    fee.setAmountList([feeCoin])\n    fee.setGasLimit(1000000)\n  \n    const chainId = await client.getChainId()\n    const txn = new Transaction()\n    txn.withMessages(requestMessage)\n    await txn.withSender(client, sender)\n    txn.withChainId(chainId)\n    txn.withFee(fee)\n    txn.withMemo(\"Test Send Oracle Request from Babybun\")\n  \n    // Step 3.2: Sign the transaction using the private key\n    const signDoc = txn.getSignDoc(pubkey)\n    const signature = privateKey.sign(signDoc)\n  \n    const txRawBytes = txn.getTxData(signature, pubkey)\n  \n    // Step 4: Broadcast the transaction\n    const sendTx = await client.sendTxBlockMode(txRawBytes)\n    return sendTx\n  }\n\n  export const sendCoin = async (address, amount, action='send', chainId='band-laozi-testnet4') => {\n    console.log(address)\n    // Step 3.1 constructs MsgSend message\n    const { MsgSend, MsgDelegate, MsgTransfer } = Message\n      // Step 1: Import a private key for signing transaction\n    const { PrivateKey } = Wallet\n    const mnemonic = \"subject economy equal whisper turn boil guard giraffe stick retreat wealth card only buddy joy leave genuine resemble submit ghost top polar adjust avoid\"\n    const privateKey = PrivateKey.fromMnemonic(mnemonic)\n    const pubkey = privateKey.toPubkey()\n    const sender = pubkey.toAddress().toAccBech32()\n\n    // Here we use different message type, which is MsgSend\n    const receiver = address\n    const sendAmount = new Coin()\n    sendAmount.setDenom(\"uband\")\n    sendAmount.setAmount(amount)\n\n    const msg = action === 'delegate' ? new MsgDelegate(sender, receiver, sendAmount): action === 'transfer' ? new MsgTransfer(sender, receiver, sendAmount) : new MsgSend(sender, receiver, [sendAmount]);\n\n    // Step 3.2 constructs a transaction\n    const account = await client.getAccount(sender)\n    console.log(account)\n  \n    let feeCoin = new Coin()\n    feeCoin.setDenom(\"uband\")\n    feeCoin.setAmount(\"1000\")\n  \n    const fee = new Fee()\n    fee.setAmountList([feeCoin])\n    fee.setGasLimit(1000000)\n    const tx = new Transaction()\n      .withMessages(msg)\n      .withAccountNum(account.accountNumber)\n      .withSequence(account.sequence)\n      .withChainId(chainId)\n      .withFee(fee)\n  \n    // Step 4 sign the transaction\n    const txSignData = tx.getSignDoc(pubkey)\n    const signature = privateKey.sign(txSignData)\n    const signedTx = tx.getTxData(signature, pubkey)\n  \n    // Step 5 send the transaction\n    const response = await client.sendTxBlockMode(signedTx)\n\n    return response\n  }\n\n\n  export const sendIBC = async (address, amount) => {\n    // Step 3.1 constructs MsgSend message\n    const { MsgTransfer } = Message\n      // Step 1: Import a private key for signing transaction\n    const { PrivateKey } = Wallet\n    const mnemonic = \"subject economy equal whisper turn boil guard giraffe stick retreat wealth card only buddy joy leave genuine resemble submit ghost top polar adjust avoid\"\n    const privateKey = PrivateKey.fromMnemonic(mnemonic)\n    const pubkey = privateKey.toPubkey()\n    const sender = pubkey.toAddress().toAccBech32()\n\n    // Here we use different message type, which is MsgSend\n    const receiver = address\n    const sendAmount = new Coin()\n    sendAmount.setDenom(\"uband\")\n    sendAmount.setAmount(amount)\n    const timeoutTimestamp = new Date().getTime() + 600;\n    console.log(timeoutTimestamp)\n\n    const msg = new MsgTransfer('transfer', 'channel-25', sender, receiver, sendAmount, timeoutTimestamp)\n\n    // Step 3.2 constructs a transaction\n    const account = await client.getAccount(sender)\n  \n    let feeCoin = new Coin()\n    feeCoin.setDenom(\"uband\")\n    feeCoin.setAmount(\"1000\")\n  \n    const fee = new Fee()\n    fee.setAmountList([feeCoin])\n    fee.setGasLimit(1000000)\n    const tx = new Transaction()\n      .withMessages(msg)\n      .withAccountNum(account.accountNumber)\n      .withSequence(account.sequence)\n      .withChainId('band-laozi-testnet4')\n      .withFee(fee)\n  \n    // Step 4 sign the transaction\n    const txSignData = tx.getSignDoc(pubkey)\n    const signature = privateKey.sign(txSignData)\n    const signedTx = tx.getTxData(signature, pubkey)\n  \n    // Step 5 send the transaction\n    const response = await client.sendTxBlockMode(signedTx)\n    console.log(response);\n\n    return response\n  }\n\n","import { useEffect, useState } from 'react';\nimport { sendCoin } from '../band';\n\nfunction FormSendToken() {\n    const [tokenAmount, setTokenAmount] = useState(0)\n    const [receiverAddress, setReceiverAddress] = useState(\"band1jrhuqrymzt4mnvgw8cvy3s9zhx3jj0dq30qpte\")\n    const [sendResult, setSendResult] = useState(\"\")\n    const [sendResultSuccess, setSendResultSuccess] = useState(\"\")\n  \n    const handleInputTokenAmount = e => {\n      setTokenAmount(e.target.value)\n    }\n    const handleInputAddress = e => {\n      setReceiverAddress(e.target.value)\n    }\n    const sendBandToken = async () => {\n        if ( !receiverAddress && !tokenAmount) return\n        const response = await sendCoin(receiverAddress, tokenAmount);\n        if( response.data === \"\") setSendResult(response.rawLog)\n        if( response.data !== \"\") setSendResultSuccess(response.txhash)\n    }\n\n    return (\n        <div className=\"container mx-auto max-w-md mt-10\">\n          <div className=\"card bg-white p-6 rounded rounded-2xl shadow-indigo shadow-lg\">\n            <h2 className=\"mb-5 text-xl\"><strong>Send Token</strong></h2>\n            <div className=\"card-inner\">\n            <div className=\"mb-5\">\n            <div className=\"input-group mb-3\">\n              <label htmlFor=\"input-address\" className=\"block text-sm font-medium text-gray-700 mb-1\">Recipient Address</label>\n              <input className=\"focus:outline-none focus:ring-2 focus:ring-purple-600 block w-full p-2 sm:text-sm border-solid border border-gray-200 rounded-md\" type=\"text\" id=\"input-address\" value={receiverAddress} onChange={handleInputAddress} />\n            </div>\n            <div className=\"input-group mb-3\">\n              <label htmlFor=\"input-amount\" className=\"block text-sm font-medium text-gray-700 mb-1\">Token Amount (BAND)</label>\n              <input className=\"focus:outline-none focus:ring-2 focus:ring-purple-600 block w-full p-2 sm:text-sm border-solid border border-gray-200 rounded-md\" type=\"number\" min=\"0\" id=\"input-amount\" value={tokenAmount} onChange={handleInputTokenAmount} />\n            </div>\n            </div>\n            <button onClick={sendBandToken} className=\"button block w-full bg-purple-600 text-white py-2 px-4 rounded-md hover:bg-purple-700 focus:outline-none focus:ring-purple-600 focus:ring-opacity-50 transition duration-500 ease-in-out\">\n            Send BAND\n          </button>\n            </div>\n            { sendResult ? <div className=\"mt-5 text-red-500\">{sendResult}</div> : sendResultSuccess ? <div className=\"mt-3 whitespace-nowrap overflow-ellipsis overflow-hidden\">Transaction: <a className=\"text-indigo-500\" href={`https://laozi-testnet4.cosmoscan.io/tx/${sendResultSuccess}`}>{sendResultSuccess}</a></div> : '' }\n          </div>\n          </div>\n      );\n}\n\nexport default FormSendToken;","import FormSendToken from \"../components/FormSendToken\";\nexport default function SendToken() {\n    return (\n      <FormSendToken />\n    );\n  }","import { makeRequest } from '../band';\nimport { useState } from 'react';\n\nfunction FormSendRequest() {\n  const [sendResultError, setSendResultError] = useState(\"\")\n  const [sendResult, setSendResult] = useState([])\n  const [symbols, setSymbols] = useState(\"\")\n\n  const handleInputSymbols = e => {\n    if(e.target.value) setSymbols(e.target.value)\n  }\n\n  const sendRequest = async () => {\n    const requestID = await makeRequest(symbols);\n    // console.log(requestID)\n    if( requestID.data === \"\") return setSendResultError(requestID.rawLog)\n\n    if ( requestID.data !== \"\" ) {\n      console.log(requestID)\n      setSendResult(requestID.logsList[0].eventsList[2].attributesList)\n      console.log(sendResult)\n    }\n  }\n\n    return (\n        <div className=\"container mx-auto max-w-md mt-10\">\n          <div className=\"card bg-white p-6 rounded rounded-2xl shadow-indigo shadow-lg\">\n            <h2 className=\"mb-5 text-xl\"><strong>Create a new request</strong></h2>\n            <div className=\"card-inner\">\n            <div className=\"mb-5\">\n            <div className=\"input-group mb-3\">\n              <label htmlFor=\"input-address\" className=\"block text-sm font-medium text-gray-700 mb-1\">Symbols ([string])</label>\n              <input className=\"focus:outline-none focus:ring-2 focus:ring-purple-600 block w-full p-2 sm:text-sm border-solid border border-gray-200 rounded-md\" type=\"text\" id=\"input-address\" value={symbols} onChange={handleInputSymbols} />\n            </div>\n            </div>\n            <button onClick={sendRequest} className=\"button block w-full bg-purple-600 text-white py-2 px-4 rounded-md hover:bg-purple-700 focus:outline-none focus:ring-purple-600 focus:ring-opacity-50 transition duration-500 ease-in-out\">Send a Request</button>\n            </div>\n            { sendResultError ? <div className=\"mt-5 text-red-500\">{sendResultError}</div> : sendResult.map( (res,ind) => <div key={ind}> {res.key}: {res.value}</div>) }\n          </div>\n        </div>\n      );\n}\n\nexport default FormSendRequest;","import FormSendRequest from \"../components/FormSendRequest\";\nexport default function SendRequest() {\n    return (\n      <FormSendRequest />\n    );\n  }","\nimport { useEffect, useState } from 'react';\nimport { Client } from '@bandprotocol/bandchain.js';\n\nfunction FormGetPrice() {\n\n  // states\n  const [prices, setPrice] = useState([]);\n  const [pairInput, setPairInput] = useState(\"\");\n  const [pairs, setPairs] = useState([]);\n\n  const handlePairInput = e => {\n    if( !e.target.value ) return\n    setPairInput( e.target.value )\n    console.log(e.target.value.split(','))\n    setPairs( e.target.value.split(',') )\n  }\n\n  async function getPrice() {\n    const grpcUrl = 'https://laozi-testnet4.bandchain.org/grpc-web';\n    const client = new Client(grpcUrl);\n    // const pairs = [\"BTC/USDT\", \"ETH/USDT\"]\n    const minCount = 3\n    const askCount = 4\n    const rate = await client.getReferenceData(pairs, minCount, askCount);\n    // console.log(rate)\n    setPrice(rate);\n  }\n    return (\n        <div className=\"container mx-auto max-w-md mt-10\">\n          <div className=\"card bg-white p-6 rounded rounded-2xl shadow-indigo shadow-lg\">\n            <h2 className=\"mb-5 text-xl\"><strong>Get Price</strong></h2>\n            <div className=\"card-inner\">\n            <div className=\"mb-5\">\n            <div className=\"input-group mb-3\">\n              <label htmlFor=\"input-address\" className=\"block text-sm font-medium text-gray-700 mb-1\">Pair (Separate with comma (,))</label>\n              <input className=\"focus:outline-none focus:ring-2 focus:ring-purple-600 block w-full p-2 sm:text-sm border-solid border border-gray-200 rounded-md\" type=\"text\" id=\"input-address\" placeholder=\"e.g. BTC/USD,ETH/USD\" value={pairInput} onChange={handlePairInput}/>\n            </div>\n            </div>\n            <button onClick={getPrice} className=\"button block w-full bg-purple-600 text-white py-2 px-4 rounded-md hover:bg-purple-700 focus:outline-none focus:ring-purple-600 focus:ring-opacity-50 transition duration-500 ease-in-out\">Get Price</button>\n            </div>\n            <ul className=\"price-list mt-4\">\n              {\n                prices.map( (price,ind) => <li key={ind}><strong>{price.pair}: </strong>{price.rate}</li>)\n              }\n            </ul>\n          </div>\n        </div>\n      );\n}\n\nexport default FormGetPrice;","import FormGetPrice from \"../components/FormGetPrice\";\nexport default function GetPrice() {\n    return (\n      <FormGetPrice />\n    );\n  }","import { useState } from \"react\";\nimport {sendCoin} from \"../band\";\n\nfunction FormDelegate() {\n    const [validator, setValidator] = useState(\"bandvaloper1zkf9qzs7ayf3uqksxqwve8q693dsdhxk800wvw\")\n    const [amount, setAmount] = useState(\"\")\n    const [sendResult, setSendResult] = useState(\"\")\n    const [sendResultSuccess, setSendResultSuccess] = useState(\"\")\n\n    const handleInputValidator = e => {\n        if( e.target.value ) setValidator( e.target.value )\n    }\n\n    const handleInputAmount = e => {\n        if( e.target.value ) setAmount( e.target.value )\n    }\n\n    const sendBandToken = async () => {\n        if ( !validator && !amount) return\n        const response = await sendCoin(validator, amount, 'delegate');\n        if( response.data === \"\") setSendResult(response.rawLog)\n        if( response.data !== \"\") setSendResultSuccess(response.txhash)\n    }\n\n    return (\n        <div className=\"container mx-auto max-w-md mt-10\">\n        <div className=\"card bg-white p-6 rounded rounded-2xl shadow-indigo shadow-lg\">\n          <h2 className=\"mb-5 text-xl\"><strong>Delegate Token</strong></h2>\n          <div className=\"card-inner\">\n          <div className=\"mb-5\">\n          <div className=\"input-group mb-3\">\n            <label htmlFor=\"input-address\" className=\"block text-sm font-medium text-gray-700 mb-1\">Delegate to</label>\n            <input className=\"focus:outline-none focus:ring-2 focus:ring-purple-600 block w-full p-2 sm:text-sm border-solid border border-gray-200 rounded-md\" type=\"text\" id=\"input-address\" onChange={handleInputValidator} value={validator} />\n          </div>\n          <div className=\"input-group mb-3\">\n            <label htmlFor=\"input-amount\" className=\"block text-sm font-medium text-gray-700 mb-1\">Token Amount (BAND)</label>\n            <input className=\"focus:outline-none focus:ring-2 focus:ring-purple-600 block w-full p-2 sm:text-sm border-solid border border-gray-200 rounded-md\" type=\"number\" min=\"0\" id=\"input-amount\" onChange={handleInputAmount} value={amount} />\n          </div>\n          </div>\n          <button onClick={sendBandToken} className=\"button block w-full bg-purple-600 text-white py-2 px-4 rounded-md hover:bg-purple-700 focus:outline-none focus:ring-purple-600 focus:ring-opacity-50 transition duration-500 ease-in-out\">\n          Delegate\n        </button>\n          </div>\n          { sendResult ? <div className=\"mt-5 text-red-500\">{sendResult}</div> : sendResultSuccess ? <div className=\"mt-3 whitespace-nowrap overflow-ellipsis overflow-hidden\">Transaction: <a className=\"text-indigo-500\" href={`https://laozi-testnet4.cosmoscan.io/tx/${sendResultSuccess}`}>{sendResultSuccess}</a></div> : '' }\n        </div>\n        </div>\n    )\n}\n\nexport default FormDelegate;","import FormDelegate from \"../components/FormDelegate\";\nexport default function Delegate() {\n    return (\n      <FormDelegate />\n    );\n  }","import { useEffect, useState } from 'react';\nimport { sendIBC } from '../band';\n\nfunction FormSendToken() {\n    const [tokenAmount, setTokenAmount] = useState(0)\n    const [receiverAddress, setReceiverAddress] = useState(\"band1jrhuqrymzt4mnvgw8cvy3s9zhx3jj0dq30qpte\")\n    const [sendResult, setSendResult] = useState(\"\")\n    const [sendResultSuccess, setSendResultSuccess] = useState(\"\")\n    const ibcchannel = 'CONSUMER'\n  \n    const handleInputTokenAmount = e => {\n      setTokenAmount(e.target.value)\n    }\n    const handleInputAddress = e => {\n      setReceiverAddress(e.target.value)\n    }\n    const sendBandToken = async () => {\n        if ( !receiverAddress && !tokenAmount) return\n        const response = await sendIBC(receiverAddress, tokenAmount);\n        if( response.data === \"\") setSendResult(response.rawLog)\n        if( response.data !== \"\") setSendResultSuccess(response.txhash)\n    }\n\n    return (\n        <div className=\"container mx-auto max-w-md mt-10\">\n          <div className=\"card bg-white p-6 rounded rounded-2xl shadow-indigo shadow-lg\">\n            <h2 className=\"mb-5 text-xl\"><strong>Send Token (IBC Transfer)</strong></h2>\n            <div className=\"card-inner\">\n            <div className=\"mb-5\">\n            <div className=\"input-group mb-3\">\n              <label htmlFor=\"input-address\" className=\"block text-sm font-medium text-gray-700 mb-1\">Channel</label>\n              <input className=\"text-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-600 block w-full p-2 sm:text-sm border-solid border border-gray-200 rounded-md\" type=\"text\" id=\"input-address\" value={ibcchannel} disabled/>\n            </div>\n            <div className=\"input-group mb-3\">\n              <label htmlFor=\"input-address\" className=\"block text-sm font-medium text-gray-700 mb-1\">Recipient Address</label>\n              <input className=\"focus:outline-none focus:ring-2 focus:ring-purple-600 block w-full p-2 sm:text-sm border-solid border border-gray-200 rounded-md\" type=\"text\" id=\"input-address\" value={receiverAddress} onChange={handleInputAddress} />\n            </div>\n            <div className=\"input-group mb-3\">\n              <label htmlFor=\"input-amount\" className=\"block text-sm font-medium text-gray-700 mb-1\">Token Amount (BAND)</label>\n              <input className=\"focus:outline-none focus:ring-2 focus:ring-purple-600 block w-full p-2 sm:text-sm border-solid border border-gray-200 rounded-md\" type=\"number\" min=\"0\" id=\"input-amount\" value={tokenAmount} onChange={handleInputTokenAmount} />\n            </div>\n            </div>\n            <button onClick={sendBandToken} className=\"button block w-full bg-purple-600 text-white py-2 px-4 rounded-md hover:bg-purple-700 focus:outline-none focus:ring-purple-600 focus:ring-opacity-50 transition duration-500 ease-in-out\">\n            Send\n          </button>\n            </div>\n            { sendResult ? <div className=\"mt-5 text-red-500\">{sendResult}</div> : sendResultSuccess ? <div className=\"mt-3 whitespace-nowrap overflow-ellipsis overflow-hidden\">Transaction: <a className=\"text-indigo-500\" href={`https://laozi-testnet4.cosmoscan.io/tx/${sendResultSuccess}`}>{sendResultSuccess}</a></div> : '' }\n          </div>\n          </div>\n      );\n}\n\nexport default FormSendToken;","import FormIBCTransfer from \"../components/FormIBCTransfer\";\nexport default function IBCTransfer() {\n    return (\n      <FormIBCTransfer />\n    );\n  }","import './App.css';\n\nimport {\n  Link,\n  BrowserRouter,\n  Routes,\n  Route\n} from \"react-router-dom\";\n\nimport SendToken from './routes/SendToken';\nimport SendRequest from './routes/SendRequest';\nimport GetPrice from './routes/GetPrice';\nimport Delegate from './routes/Delegate';\nimport IBCTransfer from './routes/IBCTransfer';\n\nfunction App() {\n    return (\n      <BrowserRouter>\n        <div className=\"App pt-10\">\n          <div className=\"container mx-auto max-w-lg\">\n            <h1 className=\"text-2xl text-center mb-4\"><strong>BandChain.js Demo</strong></h1>\n            <div className=\"text-center\">\n              <nav>\n                <Link to=\"/getprice\" className=\"bg-none text-indigo p-0 mr-4 rounded-md hover:none focus:outline-none transition duration-500 ease-in-out\">\n                  Get Price\n                </Link>\n                <Link to=\"/request\" className=\"bg-none text-indigo p-0 mr-4 rounded-md hover:none focus:outline-none transition duration-500 ease-in-out\">\n                  Create a Request\n                </Link>\n                <Link to=\"/sendToken\" className=\"bg-none text-indigo p-0 mr-4 rounded-md hover:none focus:outline-none transition duration-500 ease-in-out\">\n                  Send Token\n                </Link>\n                <Link to=\"/delegate\" className=\"bg-none text-indigo p-0 mr-4 rounded-md hover:none focus:outline-none transition duration-500 ease-in-out\">\n                  Delegate\n                </Link>\n                <Link to=\"/transfer\" className=\"bg-none text-indigo p-0 rounded-md hover:none focus:outline-none transition duration-500 ease-in-out\">\n                  IBC Transfer\n                </Link>\n              </nav>\n            </div>\n          </div>\n          <Routes>\n            <Route path=\"/\" element={<SendToken />} />\n            <Route path=\"/sendToken\" element={<SendToken />} />\n            <Route path=\"/request\" element={<SendRequest />} />\n            <Route path=\"/getprice\" element={<GetPrice />} />\n            <Route path=\"/delegate\" element={<Delegate />} />\n            <Route path=\"/transfer\" element={<IBCTransfer />} />\n          </Routes>\n        </div>\n        </BrowserRouter>\n      );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}