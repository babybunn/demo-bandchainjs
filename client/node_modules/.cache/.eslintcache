[{"/Users/pangp/Band/demo-bandchainjs/src/index.js":"1","/Users/pangp/Band/demo-bandchainjs/src/App.js":"2","/Users/pangp/Band/demo-bandchainjs/src/reportWebVitals.js":"3","/Users/pangp/Band/demo-bandchainjs/src/redux/store.js":"4","/Users/pangp/Band/demo-bandchainjs/src/redux/walletSlice.js":"5","/Users/pangp/Band/demo-bandchainjs/src/routes/SendToken.js":"6","/Users/pangp/Band/demo-bandchainjs/src/routes/Delegate.js":"7","/Users/pangp/Band/demo-bandchainjs/src/routes/DataSource.js":"8","/Users/pangp/Band/demo-bandchainjs/src/routes/GetPrice.js":"9","/Users/pangp/Band/demo-bandchainjs/src/components/Home.js":"10","/Users/pangp/Band/demo-bandchainjs/src/components/Footer.js":"11","/Users/pangp/Band/demo-bandchainjs/src/routes/SendRequest.js":"12","/Users/pangp/Band/demo-bandchainjs/src/components/BackButton.js":"13","/Users/pangp/Band/demo-bandchainjs/src/components/Header/Navbar.js":"14","/Users/pangp/Band/demo-bandchainjs/src/routes/IBCTransfer.js":"15","/Users/pangp/Band/demo-bandchainjs/src/components/FormCreateDataSource.js":"16","/Users/pangp/Band/demo-bandchainjs/src/components/FormGetPrice.js":"17","/Users/pangp/Band/demo-bandchainjs/src/components/FormSendToken.js":"18","/Users/pangp/Band/demo-bandchainjs/src/components/FormDelegate.js":"19","/Users/pangp/Band/demo-bandchainjs/src/components/Header/ModalConnectWallet.js":"20","/Users/pangp/Band/demo-bandchainjs/src/components/Header/WalletDropdown.js":"21","/Users/pangp/Band/demo-bandchainjs/src/components/FormSendRequest.js":"22","/Users/pangp/Band/demo-bandchainjs/src/app-context.js":"23","/Users/pangp/Band/demo-bandchainjs/src/components/FormIBCTransfer.js":"24","/Users/pangp/Band/demo-bandchainjs/src/components/AccountWithBalance.js":"25","/Users/pangp/Band/demo-bandchainjs/src/components/UnableService.js":"26","/Users/pangp/Band/demo-bandchainjs/src/band.js":"27","/Users/pangp/Band/demo-bandchainjs/src/components/CardPrice.js":"28","/Users/pangp/Band/demo-bandchainjs/src/components/Loading.js":"29","/Users/pangp/Band/demo-bandchainjs/src/components/FormConnectWallet.js":"30","/Users/pangp/Band/demo-bandchainjs/src/routes/OracleScript.js":"31","/Users/pangp/Band/demo-bandchainjs/src/components/FormCreateOracleScript.js":"32","/Users/pangp/Band/demo-bandchainjs/src/routes/AccountPage.js":"33","/Users/pangp/Band/demo-bandchainjs/src/components/AccountSidebar.js":"34","/Users/pangp/Band/demo-bandchainjs/src/components/AccountWithBalanceCenter.js":"35","/Users/pangp/Band/demo-bandchainjs/src/components/SidebarAccountMenu.js":"36","/Users/pangp/Band/demo-bandchainjs/src/routes/Validators.js":"37","/Users/pangp/Band/demo-bandchainjs/src/components/SingleValidator.js":"38","/Users/pangp/Band/demo-bandchainjs/src/routes/Delegations.js":"39","/Users/pangp/Band/demo-bandchainjs/src/components/SingleDelegator.js":"40","/Users/pangp/Band/demo-bandchainjs/src/routes/DelegatorDetails.js":"41","/Users/pangp/Band/demo-bandchainjs/src/routes/EditOracleScript.js":"42","/Users/pangp/Band/demo-bandchainjs/src/components/FormEditOracleScript.js":"43","/Users/pangp/Band/demo-bandchainjs/src/routes/CreateOracleScript.js":"44","/Users/pangp/Band/demo-bandchainjs/src/components/ModalDelegate.js":"45","/Users/pangp/Band/demo-bandchainjs/src/components/ModalRedelegate.js":"46","/Users/pangp/Band/demo-bandchainjs/src/components/ModalReinvest.js":"47","/Users/pangp/Band/demo-bandchainjs/src/routes/Converter.js":"48"},{"size":1417,"mtime":1640053954196,"results":"49","hashOfConfig":"50"},{"size":2757,"mtime":1640314381199,"results":"51","hashOfConfig":"50"},{"size":362,"mtime":1636015615402,"results":"52","hashOfConfig":"50"},{"size":182,"mtime":1639575721396,"results":"53","hashOfConfig":"50"},{"size":868,"mtime":1640079047277,"results":"54","hashOfConfig":"50"},{"size":283,"mtime":1639568467526,"results":"55","hashOfConfig":"50"},{"size":279,"mtime":1639568467567,"results":"56","hashOfConfig":"50"},{"size":306,"mtime":1639568467467,"results":"57","hashOfConfig":"50"},{"size":279,"mtime":1639568467568,"results":"58","hashOfConfig":"50"},{"size":4876,"mtime":1639568467568,"results":"59","hashOfConfig":"50"},{"size":545,"mtime":1638939840236,"results":"60","hashOfConfig":"50"},{"size":291,"mtime":1639568467568,"results":"61","hashOfConfig":"50"},{"size":1298,"mtime":1639568433064,"results":"62","hashOfConfig":"50"},{"size":2611,"mtime":1639057029529,"results":"63","hashOfConfig":"50"},{"size":291,"mtime":1639568467469,"results":"64","hashOfConfig":"50"},{"size":17927,"mtime":1640159714928,"results":"65","hashOfConfig":"50"},{"size":4645,"mtime":1640159714851,"results":"66","hashOfConfig":"50"},{"size":5117,"mtime":1640159714851,"results":"67","hashOfConfig":"50"},{"size":5127,"mtime":1640159714851,"results":"68","hashOfConfig":"50"},{"size":2261,"mtime":1639738085323,"results":"69","hashOfConfig":"50"},{"size":2563,"mtime":1639579432587,"results":"70","hashOfConfig":"50"},{"size":7810,"mtime":1640159714851,"results":"71","hashOfConfig":"50"},{"size":371,"mtime":1640161574140,"results":"72","hashOfConfig":"50"},{"size":5982,"mtime":1640159714851,"results":"73","hashOfConfig":"50"},{"size":2636,"mtime":1639728302220,"results":"74","hashOfConfig":"50"},{"size":380,"mtime":1638939840239,"results":"75","hashOfConfig":"50"},{"size":10904,"mtime":1640239283545,"results":"76","hashOfConfig":"50"},{"size":844,"mtime":1638939840235,"results":"77","hashOfConfig":"50"},{"size":400,"mtime":1636946115839,"results":"78","hashOfConfig":"50"},{"size":2835,"mtime":1640162520554,"results":"79","hashOfConfig":"50"},{"size":1652,"mtime":1640006504820,"results":"80","hashOfConfig":"50"},{"size":19822,"mtime":1640159714851,"results":"81","hashOfConfig":"50"},{"size":935,"mtime":1640314350189,"results":"82","hashOfConfig":"50"},{"size":328,"mtime":1639729767677,"results":"83","hashOfConfig":"50"},{"size":3629,"mtime":1639728415903,"results":"84","hashOfConfig":"50"},{"size":2995,"mtime":1640314314429,"results":"85","hashOfConfig":"50"},{"size":1135,"mtime":1640064510900,"results":"86","hashOfConfig":"50"},{"size":461,"mtime":1640064482552,"results":"87","hashOfConfig":"50"},{"size":1920,"mtime":1640079970659,"results":"88","hashOfConfig":"50"},{"size":1831,"mtime":1640070621961,"results":"89","hashOfConfig":"50"},{"size":11009,"mtime":1640162317925,"results":"90","hashOfConfig":"50"},{"size":311,"mtime":1640006465030,"results":"91","hashOfConfig":"50"},{"size":20694,"mtime":1640159714870,"results":"92","hashOfConfig":"50"},{"size":319,"mtime":1640005952245,"results":"93","hashOfConfig":"50"},{"size":5706,"mtime":1640159714851,"results":"94","hashOfConfig":"50"},{"size":6828,"mtime":1640160590079,"results":"95","hashOfConfig":"50"},{"size":5193,"mtime":1640162111824,"results":"96","hashOfConfig":"50"},{"size":4183,"mtime":1640333399974,"results":"97","hashOfConfig":"50"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},"6i00kv",{"filePath":"101","messages":"102","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"100"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"100"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"100"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"100"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"100"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"100"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"100"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"100"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"100"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"100"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"100"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"100"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"100"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"100"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"100"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"100"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/pangp/Band/demo-bandchainjs/src/index.js",[],["211","212"],"/Users/pangp/Band/demo-bandchainjs/src/App.js",["213","214","215"],"import \"./App.css\";\nimport { React, useState, useEffect } from \"react\";\nimport { Link, BrowserRouter, Routes, Route, useLocation, Navigate } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\n\n// components\nimport Home from \"./components/Home\";\nimport Navbar from \"./components/Header/Navbar\";\nimport BackButton from \"./components/BackButton\";\nimport Footer from \"./components/Footer\";\n\n// routes\nimport GetPrice from \"./routes/GetPrice\";\nimport Delegate from \"./routes/Delegate\";\nimport SendToken from \"./routes/SendToken\";\nimport SendRequest from \"./routes/SendRequest\";\nimport IBCTransfer from \"./routes/IBCTransfer\";\nimport DataSource from \"./routes/DataSource\";\nimport OracleScript from \"./routes/OracleScript\";\nimport AccountPage from \"./routes/AccountPage\";\nimport Validators from \"./routes/Validators\";\nimport Delegations from \"./routes/Delegations\";\nimport DelegatorDetails from \"./routes/DelegatorDetails\";\nimport CreateOracleScript from \"./routes/CreateOracleScript\";\nimport EditOracleScript from \"./routes/EditOracleScript\";\nimport Converter from \"./routes/Converter\";\n\nconst BackRoute = () => {\n  const location = useLocation();\n  if (location.pathname !== \"/\" && !location.pathname.includes(\"/myaccount\")) {\n    return <BackButton />;\n  }\n  return null;\n};\n\nfunction App() {\n  const wallet = useSelector((state) => state.wallet);\n\n  return (\n    <BrowserRouter>\n      <div className=\"App md:p-6 p-3\">\n        <Navbar />\n        <Routes>\n          <Route exact path=\"/\" element={<Home />} />\n          <Route exact path=\"/sendToken\" element={<SendToken />} />\n          <Route exact path=\"/request\" element={<SendRequest />} />\n          <Route exact path=\"/getprice\" element={<GetPrice />} />\n          <Route exact path=\"/delegate\" element={<Delegate />} />\n          <Route exact path=\"/transfer\" element={<IBCTransfer />} />\n          <Route exact path=\"/datasource\" element={<DataSource />} />\n          <Route exact path=\"/oraclescript\" element={<OracleScript />} />\n          <Route exact path=\"/oraclescript/createos\" element={<CreateOracleScript />} />\n          <Route exact path=\"/oraclescript/editos\" element={<EditOracleScript />} />\n          <Route\n            exact\n            path=\"/myaccount\"\n            element={wallet.address ? <AccountPage /> : <Navigate to=\"/\" />}\n          >\n            <Route path=\"validators\" element={<Validators />} />\n            <Route path=\"delegations\" element={<Delegations />}>\n              <Route path=\":operator\" element={<DelegatorDetails />} />\n            </Route>\n            <Route path=\"converter\" element={<Converter />} />\n          </Route>\n        </Routes>\n        <BackRoute />\n        <Footer />\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","/Users/pangp/Band/demo-bandchainjs/src/reportWebVitals.js",[],"/Users/pangp/Band/demo-bandchainjs/src/redux/store.js",[],"/Users/pangp/Band/demo-bandchainjs/src/redux/walletSlice.js",[],"/Users/pangp/Band/demo-bandchainjs/src/routes/SendToken.js",[],"/Users/pangp/Band/demo-bandchainjs/src/routes/Delegate.js",[],"/Users/pangp/Band/demo-bandchainjs/src/routes/DataSource.js",[],"/Users/pangp/Band/demo-bandchainjs/src/routes/GetPrice.js",[],"/Users/pangp/Band/demo-bandchainjs/src/components/Home.js",[],"/Users/pangp/Band/demo-bandchainjs/src/components/Footer.js",[],"/Users/pangp/Band/demo-bandchainjs/src/routes/SendRequest.js",[],"/Users/pangp/Band/demo-bandchainjs/src/components/BackButton.js",[],"/Users/pangp/Band/demo-bandchainjs/src/components/Header/Navbar.js",[],"/Users/pangp/Band/demo-bandchainjs/src/routes/IBCTransfer.js",[],"/Users/pangp/Band/demo-bandchainjs/src/components/FormCreateDataSource.js",["216","217"],"import { useEffect, useState, useCallback } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport { createDataSource } from \"../band\";\nimport { useSelector } from \"react-redux\";\nimport UnableService from \"./UnableService\";\nimport AccountWithBalance from \"./AccountWithBalance\";\nimport Editor from \"react-simple-code-editor\";\nimport { highlight, languages } from \"prismjs/components/prism-core\";\nimport \"prismjs/components/prism-clike\";\nimport \"prismjs/components/prism-python\";\n// import \"prismjs/themes/prism.css\";\nimport \"prismjs/themes/prism-tomorrow.css\";\n\nexport default function FormCreateDataSource() {\n  const wallet = useSelector((state) => state.wallet);\n\n  // State\n  const [isConnected, setisConnected] = useState(false);\n  const [step, setStep] = useState(1);\n  const [codeType, setCodeType] = useState(\"upload\");\n\n  // Form Data\n  const [dsname, setdsname] = useState(\"\");\n  const [dsdesc, setdsdesc] = useState(\"\");\n  const [owner, setOwner] = useState(\"\");\n  const [treasury, setTreasury] = useState(\"\");\n  const [code, setCode] = useState([]);\n  const [filename, setfilename] = useState(\"\");\n  const [codeEditor, setCodeEditor] = useState(`# Insert your code here`);\n\n  // Handling Functions\n  const nextStep = (e) => {\n    e.preventDefault();\n    setStep(step + 1);\n  };\n\n  const prevStep = () => {\n    setStep(step - 1);\n  };\n\n  const isFormFilled = () => {\n    if (dsname !== \"\" && owner !== \"\" && treasury !== \"\") {\n      return false;\n    }\n    return true;\n  };\n\n  const removeFile = () => {\n    setCode([]);\n    setfilename(\"\");\n  };\n\n  const onDrop = useCallback((acceptedFiles) => {\n    setfilename(acceptedFiles[0].name);\n    acceptedFiles.forEach((file) => {\n      const reader = new FileReader();\n\n      reader.onabort = () => console.log(\"file reading was aborted\");\n      reader.onerror = () => console.log(\"file reading has failed\");\n      reader.onload = () => {\n        // Do whatever you want with the file contents\n        const binaryStr = reader.result;\n        console.log(binaryStr);\n        setCode(binaryStr);\n      };\n      reader.readAsArrayBuffer(file);\n    });\n  }, []);\n\n  const { getRootProps, getInputProps } = useDropzone({\n    onDrop,\n    accept: \"text/x-python-script\",\n  });\n\n  const renderSwitchCode = () => {\n    switch (codeType) {\n      case \"editor\":\n        return (\n          <Editor\n            value={codeEditor}\n            onValueChange={(rawcode) => setCodeEditor(rawcode)}\n            highlight={(rawcode) => highlight(rawcode, languages.py, \"python\")}\n            padding={15}\n            style={{\n              fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\n              fontSize: 12,\n              background: \"#282A2B\",\n              color: \"white\",\n              borderRadius: \"10px\",\n              minHeight: \"300px\",\n            }}\n          />\n        );\n      default:\n        return (\n          <div className=\"input-group mb-3\">\n            {code.byteLength > 0 ? (\n              <div\n                onClick={removeFile}\n                className=\"group cursor-pointer border-l-2 border-t-2 border-r-4 border-b-4 hover:border-r-2 hover:border-b-2  hover:border-orange hover:bg-red-100 border-black bg-yellow-50 p-3 text-black rounded-xl relative w-full hover:transform hover:translate-x-px hover:translate-y-px\"\n              >\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center\">\n                    <img\n                      src=\"/images/python-file.png\"\n                      alt=\"\"\n                      className=\"w-100 block h-auto mr-4\"\n                      style={{ maxWidth: \"50px\" }}\n                    />\n                    <p className=\"font-medium\">{filename}</p>\n                  </div>\n                  <div className=\"invisible group-hover:visible btn-deletefile w-8 h-8 bg-orange rounded-full text-white flex items-center justify-center\">\n                    <svg\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      className=\"h-5 w-5\"\n                      viewBox=\"0 0 20 20\"\n                      fill=\"currentColor\"\n                    >\n                      <path\n                        fillRule=\"evenodd\"\n                        d=\"M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z\"\n                        clipRule=\"evenodd\"\n                      />\n                    </svg>\n                  </div>\n                </div>\n              </div>\n            ) : (\n              <div className=\"upload-outer\" {...getRootProps()}>\n                <input {...getInputProps()} />\n                <div className=\"h-40 border-2 bg-gray-50 border-gray-300 rounded-xl text-center flex items-center justify-center\">\n                  <div>\n                    Drag 'n' drop a file here,\n                    <br /> or <br />\n                    <span className=\"mt-2 cursor-pointer inline-block button px-4 py-1 border-2 border-black rounded-xl bg-yellow-300 hover:bg-yellow-400 text-sm\">\n                      Browse\n                    </span>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n        );\n    }\n  };\n\n  const submitCode = async () => {\n    alert(\"MsgCreateDataSource not found\");\n    // const response = await createDataSource(\n    //   dsname,\n    //   codeType === \"upload\" ? code : window.btoa(codeEditor),\n    //   wallet.address,\n    //   owner,\n    //   treasury,\n    //   wallet.privateKey,\n    //   wallet.pubkey,\n    //   dsdesc\n    // );\n    // console.log(response);\n  };\n\n  // Effects\n  useEffect(() => {\n    if (wallet.address) {\n      setisConnected(true);\n    } else {\n      setisConnected(false);\n    }\n  }, [wallet]);\n\n  return (\n    <div className=\"flex flex-row flex-wrap\">\n      <div className=\"w-full md:w-4/12 mb-8 md:mb-0\">\n        <h2 className=\"mb-5 text-3xl \">\n          <strong>Add a new data source</strong>\n        </h2>\n        <p className=\"mb-5\">\n          <a\n            href=\"https://docs.bandchain.org/client-library/bandchain.js/get-started.html#send-band-token\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            <strong>MsgCreateDataSource</strong>\n          </a>{\" \"}\n          is a message for creating a new data source.\n        </p>\n        <div className=\"process-step\">\n          <ul>\n            <li className=\"mb-5\">\n              <strong>Step 1:</strong> Provide the data source information such as data source name,\n              owner, treasury address, and description.\n            </li>\n            <li className=\"mb-5\">\n              <strong>Step 2:</strong> Upload the data source file or try using code editor in .py\n              formatted.\n            </li>\n            <li className=\"mb-5\">\n              <strong>Step 3:</strong> Deploy your data source and Finish.\n            </li>\n          </ul>\n        </div>\n      </div>\n      <div className=\"w-full md:w-8/12 md:pl-10\">\n        {!isConnected ? (\n          <UnableService />\n        ) : (\n          <div>\n            <div className=\"card bg-white border-2 border-black rounded rounded-2xl w-full mb-10\">\n              <div className=\"card-inner p-6\">\n                {step === 1 ? (\n                  <div className=\"form-container mb-5 step step-1\">\n                    <div className=\"form-wrapper mb-6\">\n                      <h3 className=\"mb-4\">\n                        <strong>Step 1:</strong> Enter the data source information below.\n                      </h3>\n                      <div className=\"input-group mb-3\">\n                        <label\n                          htmlFor=\"input-address\"\n                          className=\"block text-sm font-medium text-gray-700 mb-1\"\n                        >\n                          Data Source Name <span className=\"text-orange\">*</span>\n                        </label>\n                        <input\n                          className=\"focus:outline-none focus:ring-2 focus:ring-gray-200 block w-full p-2 sm:text-sm border-solid border-2 border-gray-200 rounded-xl\"\n                          type=\"text\"\n                          id=\"input-address\"\n                          onChange={(e) => setdsname(e.target.value)}\n                          value={dsname}\n                        />\n                      </div>\n                      <div className=\"input-group mb-3\">\n                        <label\n                          htmlFor=\"input-owner\"\n                          className=\"block text-sm font-medium text-gray-700 mb-1\"\n                        >\n                          Owner Address <span className=\"text-orange\">*</span>\n                        </label>\n                        <input\n                          className=\"focus:outline-none focus:ring-2 focus:ring-gray-200 block w-full p-2 sm:text-sm border-solid border-2 border-gray-200 rounded-xl\"\n                          type=\"text\"\n                          id=\"input-owner\"\n                          value={owner}\n                          onChange={(e) => setOwner(e.target.value)}\n                        />\n                      </div>\n                      <div className=\"input-group mb-3\">\n                        <label\n                          htmlFor=\"input-treasury\"\n                          className=\"block text-sm font-medium text-gray-700 mb-1\"\n                        >\n                          Treasury Address <span className=\"text-orange\">*</span>\n                        </label>\n                        <input\n                          className=\"focus:outline-none focus:ring-2 focus:ring-gray-200 block w-full p-2 sm:text-sm border-solid border-2 border-gray-200 rounded-xl\"\n                          type=\"text\"\n                          id=\"input-treasury\"\n                          value={treasury}\n                          onChange={(e) => setTreasury(e.target.value)}\n                        />\n                      </div>\n                      <div className=\"input-group mb-3\">\n                        <label\n                          htmlFor=\"input-desc\"\n                          className=\"block text-sm font-medium text-gray-700 mb-1\"\n                        >\n                          Description\n                        </label>\n                        <textarea\n                          className=\"focus:outline-none focus:ring-2 focus:ring-gray-200 block w-full p-2 sm:text-sm border-solid border-2 border-gray-200 rounded-xl\"\n                          type=\"text\"\n                          id=\"input-desc\"\n                          onChange={(e) => setdsdesc(e.target.value)}\n                          value={dsdesc}\n                        />\n                      </div>\n                    </div>\n                    <div className=\"form-buttons\">\n                      <button\n                        onClick={nextStep}\n                        disabled={isFormFilled()}\n                        className=\"button block ml-auto text-md text-white bg-black hover:bg-black border-2 border-black focus:outline-none focus:ring-black focus:ring-opacity-50  py-2 px-10 rounded-xl focus:outline-none disabled:opacity-50 \"\n                      >\n                        Next\n                      </button>\n                    </div>\n                  </div>\n                ) : step === 2 ? (\n                  <div className=\"form-container mb-5 step step-2\">\n                    <div className=\"form-wrapper mb-6\">\n                      <h3 className=\"mb-4\">\n                        <strong>Step 2:</strong> Choose how to add the data source code\n                      </h3>\n\n                      <div className=\"flex gap-6 radio-group choice-code\">\n                        <div className=\"flex-grow flex-shrink w-1/2 input-group mb-3\">\n                          <input\n                            type=\"radio\"\n                            name=\"codeType\"\n                            id=\"input-codeType-upload\"\n                            value=\"upload\"\n                            checked={codeType === \"upload\"}\n                            onChange={(e) => setCodeType(e.target.value)}\n                          />\n                          <label\n                            htmlFor=\"input-codeType-upload\"\n                            className=\"hover:bg-indigo-50 w-full label-btn button p-4 border-2 border-gray-300 block rounded-xl text-center cursor-pointer\"\n                          >\n                            <img\n                              src=\"/images/uploading.png\"\n                              alt=\"\"\n                              className=\"w-full mx-auto block mb-2\"\n                              style={{\n                                maxWidth: \"103px\",\n                              }}\n                            />\n                            Upload from my computer\n                          </label>\n                        </div>\n                        <div className=\"flex-grow flex-shrink w-1/2 input-group mb-3\">\n                          <input\n                            type=\"radio\"\n                            name=\"codeType\"\n                            id=\"input-codeType-editor\"\n                            value=\"editor\"\n                            checked={codeType === \"editor\"}\n                            onChange={(e) => setCodeType(e.target.value)}\n                          />\n                          <label\n                            htmlFor=\"input-codeType-editor\"\n                            className=\"hover:bg-indigo-50  w-full label-btn button p-4 border-2 border-gray-300 block rounded-xl text-center cursor-pointer\"\n                          >\n                            <img\n                              src=\"/images/code.png\"\n                              alt=\"\"\n                              className=\"w-full mx-auto block mb-2\"\n                              style={{\n                                maxWidth: \"103px\",\n                              }}\n                            />\n                            Using Code Editor\n                          </label>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"form-buttons flex justify-between\">\n                      <button\n                        onClick={prevStep}\n                        className=\"button block  text-md text-black hover:text-white bg-white hover:bg-black border-2 border-black focus:outline-none focus:ring-black focus:ring-opacity-50  py-2 px-10 rounded-xl focus:outline-none\"\n                      >\n                        Previous\n                      </button>\n                      <button\n                        onClick={nextStep}\n                        className=\"button block text-md text-white bg-black hover:bg-black border-2 border-black focus:outline-none focus:ring-black focus:ring-opacity-50  py-2 px-10 rounded-xl focus:outline-none\"\n                      >\n                        Next\n                      </button>\n                    </div>\n                  </div>\n                ) : step === 3 ? (\n                  <div className=\"form-container mb-5 step step-2\">\n                    <div className=\"form-wrapper mb-6\">\n                      <h3 className=\"mb-4\">\n                        <strong>Step 2.1:</strong> Add the data source code\n                      </h3>\n                      {renderSwitchCode()}\n                    </div>\n                    <div className=\"form-buttons flex justify-between\">\n                      <button\n                        onClick={prevStep}\n                        className=\"button block  text-md text-black hover:text-white bg-white hover:bg-black border-2 border-black focus:outline-none focus:ring-black focus:ring-opacity-50  py-2 px-10 rounded-xl focus:outline-none\"\n                      >\n                        Previous\n                      </button>\n                      <button\n                        disabled={code.byteLength > 0 ? false : codeEditor === \"\"}\n                        onClick={nextStep}\n                        className=\"disabled:opacity-50 button block text-md text-white bg-black hover:bg-black border-2 border-black focus:outline-none focus:ring-black focus:ring-opacity-50  py-2 px-10 rounded-xl focus:outline-none\"\n                      >\n                        Next\n                      </button>\n                    </div>\n                  </div>\n                ) : step === 4 ? (\n                  <div className=\"form-container mb-5 step step-2\">\n                    <div className=\"form-wrapper mb-6\">\n                      <h3 className=\"mb-4\">\n                        <strong>Step 3:</strong> Review\n                      </h3>\n                    </div>\n                    <div className=\"form-buttons flex justify-between\">\n                      <button\n                        onClick={prevStep}\n                        className=\"button block  text-md text-black hover:text-white bg-white hover:bg-black border-2 border-black focus:outline-none focus:ring-black focus:ring-opacity-50  py-2 px-10 rounded-xl focus:outline-none\"\n                      >\n                        Previous\n                      </button>\n                      <button\n                        onClick={submitCode()}\n                        className=\"button block text-md text-white bg-black hover:bg-black border-2 border-black focus:outline-none focus:ring-black focus:ring-opacity-50  py-2 px-10 rounded-xl focus:outline-none\"\n                      >\n                        Confirm and Deploy\n                      </button>\n                    </div>\n                  </div>\n                ) : (\n                  \"\"\n                )}\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","/Users/pangp/Band/demo-bandchainjs/src/components/FormGetPrice.js",["218"],"import { useEffect, useState } from \"react\";\nimport { Client } from \"@bandprotocol/bandchain.js\";\nimport CardPrice from \"./CardPrice\";\n\nfunction FormGetPrice() {\n  const defaultPair = [\n    \"BTC/USD\",\n    \"ETH/USD\",\n    \"BNB/USD\",\n    \"LUNA/USD\",\n    \"DOT/USD\",\n    \"BAND/USD\",\n    \"ALPHA/USD\",\n  ];\n  // states\n  const [prices, setPrice] = useState([]);\n  const [pairInput, setPairInput] = useState(\"\");\n  const [minCount, setminCount] = useState(10);\n  const [askCount, setaskCount] = useState(16);\n\n  useEffect(() => {\n    getPrice(defaultPair);\n  }, []);\n\n  async function getPrice(pair = []) {\n    const grpcUrl = \"https://laozi-testnet4.bandchain.org/grpc-web\";\n    const client = new Client(grpcUrl);\n    const rate = await client.getReferenceData(\n      pairInput !== \"\"\n        ? pairInput.toUpperCase().replace(/\\s/g, \"\").split(\",\")\n        : pair.length > 0\n        ? pair\n        : defaultPair,\n      minCount,\n      askCount\n    );\n    // console.log(rate)\n    setPrice(rate);\n  }\n\n  return (\n    <div className=\"flex flex-row flex-wrap\">\n      <div className=\"w-full md:w-4/12 mb-8 md:mb-0\">\n        <h2 className=\"mb-5 text-3xl \">\n          <strong>Get Price</strong>\n        </h2>\n        <p className=\"mb-5\">\n          This section shows an example on how to query data from BandChain using{\" \"}\n          <a\n            href=\"https://docs.bandchain.org/client-library/bandchain.js/get-started.html#get-reference-data\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            <strong>getReferenceData</strong>\n          </a>{\" \"}\n          method. This example query standard price references based on given symbol pairs, min\n          count, and ask count.\n        </p>\n      </div>\n      <div className=\"w-full md:w-8/12 md:pl-10\">\n        <div className=\"card bg-white p-6 border-2 border-black rounded rounded-2xl w-full mb-10\">\n          <div className=\"card-inner\">\n            <div className=\"mb-5\">\n              <div className=\"input-group mb-3\">\n                <label\n                  htmlFor=\"input-address\"\n                  className=\"block text-sm font-medium text-gray-700 mb-1\"\n                >\n                  Token Pair\n                </label>\n                <input\n                  className=\"focus:outline-none focus:ring-2 focus:ring-gray-200 block w-full p-2 sm:text-sm border-solid border-2 border-gray-200 rounded-xl\"\n                  type=\"text\"\n                  id=\"input-address\"\n                  placeholder=\"e.g. BTC/USD,ETH/USD\"\n                  value={pairInput}\n                  onChange={(e) => setPairInput(e.target.value)}\n                />\n              </div>\n              <div className=\"input-group mb-3\">\n                <label\n                  htmlFor=\"input-mincount\"\n                  className=\"block text-sm font-medium text-gray-700 mb-1\"\n                >\n                  Ask Count\n                </label>\n                <input\n                  className=\"focus:outline-none focus:ring-2 focus:ring-gray-200 block w-full p-2 sm:text-sm border-solid border-2 border-gray-200 rounded-xl\"\n                  type=\"text\"\n                  id=\"input-address\"\n                  value={askCount}\n                  onChange={(e) => setaskCount(e.target.value)}\n                />\n              </div>\n              <div className=\"input-group mb-3\">\n                <label\n                  htmlFor=\"input-mincount\"\n                  className=\"block text-sm font-medium text-gray-700 mb-1\"\n                >\n                  Min Count\n                </label>\n                <input\n                  className=\"focus:outline-none focus:ring-2 focus:ring-gray-200 block w-full p-2 sm:text-sm border-solid border-2 border-gray-200 rounded-xl\"\n                  type=\"text\"\n                  id=\"input-address\"\n                  value={minCount}\n                  onChange={(e) => setminCount(e.target.value)}\n                />\n              </div>\n            </div>\n            <button\n              onClick={getPrice}\n              className=\"button block w-full text-md text-white bg-black hover:bg-black border-2 border-black focus:outline-none focus:ring-black focus:ring-opacity-50  py-2 px-4 rounded-xl focus:outline-none\"\n            >\n              Request\n            </button>\n          </div>\n        </div>\n        <h3 className=\"text-xl mb-8\">\n          <strong>Results</strong>\n        </h3>\n        <div className=\"flex flex-row gap-6 flex-wrap\">\n          {prices.map((price, ind) => (\n            <CardPrice value={price} key={ind} />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default FormGetPrice;\n","/Users/pangp/Band/demo-bandchainjs/src/components/FormSendToken.js",["219","220"],"import { useState, useEffect } from \"react\";\nimport { sendCoin } from \"../band\";\nimport Loading from \"./Loading\";\nimport { useSelector } from \"react-redux\";\nimport UnableService from \"./UnableService\";\nimport AccountWithBalance from \"./AccountWithBalance\";\n\nfunction FormSendToken() {\n  const wallet = useSelector((state) => state.wallet);\n  const [isConnected, setisConnected] = useState(false);\n  const [tokenAmount, setTokenAmount] = useState(0);\n  const [receiverAddress, setReceiverAddress] = useState(\"\");\n  const [sendResult, setSendResult] = useState(\"\");\n  const [sendResultSuccess, setSendResultSuccess] = useState(\"\");\n  const [loading, setLoading] = useState(Boolean(0));\n\n  const [transactions, setTransactions] = useState([]);\n\n  useEffect(() => {\n    if (wallet.address) {\n      setisConnected(true);\n    } else {\n      setisConnected(false);\n    }\n  }, [wallet]);\n\n  const handleInputTokenAmount = (e) => {\n    setTokenAmount(e.target.value);\n  };\n  const handleInputAddress = (e) => {\n    setReceiverAddress(e.target.value);\n  };\n  const sendBandToken = async () => {\n    if (!receiverAddress && !tokenAmount) return;\n    setLoading(Boolean(1));\n    const response = await sendCoin(\n      receiverAddress,\n      tokenAmount,\n      wallet.privateKey,\n      wallet.pubkey,\n      wallet.address\n    );\n    console.log(response);\n    if (response.data === \"\") setSendResult(response.rawLog);\n    if (response.data !== \"\") {\n      setTransactions((transactions) => [...transactions, response.txhash]);\n      setSendResultSuccess(response.txhash);\n    }\n    setLoading(Boolean(0));\n  };\n\n  return (\n    <div className=\"flex flex-row flex-wrap\">\n      <div className=\"w-full md:w-4/12 mb-8 md:mb-0\">\n        <h2 className=\"mb-5 text-3xl \">\n          <strong>Send BAND Token</strong>\n        </h2>\n        <p className=\"mb-5\">\n          The message used for this service is\n          <a\n            href=\"https://docs.bandchain.org/client-library/bandchain.js/get-started.html#send-band-token\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            <strong> MsgSend</strong>\n          </a>\n        </p>\n      </div>\n\n      <div className=\"w-full md:w-8/12 md:pl-10\">\n        {!isConnected ? (\n          <UnableService />\n        ) : (\n          <div>\n            <div className=\"card bg-white border-2 border-black rounded rounded-2xl w-full mb-10\">\n              <AccountWithBalance />\n              <div className=\"card-inner p-6 \">\n                <div className=\"mb-5\">\n                  <div className=\"input-group mb-3\">\n                    <label\n                      htmlFor=\"input-address\"\n                      className=\"block text-sm font-medium text-gray-700 mb-1\"\n                    >\n                      Recipient Address\n                    </label>\n                    <input\n                      className=\"focus:outline-none focus:ring-2 focus:ring-gray-200 block w-full p-2 sm:text-sm border-solid border-2 border-gray-200 rounded-xl\"\n                      type=\"text\"\n                      id=\"input-address\"\n                      value={receiverAddress}\n                      onChange={handleInputAddress}\n                    />\n                  </div>\n                  <div className=\"input-group mb-3\">\n                    <label\n                      htmlFor=\"input-amount\"\n                      className=\"block text-sm font-medium text-gray-700 mb-1\"\n                    >\n                      Token Amount (BAND)\n                    </label>\n                    <input\n                      className=\"focus:outline-none focus:ring-2 focus:ring-gray-200 block w-full p-2 sm:text-sm border-solid border-2 border-gray-200 rounded-xl\"\n                      type=\"number\"\n                      step=\"0.01\"\n                      id=\"input-amount\"\n                      value={tokenAmount}\n                      onChange={handleInputTokenAmount}\n                    />\n                  </div>\n                </div>\n                <button\n                  onClick={sendBandToken}\n                  className=\"button block w-full text-md text-white bg-black hover:bg-black border-2 border-black focus:outline-none focus:ring-black focus:ring-opacity-50  py-2 px-4 rounded-xl focus:outline-none\"\n                >\n                  Send\n                </button>\n              </div>\n            </div>\n            <h3 className=\"text-xl font-bold mb-5\">Latest Transactions</h3>\n            {loading ? (\n              <Loading />\n            ) : transactions.length > 0 ? (\n              transactions.map((tx) => {\n                return (\n                  <a\n                    className=\"text-black mb-3 p-3 border-2 border-gray-200 hover:border-blue rounded-xl block\"\n                    href={`https://laozi-testnet4.cosmoscan.io/tx/${tx}`}\n                  >\n                    {tx}\n                  </a>\n                );\n              })\n            ) : (\n              <div className=\"text-md\">You don't have any transactions</div>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default FormSendToken;\n","/Users/pangp/Band/demo-bandchainjs/src/components/FormDelegate.js",["221","222"],"import { useState, useEffect } from \"react\";\nimport { sendCoin } from \"../band\";\nimport Loading from \"./Loading\";\nimport { useSelector } from \"react-redux\";\nimport UnableService from \"./UnableService\";\nimport AccountWithBalance from \"./AccountWithBalance\";\n\nfunction FormDelegate() {\n  const wallet = useSelector((state) => state.wallet);\n\n  const [validator, setValidator] = useState(\"bandvaloper1zkf9qzs7ayf3uqksxqwve8q693dsdhxk800wvw\");\n  const [isConnected, setisConnected] = useState(false);\n  const [amount, setAmount] = useState(\"\");\n  const [sendResult, setSendResult] = useState(\"\");\n  const [sendResultSuccess, setSendResultSuccess] = useState(\"\");\n  const [loading, setLoading] = useState(Boolean(0));\n  const [transactions, setTransactions] = useState([]);\n\n  useEffect(() => {\n    if (wallet.address) {\n      setisConnected(true);\n    } else {\n      setisConnected(false);\n    }\n  }, [wallet]);\n\n  const handleInputValidator = (e) => {\n    if (e.target.value) setValidator(e.target.value);\n  };\n\n  const handleInputAmount = (e) => {\n    if (e.target.value) setAmount(e.target.value);\n  };\n\n  const sendBandToken = async () => {\n    if (!validator && !amount) return;\n    setLoading(Boolean(1));\n    const response = await sendCoin(\n      validator,\n      amount,\n      wallet.privateKey,\n      wallet.pubkey,\n      wallet.address,\n      \"delegate\"\n    );\n    if (response.data === \"\") setSendResult(response.rawLog);\n    if (response.data !== \"\") {\n      setTransactions((transactions) => [...transactions, response.txhash]);\n      setSendResultSuccess(response.txhash);\n    }\n    setLoading(Boolean(0));\n  };\n\n  return (\n    <div className=\"flex flex-row flex-wrap\">\n      <div className=\"w-full md:w-4/12 mb-8 md:mb-0\">\n        <h2 className=\"mb-5 text-3xl \">\n          <strong>Delegate Token</strong>\n        </h2>\n        <p className=\"mb-5\">\n          The message used for this service is\n          <a\n            href=\"https://docs.bandchain.org/client-library/bandchain.js/get-started.html#send-band-token\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            <strong> MsgDelegate</strong>\n          </a>\n        </p>\n      </div>\n      <div className=\"w-full md:w-8/12 md:pl-10\">\n        {!isConnected ? (\n          <UnableService />\n        ) : (\n          <div>\n            <div className=\"card bg-white border-2 border-black rounded rounded-2xl w-full mb-10\">\n              <AccountWithBalance />\n              <div className=\"card-inner p-6 \">\n                <div className=\"mb-5\">\n                  <div className=\"input-group mb-3\">\n                    <label\n                      htmlFor=\"input-address\"\n                      className=\"block text-sm font-medium text-gray-700 mb-1\"\n                    >\n                      Delegate to\n                    </label>\n                    <input\n                      className=\"focus:outline-none focus:ring-2 focus:ring-gray-200 block w-full p-2 sm:text-sm border-solid border-2 border-gray-200 rounded-xl\"\n                      type=\"text\"\n                      id=\"input-address\"\n                      value={validator}\n                      onChange={handleInputValidator}\n                    />\n                  </div>\n                  <div className=\"input-group mb-3\">\n                    <label\n                      htmlFor=\"input-amount\"\n                      className=\"block text-sm font-medium text-gray-700 mb-1\"\n                    >\n                      Token Amount (BAND)\n                    </label>\n                    <input\n                      className=\"focus:outline-none focus:ring-2 focus:ring-gray-200 block w-full p-2 sm:text-sm border-solid border-2 border-gray-200 rounded-xl\"\n                      type=\"number\"\n                      step=\"0.01\"\n                      id=\"input-amount\"\n                      onChange={handleInputAmount}\n                      value={amount}\n                    />\n                  </div>\n                </div>\n                <button\n                  onClick={sendBandToken}\n                  className=\"button block w-full text-md text-white bg-black hover:bg-black border-2 border-black focus:outline-none focus:ring-black focus:ring-opacity-50  py-2 px-4 rounded-xl focus:outline-none\"\n                >\n                  Delegate\n                </button>\n              </div>\n            </div>\n            <h3 className=\"text-xl font-bold mb-5\">Latest Transactions</h3>\n            {loading ? (\n              <Loading />\n            ) : transactions.length > 0 ? (\n              transactions.map((tx) => {\n                return (\n                  <a\n                    className=\"text-black mb-3 p-3 border-2 border-gray-200 hover:border-blue rounded-xl block\"\n                    href={`https://laozi-testnet4.cosmoscan.io/tx/${tx}`}\n                  >\n                    {tx}\n                  </a>\n                );\n              })\n            ) : (\n              <div className=\"text-md\">You don't have any transactions</div>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default FormDelegate;\n","/Users/pangp/Band/demo-bandchainjs/src/components/Header/ModalConnectWallet.js",[],"/Users/pangp/Band/demo-bandchainjs/src/components/Header/WalletDropdown.js",[],"/Users/pangp/Band/demo-bandchainjs/src/components/FormSendRequest.js",[],"/Users/pangp/Band/demo-bandchainjs/src/app-context.js",[],"/Users/pangp/Band/demo-bandchainjs/src/components/FormIBCTransfer.js",["223","224"],"import { useEffect, useState } from \"react\";\nimport { sendIBC } from \"../band\";\nimport Loading from \"./Loading\";\nimport { useSelector } from \"react-redux\";\nimport UnableService from \"./UnableService\";\nimport AccountWithBalance from \"./AccountWithBalance\";\n\nfunction FormSendToken() {\n  const wallet = useSelector((state) => state.wallet);\n  const [isConnected, setisConnected] = useState(false);\n\n  const [tokenAmount, setTokenAmount] = useState(0);\n  const [receiverAddress, setReceiverAddress] = useState(\n    \"band1jrhuqrymzt4mnvgw8cvy3s9zhx3jj0dq30qpte\"\n  );\n  const [sendResult, setSendResult] = useState(\"\");\n  const [sendResultSuccess, setSendResultSuccess] = useState(\"\");\n  const [loading, setLoading] = useState(Boolean(0));\n  const ibcchannel = \"CONSUMER\";\n\n  const [transactions, setTransactions] = useState([]);\n\n  useEffect(() => {\n    if (wallet.address) {\n      setisConnected(true);\n    } else {\n      setisConnected(false);\n    }\n  }, [wallet]);\n\n  const handleInputTokenAmount = (e) => {\n    setTokenAmount(e.target.value);\n  };\n  const handleInputAddress = (e) => {\n    setReceiverAddress(e.target.value);\n  };\n  const sendBandToken = async () => {\n    if (!receiverAddress && !tokenAmount) return;\n    setLoading(Boolean(1));\n    const response = await sendIBC(\n      receiverAddress,\n      tokenAmount,\n      wallet.privateKey,\n      wallet.pubkey,\n      wallet.address\n    );\n    console.log(response);\n    if (response.height === 0) {\n      setSendResult(response.rawLog);\n    }\n    if (response.data !== \"\") {\n      setSendResultSuccess(response.txhash);\n    }\n    setTransactions((transactions) => [...transactions, response.txhash]);\n    setLoading(Boolean(0));\n  };\n\n  return (\n    <div className=\"flex flex-row flex-wrap\">\n      <div className=\"w-full md:w-4/12 mb-8 md:mb-0\">\n        <h2 className=\"mb-5 text-3xl \">\n          <strong>Send BAND token via IBC</strong>\n        </h2>\n        <p className=\"mb-5\">\n          The message used for this service is\n          <a\n            href=\"https://docs.bandchain.org/client-library/bandchain.js/get-started.html#send-band-token\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            <strong> MsgTransfer</strong>\n          </a>\n        </p>\n      </div>\n      <div className=\"w-full md:w-8/12 md:pl-10\">\n        {!isConnected ? (\n          <UnableService />\n        ) : (\n          <div>\n            <div className=\"card bg-white border-2 border-black rounded rounded-2xl w-full mb-10\">\n              <AccountWithBalance />\n              <div className=\"card-inner p-6\">\n                <div className=\"mb-5\">\n                  <div className=\"input-group mb-3\">\n                    <label\n                      htmlFor=\"input-channel\"\n                      className=\"block text-sm font-medium text-gray-700 mb-1\"\n                    >\n                      Channel\n                    </label>\n                    <input\n                      className=\"text-gray-400 focus:outline-none focus:ring-2 focus:ring-gray-200 block w-full p-2 sm:text-sm border-solid border-2 border-gray-200 rounded-xl\"\n                      type=\"text\"\n                      id=\"input-channel\"\n                      value={ibcchannel}\n                      disabled\n                    />\n                  </div>\n                  <div className=\"input-group mb-3\">\n                    <label\n                      htmlFor=\"input-address\"\n                      className=\"block text-sm font-medium text-gray-700 mb-1\"\n                    >\n                      Recipient Address\n                    </label>\n                    <input\n                      className=\"focus:outline-none focus:ring-2 focus:ring-gray-200 block w-full p-2 sm:text-sm border-solid border-2 border-gray-200 rounded-xl\"\n                      type=\"text\"\n                      id=\"input-address\"\n                      value={receiverAddress}\n                      onChange={handleInputAddress}\n                    />\n                  </div>\n                  <div className=\"input-group mb-3\">\n                    <label\n                      htmlFor=\"input-amount\"\n                      className=\"block text-sm font-medium text-gray-700 mb-1\"\n                    >\n                      Token Amount (BAND)\n                    </label>\n                    <input\n                      className=\"focus:outline-none focus:ring-2 focus:ring-gray-200 block w-full p-2 sm:text-sm border-solid border-2 border-gray-200 rounded-xl\"\n                      type=\"number\"\n                      id=\"input-amount\"\n                      value={tokenAmount}\n                      onChange={handleInputTokenAmount}\n                    />\n                  </div>\n                </div>\n                <button\n                  onClick={sendBandToken}\n                  className=\"button block w-full text-md text-white bg-black hover:bg-black border-2 border-black focus:outline-none focus:ring-black focus:ring-opacity-50  py-2 px-4 rounded-xl focus:outline-none\"\n                >\n                  Send\n                </button>\n              </div>\n            </div>\n            <h3 className=\"text-xl font-bold mb-5\">Latest Transactions</h3>\n            {loading ? (\n              <Loading />\n            ) : transactions.length > 0 ? (\n              transactions.map((tx, ind) => {\n                return (\n                  <a\n                    className=\"text-black mb-3 p-3 border-2 border-gray-200 hover:border-blue rounded-xl block\"\n                    href={`https://laozi-testnet4.cosmoscan.io/tx/${tx}`}\n                    key={ind}\n                    target=\"_blank\"\n                    rel=\"noreferrer\"\n                  >\n                    {tx}\n                  </a>\n                );\n              })\n            ) : (\n              <div className=\"text-md\">You don't have any transactions</div>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default FormSendToken;\n","/Users/pangp/Band/demo-bandchainjs/src/components/AccountWithBalance.js",[],"/Users/pangp/Band/demo-bandchainjs/src/components/UnableService.js",[],"/Users/pangp/Band/demo-bandchainjs/src/band.js",["225","226"],"import { Client, Wallet, Obi, Message, Coin, Transaction, Fee } from \"@bandprotocol/bandchain.js\";\nimport { MsgBeginRedelegate } from \"@bandprotocol/bandchain.js/proto/cosmos/staking/v1beta1/tx_pb\";\nimport moment from \"moment\";\n\nconst grpcUrl = \"https://laozi-testnet4.bandchain.org/grpc-web\";\nconst client = new Client(grpcUrl);\n\nexport async function getPairPrice(pair, minCount, askCount) {\n  const data = await client.getReferenceData(pair, minCount, askCount);\n  return data;\n}\n\nexport function getWallet(mnemonic) {\n  const { PrivateKey } = Wallet;\n  const privateKey = PrivateKey.fromMnemonic(mnemonic);\n  const pubkey = privateKey.toPubkey();\n  const sender = pubkey.toAddress().toAccBech32();\n  return { sender, privateKey, pubkey };\n}\n\nexport async function makeRequest(symbols, multiplier, feeInput, prepareGas, executeGas) {\n  symbols = symbols.toUpperCase().replace(/\\s/g, \"\").split(\",\");\n\n  // Step 1: Import a private key for signing transaction\n  const { PrivateKey } = Wallet;\n  const mnemonic = \"s\";\n  const privateKey = PrivateKey.fromMnemonic(mnemonic);\n  const pubkey = privateKey.toPubkey();\n  const sender = pubkey.toAddress().toAccBech32();\n\n  // Step 2.1: Prepare oracle request's properties\n  const obi = new Obi(\"{symbols:[string],multiplier:u64}/{rates:[u64]}\");\n  const calldata = obi.encodeInput({ symbols: symbols, multiplier: multiplier });\n\n  const oracleScriptId = 37;\n  const askCount = 2;\n  const minCount = 1;\n  const clientId = \"from_bandchain.js\";\n\n  let feeLimit = new Coin();\n  feeLimit.setDenom(\"uband\");\n  feeLimit.setAmount(feeInput);\n\n  // Step 2.2: Create an oracle request message\n  const requestMessage = new Message.MsgRequestData(\n    oracleScriptId,\n    calldata,\n    askCount,\n    minCount,\n    clientId,\n    sender,\n    [feeLimit],\n    prepareGas,\n    executeGas\n  );\n\n  const txRawBytes = await createSignedTransaction(requestMessage, sender, pubkey, privateKey);\n\n  // Step 4: Broadcast the transaction\n  const sendTx = await client.sendTxBlockMode(txRawBytes);\n  // console.log(sendTx);\n  // if (sendTx) decodeData(obi.encodeOutput(calldata).toString(\"hex\"));\n\n  return sendTx;\n}\n\nfunction decodeData(data) {\n  const obi = new Obi(\"{symbols:[string],multiplier:u64}/{rates:[u64]}\");\n  const dataBuffer = Buffer.from(\n    \"0000000400000003455448000000054d41544943000000034254430000000455534443000000003b9aca00\",\n    \"hex\"\n  );\n  // const decoded = obi.decodeOutput(\n  //   Buffer.from(\n  //     \"0000086df1baab00000000000200000009436f696e4765636b6f000000005eca223d0000000d43727970746f436f6d70617265000000005eca2252\",\n  //     \"hex\"\n  //   )\n  // );\n  // const decode = obi.decodeOutput(dataBuffer).toString(\"hex\");\n  // console.log(decode);\n  console.log(obi.decodeOutput(dataBuffer));\n}\n\nexport const sendCoin = async (address, amount, privateKey, pubkey, sender, action = \"send\") => {\n  const { MsgSend, MsgDelegate } = Message;\n\n  const receiver = address;\n  const sendAmount = new Coin();\n  sendAmount.setDenom(\"uband\");\n  sendAmount.setAmount((amount * 1e6).toString());\n\n  const msg =\n    action === \"delegate\"\n      ? new MsgDelegate(sender, receiver, sendAmount)\n      : new MsgSend(sender, receiver, [sendAmount]);\n\n  const txRawBytes = await createSignedTransaction(msg, sender, pubkey, privateKey);\n\n  // Step 5 send the transaction\n  const response = await client.sendTxBlockMode(txRawBytes);\n\n  return response;\n};\n\nexport const undelegateCoin = async (operator, amount, privateKey, pubkey, sender) => {\n  const sendAmount = new Coin();\n  sendAmount.setDenom(\"uband\");\n  sendAmount.setAmount((amount * 1e6).toString());\n\n  const { MsgUndelegate } = Message;\n  const msg = new MsgUndelegate(sender, operator, sendAmount);\n  const txRawBytes = await createSignedTransaction(msg, sender, pubkey, privateKey);\n  const response = await client.sendTxBlockMode(txRawBytes);\n\n  return response;\n};\n\nexport const reDelegateCoin = async (\n  srcOperator,\n  destOperator,\n  amount,\n  privateKey,\n  pubkey,\n  sender\n) => {\n  const sendAmount = new Coin();\n  sendAmount.setDenom(\"uband\");\n  sendAmount.setAmount((amount * 1e6).toString());\n\n  const { MsgBeginRedelegate } = Message;\n  const msg = new MsgBeginRedelegate(sender, srcOperator, destOperator, sendAmount);\n  const txRawBytes = await createSignedTransaction(msg, sender, pubkey, privateKey);\n  const response = await client.sendTxBlockMode(txRawBytes);\n\n  return response;\n};\n\nexport const reinvestRewards = async (validator, privateKey, pubkey, sender) => {\n  // const sendAmount = new Coin();\n  // sendAmount.setDenom(\"uband\");\n  // sendAmount.setAmount((amount * 1e6).toString());\n\n  const { MsgWithdrawDelegatorReward } = Message;\n  const msg = new MsgWithdrawDelegatorReward(sender, validator);\n  const txRawBytes = await createSignedTransaction(msg, sender, pubkey, privateKey);\n  const response = await client.sendTxBlockMode(txRawBytes);\n\n  return response;\n};\n\nexport const sendIBC = async (address, amount, privateKey, pubkey, sender) => {\n  const { MsgTransfer } = Message;\n\n  // Here we use different message type, which is MsgSend\n  const receiver = address;\n  const sendAmount = new Coin();\n  sendAmount.setDenom(\"uband\");\n  sendAmount.setAmount((amount * 1e6).toString());\n  const timeoutTimestamp = moment().unix() * 1e9;\n\n  const msg = new MsgTransfer(\n    \"transfer\",\n    \"channel-25\",\n    sender,\n    receiver,\n    sendAmount,\n    timeoutTimestamp\n  );\n\n  const signedTx = await createSignedTransaction(msg, sender, pubkey, privateKey);\n\n  // Step 5 send the transaction\n  const response = await client.sendTxBlockMode(signedTx);\n\n  return response;\n};\n\nexport const createDataSource = async (\n  title,\n  code,\n  sender,\n  owner,\n  treasury,\n  privateKey,\n  pubkey,\n  ...desc\n) => {\n  const { MsgCreateDataSource } = Message;\n  let feeCoin = new Coin();\n  feeCoin.setDenom(\"uband\");\n  feeCoin.setAmount(\"1000\");\n\n  const msg = MsgCreateDataSource(title, code, [feeCoin], treasury, owner, sender, desc);\n\n  // const msg = new Message.MsgCreateDataSource(title, code, [feeCoin], treasury, owner, sender);\n\n  const signedTx = await createSignedTransaction(msg, sender, pubkey, privateKey);\n\n  // Step 5 send the transaction\n  const response = await client.sendTxBlockMode(signedTx);\n\n  return response;\n};\n\nexport const editDataSource = async (id, code, sender, owner, privateKey, pubkey, ...args) => {\n  let feeCoin = new Coin();\n  feeCoin.setDenom(\"uband\");\n  feeCoin.setAmount(\"1000\");\n\n  const msg = new Message.MsgEditDataSource(parseInt(id), code, [feeCoin], owner, sender);\n\n  const signedTx = await createSignedTransaction(msg, sender, pubkey, privateKey);\n\n  // Step 5 send the transaction\n  const response = await client.sendTxBlockMode(signedTx);\n\n  return response;\n};\n\nexport async function createOracleScript(\n  title,\n  desc,\n  schema,\n  source_code_url,\n  code,\n  sender,\n  owner,\n  privateKey,\n  pubkey\n) {\n  let coin = new Coin();\n  coin.setDenom(\"uband\");\n  coin.setAmount(\"1000000\");\n\n  let feeCoin = new Coin();\n  feeCoin.setDenom(\"uband\");\n  feeCoin.setAmount(\"1000\");\n\n  const requestMessage = new Message.MsgCreateOracleScript(\n    title,\n    desc,\n    schema,\n    source_code_url,\n    Buffer.from(code),\n    owner,\n    sender\n  );\n\n  const signedTx = await createSignedTransaction(requestMessage, sender, pubkey, privateKey);\n  const sendTx = await client.sendTxBlockMode(signedTx);\n\n  return sendTx;\n}\n\nexport async function createMsgEditOS(\n  id,\n  title,\n  desc,\n  schema,\n  source_code_url,\n  code,\n  sender,\n  owner,\n  privateKey,\n  pubkey\n) {\n  let coin = new Coin();\n  coin.setDenom(\"uband\");\n  coin.setAmount(\"1000000\");\n\n  let feeCoin = new Coin();\n  feeCoin.setDenom(\"uband\");\n  feeCoin.setAmount(\"1000\");\n\n  const requestMessage = new Message.MsgEditOracleScript(\n    id,\n    title,\n    desc,\n    schema,\n    source_code_url,\n    Buffer.from(code),\n    owner,\n    sender\n  );\n\n  const signedTx = await createSignedTransaction(requestMessage, sender, pubkey, privateKey);\n  const sendTx = await client.sendTxBlockMode(signedTx);\n\n  return sendTx;\n}\n\nexport async function getRawPreview(\n  title,\n  desc,\n  schema,\n  source_code_url,\n  code,\n  sender,\n  owner,\n  privateKey,\n  pubkey\n) {\n  let coin = new Coin();\n  coin.setDenom(\"uband\");\n  coin.setAmount(\"1000000\");\n\n  let feeCoin = new Coin();\n  feeCoin.setDenom(\"uband\");\n  feeCoin.setAmount(\"1000\");\n\n  const requestMessage = new Message.MsgCreateOracleScript(\n    title,\n    desc,\n    schema,\n    source_code_url,\n    Buffer.from(code),\n    owner,\n    sender\n  );\n\n  const fee = new Fee();\n  fee.setAmountList([feeCoin]);\n  fee.setGasLimit(1000000);\n  const chainId = await client.getChainId();\n  const txn = new Transaction();\n  txn.withMessages(requestMessage);\n  await txn.withSender(client, sender);\n  txn.withChainId(chainId);\n  txn.withFee(fee);\n  txn.withMemo(\"\");\n\n  const signDoc = txn.getSignDoc(pubkey);\n  const signature = privateKey.sign(signDoc);\n\n  const txRawBytes = txn.getTxData(signature, pubkey);\n\n  return txRawBytes;\n}\n\nexport async function getRawPreviewEditOs(\n  title,\n  desc,\n  schema,\n  source_code_url,\n  code,\n  sender,\n  owner,\n  privateKey,\n  pubkey\n) {\n  let coin = new Coin();\n  coin.setDenom(\"uband\");\n  coin.setAmount(\"1000000\");\n\n  let feeCoin = new Coin();\n  feeCoin.setDenom(\"uband\");\n  feeCoin.setAmount(\"1000\");\n\n  const requestMessage = new Message.MsgCreateOracleScript(\n    title,\n    desc,\n    schema,\n    source_code_url,\n    Buffer.from(code),\n    owner,\n    sender\n  );\n\n  const fee = new Fee();\n  fee.setAmountList([feeCoin]);\n  fee.setGasLimit(1000000);\n  const chainId = await client.getChainId();\n  const txn = new Transaction();\n  txn.withMessages(requestMessage);\n  await txn.withSender(client, sender);\n  txn.withChainId(chainId);\n  txn.withFee(fee);\n  txn.withMemo(\"\");\n\n  const signDoc = txn.getSignDoc(pubkey);\n  const signature = privateKey.sign(signDoc);\n\n  const txRawBytes = txn.getTxData(signature, pubkey);\n\n  return txRawBytes;\n}\n\nexport async function withdrawReward(delegator, validator, sender, pubkey, privateKey) {\n  const msg = new Message.MsgWithdrawDelegatorReward(delegator, validator);\n  const signedTx = await createSignedTransaction(msg, sender, pubkey, privateKey);\n  const response = await client.sendTxBlockMode(signedTx);\n  return response;\n}\n\nexport async function createSignedTransaction(msg, sender, pubkey, privateKey) {\n  let feeCoin = new Coin();\n  feeCoin.setDenom(\"uband\");\n  feeCoin.setAmount(\"1000\");\n\n  const fee = new Fee();\n  fee.setAmountList([feeCoin]);\n  fee.setGasLimit(1000000);\n  const chainId = await client.getChainId();\n  const txn = new Transaction();\n  txn.withMessages(msg);\n  await txn.withSender(client, sender);\n  txn.withChainId(chainId);\n  txn.withFee(fee);\n  txn.withMemo(\"From Bandchain.js Demo App\");\n\n  const signDoc = txn.getSignDoc(pubkey);\n  const signature = privateKey.sign(signDoc);\n\n  const txRawBytes = txn.getTxData(signature, pubkey);\n\n  return txRawBytes;\n}\n","/Users/pangp/Band/demo-bandchainjs/src/components/CardPrice.js",[],"/Users/pangp/Band/demo-bandchainjs/src/components/Loading.js",[],"/Users/pangp/Band/demo-bandchainjs/src/components/FormConnectWallet.js",["227","228"],"import { useState, useEffect } from \"react\";\nimport { getWallet } from \"../band\";\nimport { useDispatch } from \"react-redux\";\nimport { addWallet, updateBalance } from \"../redux/walletSlice\";\nimport { gql, useLazyQuery, useSubscription } from \"@apollo/client\";\nimport { useSelector } from \"react-redux\";\n\nexport default function FormConnectWallet() {\n  const wallet = useSelector((state) => state.wallet);\n  const dispatch = useDispatch();\n  const [mnemonic, setMnemonic] = useState(\"\");\n\n  // const GET_BALANCE = gql`\n  //   query GetBalance($address: String!) {\n  //     accounts(where: { address: { _eq: $address } }) {\n  //       balance\n  //     }\n  //   }\n  // `;\n\n  const GET_BALANCE = gql`\n    subscription GetBalance($address: String!) {\n      accounts(where: { address: { _eq: $address } }) {\n        balance\n      }\n    }\n  `;\n\n  // const [getBalance, { loading, error, data }] = useLazyQuery(GET_BALANCE);\n  const { loading, error, data } = useSubscription(GET_BALANCE, {\n    variables: { address: wallet.address },\n  });\n\n  useEffect(() => {\n    // getBalance({ variables: { address: wallet.address } });\n    if (data && data.accounts[0]) {\n      const uband = data.accounts[0].balance.split(\"uband\")[0];\n      dispatch(\n        updateBalance({\n          balance: uband / 1e6,\n        })\n      );\n    }\n    if (loading) console.error(loading);\n    if (error) console.error(error);\n  }, [wallet, data]);\n\n  const handleConnectButton = (e) => {\n    e.preventDefault();\n    if (mnemonic.length > 0 && mnemonic !== \"\") {\n      const { sender, privateKey, pubkey } = getWallet(mnemonic);\n      if (sender) {\n        dispatch(\n          addWallet({\n            address: sender,\n            name: sender,\n            privateKey: privateKey,\n            pubkey: pubkey,\n          })\n        );\n      }\n    }\n  };\n\n  return (\n    <div>\n      <div className=\"card-inner\">\n        <div className=\"mb-5\">\n          <div className=\"input-group mb-3\">\n            <label htmlFor=\"input-address\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Enter mnemonic phrase\n            </label>\n            <input\n              className=\"focus:outline-none focus:ring-2 focus:ring-gray-200 block w-full p-2 sm:text-sm border-solid border-2 border-gray-200 rounded-xl\"\n              type=\"text\"\n              id=\"input-address\"\n              valur={mnemonic}\n              onChange={(e) => setMnemonic(e.target.value)}\n            />\n          </div>\n        </div>\n        <button\n          onClick={(e) => handleConnectButton(e)}\n          className=\"button block w-full bg-purple-600 text-white py-2 px-4 rounded-xl hover:bg-purple-700 focus:outline-none focus:ring-purple-600 focus:ring-opacity-50 transition duration-500 ease-in-out\"\n        >\n          Connect Wallet\n        </button>\n      </div>\n    </div>\n  );\n}\n","/Users/pangp/Band/demo-bandchainjs/src/routes/OracleScript.js",[],"/Users/pangp/Band/demo-bandchainjs/src/components/FormCreateOracleScript.js",["229"],"import { useEffect, useState, useCallback } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport { createOracleScript, getRawPreview } from \"../band\";\nimport { useSelector } from \"react-redux\";\nimport UnableService from \"./UnableService\";\nimport AccountWithBalance from \"./AccountWithBalance\";\nimport Editor from \"react-simple-code-editor\";\nimport { highlight, languages } from \"prismjs/components/prism-core\";\nimport \"prismjs/components/prism-clike\";\nimport \"prismjs/components/prism-rust\";\n// import \"prismjs/themes/prism.css\";\nimport \"prismjs/themes/prism-tomorrow.css\";\nimport axios from \"axios\";\n\nexport default function FormCreateOracleScript() {\n  const wallet = useSelector((state) => state.wallet);\n\n  // State\n  const [isConnected, setisConnected] = useState(false);\n  const [step, setStep] = useState(1);\n  const [codeType, setCodeType] = useState(\"upload\");\n\n  // Form Data\n  const [osname, setosname] = useState(\"\");\n  const [osdesc, setosdesc] = useState(\"\");\n  const [schema, setschema] = useState(\"\");\n  const [sourcecodeUrl, setsourcecodeUrl] = useState(\"\");\n  const [owner, setOwner] = useState(\"\");\n  const [code, setCode] = useState([]);\n  const [filename, setfilename] = useState(\"\");\n  const [codeEditor, setCodeEditor] = useState(`# Insert your code here`);\n  const [wasmCode, setwasmCode] = useState(\"\");\n\n  // Handling Functions\n  const nextStep = (e) => {\n    e.preventDefault();\n    setStep(step + 1);\n  };\n\n  const prevStep = () => {\n    setStep(step - 1);\n  };\n\n  const isFormFilled = () => {\n    if (osname !== \"\" && owner !== \"\") {\n      return false;\n    }\n    return true;\n  };\n\n  const removeFile = () => {\n    setCode([]);\n    setfilename(\"\");\n  };\n\n  const onDrop = useCallback((acceptedFiles) => {\n    setfilename(acceptedFiles[0].name);\n    acceptedFiles.forEach((file) => {\n      const reader = new FileReader();\n\n      reader.onabort = () => console.log(\"file reading was aborted\");\n      reader.onerror = () => console.log(\"file reading has failed\");\n      reader.onload = () => {\n        // Do whatever you want with the file contents\n        const binaryStr = reader.result;\n        console.log(binaryStr);\n        setCode(binaryStr);\n      };\n      reader.readAsArrayBuffer(file);\n    });\n  }, []);\n\n  const { getRootProps, getInputProps } = useDropzone({\n    onDrop,\n    accept: \"text/x-python-script\",\n  });\n\n  const renderSwitchCode = () => {\n    switch (codeType) {\n      case \"editor\":\n        return (\n          <Editor\n            value={codeEditor}\n            onValueChange={(rawcode) => setCodeEditor(rawcode)}\n            highlight={(rawcode) => highlight(rawcode, languages.rust)}\n            padding={15}\n            style={{\n              fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\n              fontSize: 12,\n              background: \"#282A2B\",\n              color: \"white\",\n              borderRadius: \"10px\",\n              minHeight: \"300px\",\n            }}\n          />\n        );\n      default:\n        return (\n          <div className=\"input-group mb-3\">\n            {code.byteLength > 0 ? (\n              <div\n                onClick={removeFile}\n                className=\"group cursor-pointer border-l-2 border-t-2 border-r-4 border-b-4 hover:border-r-2 hover:border-b-2  hover:border-orange hover:bg-red-100 border-black bg-yellow-50 p-3 text-black rounded-xl relative w-full hover:transform hover:translate-x-px hover:translate-y-px\"\n              >\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center\">\n                    <img\n                      src=\"/images/python-file.png\"\n                      alt=\"\"\n                      className=\"w-100 block h-auto mr-4\"\n                      style={{ maxWidth: \"50px\" }}\n                    />\n                    <p className=\"font-medium\">{filename}</p>\n                  </div>\n                  <div className=\"invisible group-hover:visible btn-deletefile w-8 h-8 bg-orange rounded-full text-white flex items-center justify-center\">\n                    <svg\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      className=\"h-5 w-5\"\n                      viewBox=\"0 0 20 20\"\n                      fill=\"currentColor\"\n                    >\n                      <path\n                        fillRule=\"evenodd\"\n                        d=\"M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z\"\n                        clipRule=\"evenodd\"\n                      />\n                    </svg>\n                  </div>\n                </div>\n              </div>\n            ) : (\n              <div className=\"upload-outer\" {...getRootProps()}>\n                <input {...getInputProps()} />\n                <div className=\"h-40 border-2 bg-gray-50 border-gray-300 rounded-xl text-center flex items-center justify-center\">\n                  <div>\n                    Drag 'n' drop a file here,\n                    <br /> or <br />\n                    <span className=\"mt-2 cursor-pointer inline-block button px-4 py-1 border-2 border-black rounded-xl bg-yellow-300 hover:bg-yellow-400 text-sm\">\n                      Browse\n                    </span>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n        );\n    }\n  };\n\n  const compileCode = async () => {\n    setStep(step + 1);\n    if (codeType !== \"upload\") {\n      await axios\n        .post(`https://play.rust-lang.org/compile`, {\n          assemblyFlavor: \"att\",\n          backtrace: false,\n          channel: \"nightly\",\n          code: codeEditor,\n          crateType: \"bin\",\n          demangleAssembly: \"demangle\",\n          edition: \"2021\",\n          mode: \"debug\",\n          processAssembly: \"filter\",\n          target: \"wasm\",\n          tests: false,\n        })\n        .then((res) => {\n          setwasmCode(res.data.code);\n        });\n    }\n    getPreviewTx();\n  };\n\n  const getPreviewTx = async () => {\n    const response = await getRawPreview(\n      osname,\n      osdesc,\n      schema,\n      sourcecodeUrl,\n      codeType === \"upload\" ? code : window.btoa(wasmCode),\n      owner,\n      wallet.address, // sender\n      wallet.privateKey,\n      wallet.pubkey\n    );\n    console.log(response);\n    // Todo: receive the response and display as a preview\n  };\n\n  const submitCode = async () => {\n    const response = await createOracleScript(\n      osname,\n      osdesc,\n      schema,\n      sourcecodeUrl,\n      codeType === \"upload\" ? code : window.btoa(wasmCode),\n      owner,\n      wallet.address, // sender\n      wallet.privateKey,\n      wallet.pubkey\n    );\n    console.log(response);\n    // Todo: Show loading state and the result of the tx and show the next step\n  };\n\n  // Effects\n  useEffect(() => {\n    if (wallet.address) {\n      setisConnected(true);\n    } else {\n      setisConnected(false);\n    }\n  }, [wallet]);\n\n  return (\n    <div className=\"flex flex-row flex-wrap\">\n      <div className=\"w-full md:w-4/12 mb-8 md:mb-0\">\n        <h2 className=\"mb-5 text-3xl \">\n          <strong>Add a new Oracle Script</strong>\n        </h2>\n        <p className=\"mb-5\">\n          <a\n            href=\"https://docs.bandchain.org/client-library/bandchain.js/get-started.html#send-band-token\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            <strong>MsgCreateOracleScript</strong>\n          </a>{\" \"}\n          is a message for creating a new Oracle Script.\n        </p>\n        <div className=\"process-step\">\n          <ul>\n            <li className=\"mb-5\">\n              <strong>Step 1:</strong> Provide the oracle script information such as name, schema,\n              owner address, and description.\n            </li>\n            <li className=\"mb-5\">\n              <strong>Step 2:</strong> Upload the .rust file or try using code editor\n            </li>\n            <li className=\"mb-5\">\n              <strong>Step 3:</strong> Review and deploy your oracle script and Finish.\n            </li>\n          </ul>\n        </div>\n      </div>\n      <div className=\"w-full md:w-8/12 md:pl-10\">\n        {!isConnected ? (\n          <UnableService />\n        ) : (\n          <div>\n            <div className=\"card bg-white border-2 border-black rounded rounded-2xl w-full mb-10\">\n              <div className=\"card-inner p-6\">\n                {step === 1 ? (\n                  <div className=\"form-container mb-5 step step-1\">\n                    <div className=\"form-wrapper mb-6\">\n                      <h3 className=\"mb-4\">\n                        <strong>Step 1:</strong> Enter the oracle script information below.\n                      </h3>\n                      <div className=\"input-group mb-3\">\n                        <label\n                          htmlFor=\"input-address\"\n                          className=\"block text-sm font-medium text-gray-700 mb-1\"\n                        >\n                          Oracle Script Name <span className=\"text-orange\">*</span>\n                        </label>\n                        <input\n                          className=\"focus:outline-none focus:ring-2 focus:ring-gray-200 block w-full p-2 sm:text-sm border-solid border-2 border-gray-200 rounded-xl\"\n                          type=\"text\"\n                          id=\"input-address\"\n                          onChange={(e) => setosname(e.target.value)}\n                          value={osname}\n                        />\n                      </div>\n                      <div className=\"input-group mb-3\">\n                        <label\n                          htmlFor=\"input-owner\"\n                          className=\"block text-sm font-medium text-gray-700 mb-1\"\n                        >\n                          Owner Address <span className=\"text-orange\">*</span>\n                        </label>\n                        <input\n                          className=\"focus:outline-none focus:ring-2 focus:ring-gray-200 block w-full p-2 sm:text-sm border-solid border-2 border-gray-200 rounded-xl\"\n                          type=\"text\"\n                          id=\"input-owner\"\n                          value={owner}\n                          onChange={(e) => setOwner(e.target.value)}\n                        />\n                      </div>\n                      <div className=\"input-group mb-3\">\n                        <label\n                          htmlFor=\"input-treasury\"\n                          className=\"block text-sm font-medium text-gray-700 mb-1\"\n                        >\n                          Schema\n                        </label>\n                        <input\n                          className=\"focus:outline-none focus:ring-2 focus:ring-gray-200 block w-full p-2 sm:text-sm border-solid border-2 border-gray-200 rounded-xl\"\n                          type=\"text\"\n                          id=\"input-treasury\"\n                          value={schema}\n                          onChange={(e) => setschema(e.target.value)}\n                        />\n                      </div>\n                      <div className=\"input-group mb-3\">\n                        <label\n                          htmlFor=\"input-treasury\"\n                          className=\"block text-sm font-medium text-gray-700 mb-1\"\n                        >\n                          Source Code URL\n                        </label>\n                        <input\n                          className=\"focus:outline-none focus:ring-2 focus:ring-gray-200 block w-full p-2 sm:text-sm border-solid border-2 border-gray-200 rounded-xl\"\n                          type=\"text\"\n                          id=\"input-treasury\"\n                          value={sourcecodeUrl}\n                          onChange={(e) => setsourcecodeUrl(e.target.value)}\n                        />\n                      </div>\n                      <div className=\"input-group mb-3\">\n                        <label\n                          htmlFor=\"input-desc\"\n                          className=\"block text-sm font-medium text-gray-700 mb-1\"\n                        >\n                          Description\n                        </label>\n                        <textarea\n                          className=\"focus:outline-none focus:ring-2 focus:ring-gray-200 block w-full p-2 sm:text-sm border-solid border-2 border-gray-200 rounded-xl\"\n                          type=\"text\"\n                          id=\"input-desc\"\n                          onChange={(e) => setosdesc(e.target.value)}\n                          value={osdesc}\n                        />\n                      </div>\n                    </div>\n                    <div className=\"form-buttons\">\n                      <button\n                        onClick={nextStep}\n                        disabled={isFormFilled()}\n                        className=\"button block ml-auto text-md text-white bg-black hover:bg-black border-2 border-black focus:outline-none focus:ring-black focus:ring-opacity-50  py-2 px-10 rounded-xl focus:outline-none disabled:opacity-50 \"\n                      >\n                        Next\n                      </button>\n                    </div>\n                  </div>\n                ) : step === 2 ? (\n                  <div className=\"form-container mb-5 step step-2\">\n                    <div className=\"form-wrapper mb-6\">\n                      <h3 className=\"mb-4\">\n                        <strong>Step 2:</strong> Choose how to add the oracle script code\n                      </h3>\n\n                      <div className=\"flex gap-6 radio-group choice-code\">\n                        <div className=\"flex-grow flex-shrink w-1/2 input-group mb-3\">\n                          <input\n                            type=\"radio\"\n                            name=\"codeType\"\n                            id=\"input-codeType-upload\"\n                            value=\"upload\"\n                            checked={codeType === \"upload\"}\n                            onChange={(e) => setCodeType(e.target.value)}\n                          />\n                          <label\n                            htmlFor=\"input-codeType-upload\"\n                            className=\"hover:bg-indigo-50 w-full label-btn button p-4 border-2 border-gray-300 block rounded-xl text-center cursor-pointer\"\n                          >\n                            <img\n                              src=\"/images/uploading.png\"\n                              alt=\"\"\n                              className=\"w-full mx-auto block mb-2\"\n                              style={{\n                                maxWidth: \"103px\",\n                              }}\n                            />\n                            Upload from my computer (.rust)\n                          </label>\n                        </div>\n                        <div className=\"flex-grow flex-shrink w-1/2 input-group mb-3\">\n                          <input\n                            type=\"radio\"\n                            name=\"codeType\"\n                            id=\"input-codeType-editor\"\n                            value=\"editor\"\n                            checked={codeType === \"editor\"}\n                            onChange={(e) => setCodeType(e.target.value)}\n                          />\n                          <label\n                            htmlFor=\"input-codeType-editor\"\n                            className=\"hover:bg-indigo-50  w-full label-btn button p-4 border-2 border-gray-300 block rounded-xl text-center cursor-pointer\"\n                          >\n                            <img\n                              src=\"/images/code.png\"\n                              alt=\"\"\n                              className=\"w-full mx-auto block mb-2\"\n                              style={{\n                                maxWidth: \"103px\",\n                              }}\n                            />\n                            Using Code Editor\n                          </label>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"form-buttons flex justify-between\">\n                      <button\n                        onClick={prevStep}\n                        className=\"button block  text-md text-black hover:text-white bg-white hover:bg-black border-2 border-black focus:outline-none focus:ring-black focus:ring-opacity-50  py-2 px-10 rounded-xl focus:outline-none\"\n                      >\n                        Previous\n                      </button>\n                      <button\n                        onClick={nextStep}\n                        className=\"button block text-md text-white bg-black hover:bg-black border-2 border-black focus:outline-none focus:ring-black focus:ring-opacity-50  py-2 px-10 rounded-xl focus:outline-none\"\n                      >\n                        Next\n                      </button>\n                    </div>\n                  </div>\n                ) : step === 3 ? (\n                  <div className=\"form-container mb-5 step step-2\">\n                    <div className=\"form-wrapper mb-6\">\n                      <h3 className=\"mb-4\">\n                        <strong>Step 2.1:</strong> Add the oracle script code (.rust)\n                      </h3>\n                      {renderSwitchCode()}\n                    </div>\n                    <div className=\"form-buttons flex justify-between\">\n                      <button\n                        onClick={prevStep}\n                        className=\"button block  text-md text-black hover:text-white bg-white hover:bg-black border-2 border-black focus:outline-none focus:ring-black focus:ring-opacity-50  py-2 px-10 rounded-xl focus:outline-none\"\n                      >\n                        Previous\n                      </button>\n                      <button\n                        disabled={code.byteLength > 0 ? false : codeEditor === \"\"}\n                        onClick={(e) => compileCode()}\n                        className=\"disabled:opacity-50 button block text-md text-white bg-black hover:bg-black border-2 border-black focus:outline-none focus:ring-black focus:ring-opacity-50  py-2 px-10 rounded-xl focus:outline-none\"\n                      >\n                        Next\n                      </button>\n                    </div>\n                  </div>\n                ) : step === 4 ? (\n                  <div className=\"form-container mb-5 step step-2\">\n                    <div className=\"form-wrapper mb-6\">\n                      <h3 className=\"mb-4\">\n                        <strong>Step 3:</strong> Review\n                      </h3>\n                    </div>\n                    <div className=\"form-buttons flex justify-between\">\n                      <button\n                        onClick={prevStep}\n                        className=\"button block  text-md text-black hover:text-white bg-white hover:bg-black border-2 border-black focus:outline-none focus:ring-black focus:ring-opacity-50  py-2 px-10 rounded-xl focus:outline-none\"\n                      >\n                        Previous\n                      </button>\n                      <button\n                        onClick={(e) => submitCode()}\n                        className=\"button block text-md text-white bg-black hover:bg-black border-2 border-black focus:outline-none focus:ring-black focus:ring-opacity-50  py-2 px-10 rounded-xl focus:outline-none\"\n                      >\n                        Confirm and Deploy\n                      </button>\n                    </div>\n                  </div>\n                ) : (\n                  \"\"\n                )}\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","/Users/pangp/Band/demo-bandchainjs/src/routes/AccountPage.js",["230"],"import AccountSidebar from \"../components/AccountSidebar\";\nimport { useState } from \"react\";\nimport { Routes, Route } from \"react-router-dom\";\nimport Validators from \"./Validators\";\nimport Delegations from \"./Delegations\";\nimport DelegatorDetails from \"./DelegatorDetails\";\nimport Converter from \"./Converter\";\n\nexport default function AccountPage() {\n  return (\n    <div className=\"container mx-auto max-w-full\">\n      <div className=\"md:flex gap-6\">\n        <AccountSidebar />\n        <div className=\"card bg-white md:p-10 p-5 rounded-2xl mt-5 lg:w-3/4 w-full\">\n          <Routes>\n            <Route path=\"validators\" element={<Validators />} />\n            <Route path=\"delegations\" element={<Delegations />}>\n              <Route path=\":operator\" element={<DelegatorDetails />} />\n            </Route>\n            <Route path=\"converter\" element={<Converter />} />\n          </Routes>\n        </div>\n      </div>\n    </div>\n  );\n}\n","/Users/pangp/Band/demo-bandchainjs/src/components/AccountSidebar.js",[],"/Users/pangp/Band/demo-bandchainjs/src/components/AccountWithBalanceCenter.js",[],"/Users/pangp/Band/demo-bandchainjs/src/components/SidebarAccountMenu.js",[],"/Users/pangp/Band/demo-bandchainjs/src/routes/Validators.js",["231"],"import { gql, useLazyQuery, useQuery } from \"@apollo/client\";\nimport { SingleValidator } from \"../components/SingleValidator\";\n\nexport default function Validators() {\n  const GET_VALIDATORS = gql`\n    query GetValidators {\n      validators {\n        moniker\n        operator_address\n        tokens\n        commission_rate\n        commission_max_change\n        commission_max_rate\n      }\n      validators_aggregate {\n        aggregate {\n          sum {\n            tokens\n          }\n        }\n      }\n    }\n  `;\n  const { loading, error, data } = useQuery(GET_VALIDATORS);\n\n  return (\n    <div className=\"flex flex-wrap -mx-2\">\n      {loading\n        ? \"Loading...\"\n        : error\n        ? `Error! ${error.message}`\n        : data\n        ? data.validators.map((validator, ind) => {\n            return (\n              <SingleValidator\n                validator={validator}\n                key={ind}\n                totalBonded={\n                  data.validators_aggregate ? data.validators_aggregate.aggregate.sum.tokens : 0\n                }\n              />\n            );\n          })\n        : \"0 Validator\"}\n    </div>\n  );\n}\n","/Users/pangp/Band/demo-bandchainjs/src/components/SingleValidator.js",[],"/Users/pangp/Band/demo-bandchainjs/src/routes/Delegations.js",["232","233"],"import { useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Routes, Route } from \"react-router-dom\";\nimport { gql, useLazyQuery, useSubscription } from \"@apollo/client\";\nimport { SingleDelegator } from \"../components/SingleDelegator\";\nimport DelegatorDetails from \"./DelegatorDetails\";\n\nexport default function Delegations() {\n  const wallet = useSelector((state) => state.wallet);\n  useEffect(() => {\n    // getDelegators({ variables: { address: wallet.address } });\n  }, []);\n\n  const GET_DELEGATIONS = gql`\n    subscription GetAccountDelegations($address: String!) {\n      delegations_view(\n        where: { delegator_address: { _eq: $address } }\n        order_by: { moniker: asc }\n      ) {\n        amount\n        moniker\n        reward\n        operator_address\n        delegator_address\n      }\n    }\n  `;\n\n  //   const { loading, error, data } = useQuery(GET_DELEGATIONS);\n  // const [getDelegators, { loading, error, data }] = useLazyQuery(GET_DELEGATIONS);\n  const { loading, error, data } = useSubscription(GET_DELEGATIONS, {\n    variables: { address: wallet.address },\n  });\n\n  return (\n    <div>\n      <Routes>\n        <Route\n          path=\"/\"\n          element={\n            <div>\n              <h2 className=\"text-2xl mb-5\">\n                <strong>Delegations</strong>\n              </h2>\n              <div className=\"flex flex-wrap -mx-2\">\n                {loading\n                  ? \"Loading...\"\n                  : error\n                  ? `Error! ${error.message}`\n                  : data\n                  ? data.delegations_view.map((delegator, ind) => {\n                      return <SingleDelegator delegator={delegator} key={ind} />;\n                    })\n                  : \"0 Validator\"}\n              </div>\n            </div>\n          }\n        />\n        <Route path=\":operator\" element={<DelegatorDetails />} />\n      </Routes>\n    </div>\n  );\n}\n","/Users/pangp/Band/demo-bandchainjs/src/components/SingleDelegator.js",[],"/Users/pangp/Band/demo-bandchainjs/src/routes/DelegatorDetails.js",["234","235"],"import { useParams } from \"react-router-dom\";\nimport { useEffect, useState, useMemo } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { gql, useLazyQuery, useSubscription } from \"@apollo/client\";\nimport { getPairPrice, withdrawReward } from \"../band\";\nimport ModalDelegate from \"../components/ModalDelegate\";\nimport { ModalDelegateContext } from \"../app-context\";\nimport ModalRedelegate from \"../components/ModalRedelegate\";\nimport ModalReinvest from \"../components/ModalReinvest\";\n\nexport default function DelegatorDetails() {\n  const [isShowModal, setIsShowModal] = useState(false);\n  const [isShowModalRedelegate, setIsShowModalRedelegate] = useState(false);\n  const [isShowModalReinvest, setIsShowModalReInvest] = useState(false);\n  const [delegateType, setDelegateType] = useState(\"\");\n  const [reinvestReward, setreinvestReward] = useState(0);\n  // const [isShowModalDelegate, setIsShowModalDelegate] = useState(false);\n  // const [isShowModalUndelegate, setIsShowModalUndelegate] = useState(false);\n\n  const isModalDelegateActive = useMemo(() => ({ isShowModal, setIsShowModal }), [isShowModal]);\n  const isModalRedelegateActive = useMemo(\n    () => ({ isShowModalRedelegate, setIsShowModalRedelegate }),\n    [isShowModalRedelegate]\n  );\n  const isModalReinvestActive = useMemo(\n    () => ({ isShowModalReinvest, setIsShowModalReInvest }),\n    [isShowModalReinvest]\n  );\n\n  // const isModalDelegateActive = useMemo(\n  //   () => ({ isShowModalDelegate, setIsShowModalDelegate }),\n  //   [isShowModalDelegate]\n  // );\n  // const isModalUndelegateActive = useMemo(\n  //   () => ({ isShowModalUndelegate, setIsShowModalUndelegate }),\n  //   [isShowModalUndelegate]\n  // );\n\n  const wallet = useSelector((state) => state.wallet);\n  let { operator } = useParams();\n\n  // states\n  const [usdPrice, setUsdPrice] = useState([]);\n\n  async function getPrice() {\n    const response = await getPairPrice([\"BAND/USD\"], 10, 16);\n    setUsdPrice(response[0].rate);\n  }\n\n  const GET_DELEGATIONS = gql`\n    subscription GetAccountDelegations($address: String!) {\n      delegations_view(\n        where: { delegator_address: { _eq: $address } }\n        order_by: { moniker: asc }\n      ) {\n        amount\n        moniker\n        reward\n        operator_address\n        delegator_address\n      }\n    }\n  `;\n\n  const GET_VALIDATOR_DETAILS = gql`\n    query GetValidatorDetails($address: String!, $operator: String!) {\n      delegations_view(\n        where: { delegator_address: { _eq: $address }, operator_address: { _eq: $operator } }\n      ) {\n        amount\n        delegator_address\n        moniker\n        operator_address\n        reward\n      }\n      validators(where: { operator_address: { _eq: $operator } }) {\n        tokens\n        commission_rate\n        validator_report_count {\n          count\n        }\n      }\n      validators_aggregate {\n        aggregate {\n          sum {\n            tokens\n          }\n        }\n      }\n    }\n  `;\n\n  // const { loading, error, data } = useQuery(GET_DELEGATIONS);\n  // const [GetValidator, { loading, error, data }] = useSubscription(GET_VALIDATOR_DETAILS);\n  //\n  const [GetValidator, { loading, error, data }] = useLazyQuery(GET_VALIDATOR_DETAILS);\n\n  // const [getDelegationSub, { loading, error, data }] = useSubscription(GET_DELEGATIONS, {\n  //   variables: { address: wallet.address },\n  // });\n\n  // const { amount, moniker, delegator_address, operator_address, reward, share_percentage } = data.delegations_view\n\n  const openModalDelegate = (modalType) => {\n    // if (delegateType === \"delegate\") setIsShowModalDelegate(true);\n    // if (delegateType === \"undelegate\") setIsShowModalUndelegate(true);\n    setIsShowModal(true);\n    setDelegateType(modalType);\n  };\n\n  const openModalRedelegate = () => {\n    // if (delegateType === \"delegate\") setIsShowModalDelegate(true);\n    // if (delegateType === \"undelegate\") setIsShowModalUndelegate(true);\n    setIsShowModalRedelegate(true);\n  };\n\n  const openModalReInvest = (reward) => {\n    setreinvestReward(reward);\n    // if (delegateType === \"delegate\") setIsShowModalDelegate(true);\n    // if (delegateType === \"undelegate\") setIsShowModalUndelegate(true);\n    setIsShowModalReInvest(true);\n  };\n\n  const claim = async () => {\n    const response = await withdrawReward(\n      wallet.address,\n      operator,\n      wallet.address,\n      wallet.pubkey,\n      wallet.privateKey\n    );\n    console.log(response);\n  };\n\n  useEffect(() => {\n    getPrice();\n  }, []);\n\n  useEffect(() => {\n    GetValidator({ variables: { address: wallet.address, operator: operator } });\n  }, [wallet, operator, GetValidator]);\n\n  return (\n    <div>\n      <div className=\"flex flex-wrap -mx-2\">\n        {loading ? (\n          \"Loading...\"\n        ) : error ? (\n          `Error! ${error.message}`\n        ) : data ? (\n          <>\n            <h1 className=\"text-2xl mb-3\">\n              <strong>{data.delegations_view[0].moniker}</strong>\n            </h1>\n            <div className=\"flex w-full gap-3 flex-wrap mt-3\">\n              <div className=\"border-2 border-black rounded-xl p-5 flex-1 flex-grow bg-rose-400\">\n                <h3 className=\"mb-2 text-sm font-medium\">Voting Power</h3>\n                <h3 className=\"text-2xl text-right font-bold\">\n                  {(\n                    (data.validators[0].tokens / data.validators_aggregate.aggregate.sum.tokens) *\n                    100\n                  ).toFixed(2)}\n                  %\n                </h3>\n              </div>\n              <div className=\"border-2 border-black rounded-xl p-5 flex-1 flex-grow bg-indigo-400\">\n                <h3 className=\"mb-2 text-sm font-medium\">Commission</h3>\n                <h3 className=\"text-2xl text-right font-bold\">\n                  {(data.validators[0].commission_rate * 100).toFixed(2)}%\n                </h3>\n              </div>\n              <div className=\"border-2 border-black rounded-xl p-5 flex-1 flex-grow bg-warmGray-400\">\n                <h3 className=\"mb-2 text-sm font-medium\">Oracle Reports</h3>\n                <h3 className=\"text-2xl text-right font-bold\">\n                  {data.validators[0].validator_report_count.count}\n                </h3>\n              </div>\n            </div>\n            <div className=\"mt-8 block w-full\">\n              <h2 className=\"text-xl mb-3\">\n                <strong>Your Delegation</strong>\n              </h2>\n              <div className=\"flex w-full gap-3 flex-wrap mt-3\">\n                <div className=\"border-2 border-black p-5 w-full block rounded-xl flex-1 flex-grow bg-yellow-300\">\n                  <h3 className=\"mb-4 text-xl font-bold\">Assets</h3>\n                  <h3 className=\"mb-2 text-sm font-medium\">BAND Staked</h3>\n                  <h4 className=\"text-2xl font-bold text-right\">\n                    {(data.delegations_view[0].amount / 1e6).toFixed(4)}\n                  </h4>\n                  <h4 className=\"mb-2 text-sm font-medium text-right text-orange\">\n                    ~{((data.delegations_view[0].amount / 1e6) * usdPrice).toFixed(4)} USD\n                  </h4>\n                  <div className=\"action-group flex gap-3 mt-4\">\n                    <button\n                      onClick={() => openModalDelegate(\"delegate\")}\n                      className=\"flex-1 flex-grow button block ml-auto text-sm text-black hover:text-white bg-white hover:bg-black border-2 border-black focus:outline-none focus:ring-black focus:ring-opacity-50  py-2 px-10 rounded-xl focus:outline-none disabled:opacity-50 shadow-insetBlack hover:shadow-none\"\n                    >\n                      Delegate\n                    </button>\n                    <button\n                      onClick={() => openModalDelegate(\"undelegate\")}\n                      className=\"flex-1 flex-grow button block ml-auto text-sm text-black hover:text-white bg-white hover:bg-black border-2 border-black focus:outline-none focus:ring-black focus:ring-opacity-50  py-2 px-10 rounded-xl focus:outline-none disabled:opacity-50 shadow-insetBlack hover:shadow-none\"\n                    >\n                      Undelegate\n                    </button>\n                    <button\n                      onClick={openModalRedelegate}\n                      className=\"flex-1 flex-grow button block ml-auto text-sm text-black hover:text-white bg-white hover:bg-black border-2 border-black focus:outline-none focus:ring-black focus:ring-opacity-50  py-2 px-10 rounded-xl focus:outline-none disabled:opacity-50 shadow-insetBlack hover:shadow-none\"\n                    >\n                      Redelegate\n                    </button>\n                  </div>\n                </div>\n                <div className=\"border-2 border-black p-5 w-full block rounded-xl flex-1 flex-grow bg-teal-400\">\n                  <h3 className=\"mb-3 text-xl font-bold\">Rewards</h3>\n                  <h3 className=\"mb-2 text-sm font-medium\">Unclaim Rewards (BAND)</h3>\n                  <h4 className=\"text-2xl font-bold text-right\">\n                    {(data.delegations_view[0].reward / 1e6).toFixed(4)}\n                  </h4>\n                  <h4 className=\"mb-2 text-sm font-medium text-right text-orange\">\n                    ~{((data.delegations_view[0].reward / 1e6) * usdPrice).toFixed(4)} USD\n                  </h4>\n                  <div className=\"action-group flex gap-3 mt-4\">\n                    <button\n                      onClick={() => openModalReInvest(data.delegations_view[0].reward / 1e6)}\n                      className=\"flex-1 flex-grow button block ml-auto text-sm text-black hover:text-white bg-white hover:bg-black border-2 border-black focus:outline-none focus:ring-black focus:ring-opacity-50  py-2 px-10 rounded-xl focus:outline-none disabled:opacity-50 shadow-insetBlack hover:shadow-none\"\n                    >\n                      Reinvest\n                    </button>\n                    <button\n                      onClick={claim}\n                      className=\"flex-1 flex-grow button block ml-auto text-sm text-black hover:text-white bg-white hover:bg-black border-2 border-black focus:outline-none focus:ring-black focus:ring-opacity-50  py-2 px-10 rounded-xl focus:outline-none disabled:opacity-50 shadow-insetBlack hover:shadow-none\"\n                    >\n                      Claim\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </>\n        ) : (\n          \"0 Validator\"\n        )}\n      </div>\n      <ModalDelegateContext.Provider value={isModalDelegateActive}>\n        <ModalDelegate operator={operator} title={delegateType} />\n      </ModalDelegateContext.Provider>\n      <ModalDelegateContext.Provider value={isModalRedelegateActive}>\n        <ModalRedelegate operator={operator} title={delegateType} />\n      </ModalDelegateContext.Provider>\n      <ModalDelegateContext.Provider value={isModalReinvestActive}>\n        <ModalReinvest operator={operator} rewardAmount={reinvestReward} />\n      </ModalDelegateContext.Provider>\n    </div>\n  );\n}\n","/Users/pangp/Band/demo-bandchainjs/src/routes/EditOracleScript.js",[],"/Users/pangp/Band/demo-bandchainjs/src/components/FormEditOracleScript.js",["236"],"import { useEffect, useState, useCallback } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport { getRawPreviewEditOs, createMsgEditOS } from \"../band\";\nimport { useSelector } from \"react-redux\";\nimport UnableService from \"./UnableService\";\nimport AccountWithBalance from \"./AccountWithBalance\";\nimport Editor from \"react-simple-code-editor\";\nimport { highlight, languages } from \"prismjs/components/prism-core\";\nimport \"prismjs/components/prism-clike\";\nimport \"prismjs/components/prism-rust\";\n// import \"prismjs/themes/prism.css\";\nimport \"prismjs/themes/prism-tomorrow.css\";\nimport axios from \"axios\";\n\nexport default function FormEditOracleScript() {\n  const wallet = useSelector((state) => state.wallet);\n\n  // State\n  const [isConnected, setisConnected] = useState(false);\n  const [step, setStep] = useState(1);\n  const [codeType, setCodeType] = useState(\"upload\");\n\n  // Form Data\n  const [osid, setosid] = useState(\"\");\n  const [osname, setosname] = useState(\"\");\n  const [osdesc, setosdesc] = useState(\"\");\n  const [schema, setschema] = useState(\"\");\n  const [sourcecodeUrl, setsourcecodeUrl] = useState(\"\");\n  const [owner, setOwner] = useState(\"\");\n  const [code, setCode] = useState([]);\n  const [filename, setfilename] = useState(\"\");\n  const [codeEditor, setCodeEditor] = useState(`# Insert your code here`);\n  const [wasmCode, setwasmCode] = useState(\"\");\n\n  // Handling Functions\n  const nextStep = (e) => {\n    e.preventDefault();\n    setStep(step + 1);\n  };\n\n  const prevStep = () => {\n    setStep(step - 1);\n  };\n\n  const isFormFilled = () => {\n    if (osname !== \"\" && owner !== \"\") {\n      return false;\n    }\n    return true;\n  };\n\n  const removeFile = () => {\n    setCode([]);\n    setfilename(\"\");\n  };\n\n  const onDrop = useCallback((acceptedFiles) => {\n    setfilename(acceptedFiles[0].name);\n    acceptedFiles.forEach((file) => {\n      const reader = new FileReader();\n\n      reader.onabort = () => console.log(\"file reading was aborted\");\n      reader.onerror = () => console.log(\"file reading has failed\");\n      reader.onload = () => {\n        // Do whatever you want with the file contents\n        const binaryStr = reader.result;\n        console.log(binaryStr);\n        setCode(binaryStr);\n      };\n      reader.readAsArrayBuffer(file);\n    });\n  }, []);\n\n  const { getRootProps, getInputProps } = useDropzone({\n    onDrop,\n    accept: \"text/x-python-script\",\n  });\n\n  const renderSwitchCode = () => {\n    switch (codeType) {\n      case \"editor\":\n        return (\n          <Editor\n            value={codeEditor}\n            onValueChange={(rawcode) => setCodeEditor(rawcode)}\n            highlight={(rawcode) => highlight(rawcode, languages.rust)}\n            padding={15}\n            style={{\n              fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\n              fontSize: 12,\n              background: \"#282A2B\",\n              color: \"white\",\n              borderRadius: \"10px\",\n              minHeight: \"300px\",\n            }}\n          />\n        );\n      default:\n        return (\n          <div className=\"input-group mb-3\">\n            {code.byteLength > 0 ? (\n              <div\n                onClick={removeFile}\n                className=\"group cursor-pointer border-l-2 border-t-2 border-r-4 border-b-4 hover:border-r-2 hover:border-b-2  hover:border-orange hover:bg-red-100 border-black bg-yellow-50 p-3 text-black rounded-xl relative w-full hover:transform hover:translate-x-px hover:translate-y-px\"\n              >\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center\">\n                    <img\n                      src=\"/images/python-file.png\"\n                      alt=\"\"\n                      className=\"w-100 block h-auto mr-4\"\n                      style={{ maxWidth: \"50px\" }}\n                    />\n                    <p className=\"font-medium\">{filename}</p>\n                  </div>\n                  <div className=\"invisible group-hover:visible btn-deletefile w-8 h-8 bg-orange rounded-full text-white flex items-center justify-center\">\n                    <svg\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      className=\"h-5 w-5\"\n                      viewBox=\"0 0 20 20\"\n                      fill=\"currentColor\"\n                    >\n                      <path\n                        fillRule=\"evenodd\"\n                        d=\"M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z\"\n                        clipRule=\"evenodd\"\n                      />\n                    </svg>\n                  </div>\n                </div>\n              </div>\n            ) : (\n              <div className=\"upload-outer\" {...getRootProps()}>\n                <input {...getInputProps()} />\n                <div className=\"h-40 border-2 bg-gray-50 border-gray-300 rounded-xl text-center flex items-center justify-center\">\n                  <div>\n                    Drag 'n' drop a file here,\n                    <br /> or <br />\n                    <span className=\"mt-2 cursor-pointer inline-block button px-4 py-1 border-2 border-black rounded-xl bg-yellow-300 hover:bg-yellow-400 text-sm\">\n                      Browse\n                    </span>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n        );\n    }\n  };\n\n  const compileCode = async () => {\n    setStep(step + 1);\n    if (codeType !== \"upload\") {\n      await axios\n        .post(`https://play.rust-lang.org/compile`, {\n          assemblyFlavor: \"att\",\n          backtrace: false,\n          channel: \"nightly\",\n          code: codeEditor,\n          crateType: \"bin\",\n          demangleAssembly: \"demangle\",\n          edition: \"2021\",\n          mode: \"debug\",\n          processAssembly: \"filter\",\n          target: \"wasm\",\n          tests: false,\n        })\n        .then((res) => {\n          setwasmCode(res.data.code);\n        });\n    }\n    getPreviewTx();\n  };\n\n  const getPreviewTx = async () => {\n    const response = await getRawPreviewEditOs(\n      osid,\n      osname,\n      osdesc,\n      schema,\n      sourcecodeUrl,\n      codeType === \"upload\" ? code : window.btoa(wasmCode),\n      owner,\n      wallet.address, // sender\n      wallet.privateKey,\n      wallet.pubkey\n    );\n    console.log(response);\n    // Todo: receive the response and display as a preview\n  };\n\n  const submitCode = async () => {\n    const response = await createMsgEditOS(\n      osid,\n      osname,\n      osdesc,\n      schema,\n      sourcecodeUrl,\n      codeType === \"upload\" ? code : window.btoa(wasmCode),\n      owner,\n      wallet.address, // sender\n      wallet.privateKey,\n      wallet.pubkey\n    );\n    console.log(response);\n    // Todo: Show loading state and the result of the tx and show the next step\n  };\n\n  // Effects\n  useEffect(() => {\n    if (wallet.address) {\n      setisConnected(true);\n    } else {\n      setisConnected(false);\n    }\n  }, [wallet]);\n\n  return (\n    <div className=\"flex flex-row flex-wrap\">\n      <div className=\"w-full md:w-4/12 mb-8 md:mb-0\">\n        <h2 className=\"mb-5 text-3xl \">\n          <strong>Edit an Oracle Script</strong>\n        </h2>\n        <p className=\"mb-5\">\n          <a\n            href=\"https://docs.bandchain.org/client-library/bandchain.js/get-started.html#send-band-token\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            <strong>MsgCreateOracleScript</strong>\n          </a>{\" \"}\n          is a message for creating a new Oracle Script.\n        </p>\n        <div className=\"process-step\">\n          <ul>\n            <li className=\"mb-5\">\n              <strong>Step 1:</strong> Provide the oracle script information such as name, schema,\n              owner address, and description.\n            </li>\n            <li className=\"mb-5\">\n              <strong>Step 2:</strong> Upload the .rust file or try using code editor\n            </li>\n            <li className=\"mb-5\">\n              <strong>Step 3:</strong> Review and deploy your oracle script and Finish.\n            </li>\n          </ul>\n        </div>\n      </div>\n      <div className=\"w-full md:w-8/12 md:pl-10\">\n        {!isConnected ? (\n          <UnableService />\n        ) : (\n          <div>\n            <div className=\"card bg-white border-2 border-black rounded rounded-2xl w-full mb-10\">\n              <div className=\"card-inner p-6\">\n                {step === 1 ? (\n                  <div className=\"form-container mb-5 step step-1\">\n                    <div className=\"form-wrapper mb-6\">\n                      <h3 className=\"mb-4\">\n                        <strong>Step 1:</strong> Enter the oracle script information below.\n                      </h3>\n                      <div className=\"input-group mb-3\">\n                        <label\n                          htmlFor=\"input-address\"\n                          className=\"block text-sm font-medium text-gray-700 mb-1\"\n                        >\n                          Oracle Script ID <span className=\"text-orange\">*</span>\n                        </label>\n                        <input\n                          className=\"focus:outline-none focus:ring-2 focus:ring-gray-200 block w-full p-2 sm:text-sm border-solid border-2 border-gray-200 rounded-xl\"\n                          type=\"text\"\n                          id=\"input-address\"\n                          onChange={(e) => setosid(e.target.value)}\n                          value={osid}\n                        />\n                      </div>\n                      <div className=\"input-group mb-3\">\n                        <label\n                          htmlFor=\"input-address\"\n                          className=\"block text-sm font-medium text-gray-700 mb-1\"\n                        >\n                          Oracle Script Name <span className=\"text-orange\">*</span>\n                        </label>\n                        <input\n                          className=\"focus:outline-none focus:ring-2 focus:ring-gray-200 block w-full p-2 sm:text-sm border-solid border-2 border-gray-200 rounded-xl\"\n                          type=\"text\"\n                          id=\"input-address\"\n                          onChange={(e) => setosname(e.target.value)}\n                          value={osname}\n                        />\n                      </div>\n                      <div className=\"input-group mb-3\">\n                        <label\n                          htmlFor=\"input-owner\"\n                          className=\"block text-sm font-medium text-gray-700 mb-1\"\n                        >\n                          Owner Address <span className=\"text-orange\">*</span>\n                        </label>\n                        <input\n                          className=\"focus:outline-none focus:ring-2 focus:ring-gray-200 block w-full p-2 sm:text-sm border-solid border-2 border-gray-200 rounded-xl\"\n                          type=\"text\"\n                          id=\"input-owner\"\n                          value={owner}\n                          onChange={(e) => setOwner(e.target.value)}\n                        />\n                      </div>\n                      <div className=\"input-group mb-3\">\n                        <label\n                          htmlFor=\"input-treasury\"\n                          className=\"block text-sm font-medium text-gray-700 mb-1\"\n                        >\n                          Schema\n                        </label>\n                        <input\n                          className=\"focus:outline-none focus:ring-2 focus:ring-gray-200 block w-full p-2 sm:text-sm border-solid border-2 border-gray-200 rounded-xl\"\n                          type=\"text\"\n                          id=\"input-treasury\"\n                          value={schema}\n                          onChange={(e) => setschema(e.target.value)}\n                        />\n                      </div>\n                      <div className=\"input-group mb-3\">\n                        <label\n                          htmlFor=\"input-treasury\"\n                          className=\"block text-sm font-medium text-gray-700 mb-1\"\n                        >\n                          Source Code URL\n                        </label>\n                        <input\n                          className=\"focus:outline-none focus:ring-2 focus:ring-gray-200 block w-full p-2 sm:text-sm border-solid border-2 border-gray-200 rounded-xl\"\n                          type=\"text\"\n                          id=\"input-treasury\"\n                          value={sourcecodeUrl}\n                          onChange={(e) => setsourcecodeUrl(e.target.value)}\n                        />\n                      </div>\n                      <div className=\"input-group mb-3\">\n                        <label\n                          htmlFor=\"input-desc\"\n                          className=\"block text-sm font-medium text-gray-700 mb-1\"\n                        >\n                          Description\n                        </label>\n                        <textarea\n                          className=\"focus:outline-none focus:ring-2 focus:ring-gray-200 block w-full p-2 sm:text-sm border-solid border-2 border-gray-200 rounded-xl\"\n                          type=\"text\"\n                          id=\"input-desc\"\n                          onChange={(e) => setosdesc(e.target.value)}\n                          value={osdesc}\n                        />\n                      </div>\n                    </div>\n                    <div className=\"form-buttons\">\n                      <button\n                        onClick={nextStep}\n                        disabled={isFormFilled()}\n                        className=\"button block ml-auto text-md text-white bg-black hover:bg-black border-2 border-black focus:outline-none focus:ring-black focus:ring-opacity-50  py-2 px-10 rounded-xl focus:outline-none disabled:opacity-50 \"\n                      >\n                        Next\n                      </button>\n                    </div>\n                  </div>\n                ) : step === 2 ? (\n                  <div className=\"form-container mb-5 step step-2\">\n                    <div className=\"form-wrapper mb-6\">\n                      <h3 className=\"mb-4\">\n                        <strong>Step 2:</strong> Choose how to add the oracle script code\n                      </h3>\n\n                      <div className=\"flex gap-6 radio-group choice-code\">\n                        <div className=\"flex-grow flex-shrink w-1/2 input-group mb-3\">\n                          <input\n                            type=\"radio\"\n                            name=\"codeType\"\n                            id=\"input-codeType-upload\"\n                            value=\"upload\"\n                            checked={codeType === \"upload\"}\n                            onChange={(e) => setCodeType(e.target.value)}\n                          />\n                          <label\n                            htmlFor=\"input-codeType-upload\"\n                            className=\"hover:bg-indigo-50 w-full label-btn button p-4 border-2 border-gray-300 block rounded-xl text-center cursor-pointer\"\n                          >\n                            <img\n                              src=\"/images/uploading.png\"\n                              alt=\"\"\n                              className=\"w-full mx-auto block mb-2\"\n                              style={{\n                                maxWidth: \"103px\",\n                              }}\n                            />\n                            Upload from my computer (.rust)\n                          </label>\n                        </div>\n                        <div className=\"flex-grow flex-shrink w-1/2 input-group mb-3\">\n                          <input\n                            type=\"radio\"\n                            name=\"codeType\"\n                            id=\"input-codeType-editor\"\n                            value=\"editor\"\n                            checked={codeType === \"editor\"}\n                            onChange={(e) => setCodeType(e.target.value)}\n                          />\n                          <label\n                            htmlFor=\"input-codeType-editor\"\n                            className=\"hover:bg-indigo-50  w-full label-btn button p-4 border-2 border-gray-300 block rounded-xl text-center cursor-pointer\"\n                          >\n                            <img\n                              src=\"/images/code.png\"\n                              alt=\"\"\n                              className=\"w-full mx-auto block mb-2\"\n                              style={{\n                                maxWidth: \"103px\",\n                              }}\n                            />\n                            Using Code Editor\n                          </label>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"form-buttons flex justify-between\">\n                      <button\n                        onClick={prevStep}\n                        className=\"button block  text-md text-black hover:text-white bg-white hover:bg-black border-2 border-black focus:outline-none focus:ring-black focus:ring-opacity-50  py-2 px-10 rounded-xl focus:outline-none\"\n                      >\n                        Previous\n                      </button>\n                      <button\n                        onClick={nextStep}\n                        className=\"button block text-md text-white bg-black hover:bg-black border-2 border-black focus:outline-none focus:ring-black focus:ring-opacity-50  py-2 px-10 rounded-xl focus:outline-none\"\n                      >\n                        Next\n                      </button>\n                    </div>\n                  </div>\n                ) : step === 3 ? (\n                  <div className=\"form-container mb-5 step step-2\">\n                    <div className=\"form-wrapper mb-6\">\n                      <h3 className=\"mb-4\">\n                        <strong>Step 2.1:</strong> Add the oracle script code (.rust)\n                      </h3>\n                      {renderSwitchCode()}\n                    </div>\n                    <div className=\"form-buttons flex justify-between\">\n                      <button\n                        onClick={prevStep}\n                        className=\"button block  text-md text-black hover:text-white bg-white hover:bg-black border-2 border-black focus:outline-none focus:ring-black focus:ring-opacity-50  py-2 px-10 rounded-xl focus:outline-none\"\n                      >\n                        Previous\n                      </button>\n                      <button\n                        disabled={code.byteLength > 0 ? false : codeEditor === \"\"}\n                        onClick={(e) => compileCode()}\n                        className=\"disabled:opacity-50 button block text-md text-white bg-black hover:bg-black border-2 border-black focus:outline-none focus:ring-black focus:ring-opacity-50  py-2 px-10 rounded-xl focus:outline-none\"\n                      >\n                        Next\n                      </button>\n                    </div>\n                  </div>\n                ) : step === 4 ? (\n                  <div className=\"form-container mb-5 step step-2\">\n                    <div className=\"form-wrapper mb-6\">\n                      <h3 className=\"mb-4\">\n                        <strong>Step 3:</strong> Review\n                      </h3>\n                    </div>\n                    <div className=\"form-buttons flex justify-between\">\n                      <button\n                        onClick={prevStep}\n                        className=\"button block  text-md text-black hover:text-white bg-white hover:bg-black border-2 border-black focus:outline-none focus:ring-black focus:ring-opacity-50  py-2 px-10 rounded-xl focus:outline-none\"\n                      >\n                        Previous\n                      </button>\n                      <button\n                        onClick={(e) => submitCode()}\n                        className=\"button block text-md text-white bg-black hover:bg-black border-2 border-black focus:outline-none focus:ring-black focus:ring-opacity-50  py-2 px-10 rounded-xl focus:outline-none\"\n                      >\n                        Confirm and Deploy\n                      </button>\n                    </div>\n                  </div>\n                ) : (\n                  \"\"\n                )}\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","/Users/pangp/Band/demo-bandchainjs/src/routes/CreateOracleScript.js",[],"/Users/pangp/Band/demo-bandchainjs/src/components/ModalDelegate.js",[],"/Users/pangp/Band/demo-bandchainjs/src/components/ModalRedelegate.js",["237","238"],"import { useState, useContext } from \"react\";\nimport { reDelegateCoin } from \"../band\";\nimport { useSelector } from \"react-redux\";\nimport { ModalDelegateContext } from \"../app-context\";\nimport { gql, useQuery } from \"@apollo/client\";\n\nexport default function ModalRedelegate({ title, operator }) {\n  const { isShowModalRedelegate, setIsShowModalRedelegate } = useContext(ModalDelegateContext);\n  const wallet = useSelector((state) => state.wallet);\n  const [modalloading, setmodalloading] = useState(false);\n  const [txhash, settxhash] = useState(\"\");\n  const [amount, setAmount] = useState(0);\n  const [destvalidator, setdestvalidator] = useState(\"\");\n\n  const closeModalHandler = () => {\n    setmodalloading(false);\n    setIsShowModalRedelegate(false);\n  };\n\n  const confirm = async () => {\n    setmodalloading(true);\n    console.log(operator);\n    console.log(destvalidator);\n\n    const response = await reDelegateCoin(\n      operator,\n      destvalidator,\n      amount,\n      wallet.privateKey,\n      wallet.pubkey,\n      wallet.address\n    );\n    if (response) {\n      settxhash(response.txhash);\n    }\n  };\n\n  const GET_VALIDATORS = gql`\n    query GetValidators {\n      validators {\n        moniker\n        operator_address\n      }\n    }\n  `;\n\n  const { loading, error, data } = useQuery(GET_VALIDATORS);\n\n  return (\n    <div\n      aria-labelledby=\"modal-title\"\n      role=\"dialog\"\n      aria-modal=\"true\"\n      className={\n        isShowModalRedelegate\n          ? \"fixed z-10 inset-0 overflow-y-auto block\"\n          : \" fixed z-10 inset-0 overflow-y-auto hidden\"\n      }\n    >\n      <div className=\"flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0\">\n        <div\n          className=\"fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity\"\n          aria-hidden=\"true\"\n        ></div>\n\n        <span className=\"hidden sm:inline-block sm:align-middle sm:h-screen\" aria-hidden=\"true\">\n          &#8203;\n        </span>\n\n        <div className=\"inline-block align-bottom bg-white rounded-3xl text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full\">\n          <div className=\"bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-5\">\n            <div className=\"flex justify-between align-items-center mt-3 mb-5 text-center sm:mt-0 sm:text-left\">\n              <h2 className=\"mb-0 text-xl capitalize\">\n                <strong>Redelegate</strong>\n              </h2>\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                className=\"h-6 w-6 text-orange cursor-pointer hover:text-orange-dark\"\n                onClick={(e) => closeModalHandler(e)}\n                fill=\"none\"\n                viewBox=\"0 0 24 24\"\n                stroke=\"currentColor\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth=\"2\"\n                  d=\"M6 18L18 6M6 6l12 12\"\n                />\n              </svg>\n            </div>\n            {modalloading ? (\n              txhash ? (\n                <div>\n                  <svg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    className=\"h-20 w-20 text-green-400 mx-auto mb-5\"\n                    fill=\"none\"\n                    viewBox=\"0 0 24 24\"\n                    stroke=\"currentColor\"\n                  >\n                    <path\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                      strokeWidth=\"2\"\n                      d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"\n                    />\n                  </svg>\n                  <h4 className=\"text-md text-center\">\n                    <strong>Transaction Hash</strong>\n                  </h4>\n                  <a\n                    className=\"overflow-ellipsis overflow-hidden text-black mb-3 block hover:text-blue\"\n                    href={`https://laozi-testnet4.cosmoscan.io/tx/${txhash}`}\n                    target=\"_blank\"\n                    rel=\"noreferrer\"\n                  >\n                    {txhash}\n                  </a>\n                </div>\n              ) : (\n                <div>\n                  <h2>Sending...</h2>\n                </div>\n              )\n            ) : (\n              <div className=\"modal-body\">\n                <div className=\"form-delegate-wrapper mb-5\">\n                  <div className=\"input-group mb-3\">\n                    <label\n                      htmlFor=\"input-address\"\n                      className=\"block text-sm font-medium text-gray-700 mb-1\"\n                    >\n                      Redelegate From\n                    </label>\n                    <p>{operator}</p>\n                  </div>\n                  <div className=\"input-group mb-3\">\n                    <label\n                      htmlFor=\"input-validator\"\n                      className=\"block text-sm font-medium text-gray-700 mb-1\"\n                    >\n                      Redelegate To\n                    </label>\n                    <select\n                      className=\"border-2 border-gray-200 rounded-xl w-full px-3 py-2\"\n                      onChange={(e) => setdestvalidator(e.target.value)}\n                    >\n                      {data ? (\n                        data.validators.map((validator) => (\n                          <option value={validator.operator_address}>{validator.moniker}</option>\n                        ))\n                      ) : (\n                        <option value=\"\">Select Validator</option>\n                      )}\n                    </select>\n                  </div>\n                  <div className=\"input-group mb-3\">\n                    <label\n                      htmlFor=\"input-amount\"\n                      className=\"block text-sm font-medium text-gray-700 mb-1\"\n                    >\n                      Amount\n                    </label>\n                    <input\n                      className=\"focus:outline-none focus:ring-2 focus:ring-gray-200 block w-full p-2 sm:text-sm border-solid border-2 border-gray-200 rounded-xl\"\n                      type=\"number\"\n                      id=\"input-amount\"\n                      value={amount}\n                      onChange={(e) => setAmount(e.target.value)}\n                    />\n                  </div>\n                </div>\n                <button\n                  onClick={confirm}\n                  className=\"capitalize button block w-full bg-purple-600 text-white py-2 px-4 rounded-xl hover:bg-purple-700 focus:outline-none focus:ring-purple-600 focus:ring-opacity-50 transition duration-500 ease-in-out\"\n                >\n                  Redelegate\n                </button>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","/Users/pangp/Band/demo-bandchainjs/src/components/ModalReinvest.js",["239","240"],"import { useState, useContext } from \"react\";\nimport { reinvestRewards } from \"../band\";\nimport { useSelector } from \"react-redux\";\nimport { ModalDelegateContext } from \"../app-context\";\nimport { gql, useQuery } from \"@apollo/client\";\n\nexport default function ModalReinvest({ operator, rewardAmount }) {\n  const { isShowModalReinvest, setIsShowModalReInvest } = useContext(ModalDelegateContext);\n  const wallet = useSelector((state) => state.wallet);\n  const [modalloading, setmodalloading] = useState(false);\n  const [txhash, settxhash] = useState(\"\");\n\n  const closeModalHandler = () => {\n    setmodalloading(false);\n    setIsShowModalReInvest(false);\n  };\n\n  const confirm = async () => {\n    setmodalloading(true);\n\n    const response = await reinvestRewards(\n      operator,\n      wallet.privateKey,\n      wallet.pubkey,\n      wallet.address\n    );\n    if (response) {\n      settxhash(response.txhash);\n    }\n  };\n\n  return (\n    <div\n      aria-labelledby=\"modal-title\"\n      role=\"dialog\"\n      aria-modal=\"true\"\n      className={\n        isShowModalReinvest\n          ? \"fixed z-10 inset-0 overflow-y-auto block\"\n          : \" fixed z-10 inset-0 overflow-y-auto hidden\"\n      }\n    >\n      <div className=\"flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0\">\n        <div\n          className=\"fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity\"\n          aria-hidden=\"true\"\n        ></div>\n\n        <span className=\"hidden sm:inline-block sm:align-middle sm:h-screen\" aria-hidden=\"true\">\n          &#8203;\n        </span>\n\n        <div className=\"inline-block align-bottom bg-white rounded-3xl text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full\">\n          <div className=\"bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-5\">\n            <div className=\"flex justify-between align-items-center mt-3 mb-5 text-center sm:mt-0 sm:text-left\">\n              <h2 className=\"mb-0 text-xl capitalize\">\n                <strong>Reinvest</strong>\n              </h2>\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                className=\"h-6 w-6 text-orange cursor-pointer hover:text-orange-dark\"\n                onClick={(e) => closeModalHandler(e)}\n                fill=\"none\"\n                viewBox=\"0 0 24 24\"\n                stroke=\"currentColor\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth=\"2\"\n                  d=\"M6 18L18 6M6 6l12 12\"\n                />\n              </svg>\n            </div>\n            {modalloading ? (\n              txhash ? (\n                <div>\n                  <svg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    className=\"h-20 w-20 text-green-400 mx-auto mb-5\"\n                    fill=\"none\"\n                    viewBox=\"0 0 24 24\"\n                    stroke=\"currentColor\"\n                  >\n                    <path\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                      strokeWidth=\"2\"\n                      d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"\n                    />\n                  </svg>\n                  <h4 className=\"text-md text-center\">\n                    <strong>Transaction Hash</strong>\n                  </h4>\n                  <a\n                    className=\"overflow-ellipsis overflow-hidden text-black mb-3 block hover:text-blue\"\n                    href={`https://laozi-testnet4.cosmoscan.io/tx/${txhash}`}\n                    target=\"_blank\"\n                    rel=\"noreferrer\"\n                  >\n                    {txhash}\n                  </a>\n                </div>\n              ) : (\n                <div>\n                  <h2>Sending...</h2>\n                </div>\n              )\n            ) : (\n              <div className=\"modal-body\">\n                <div className=\"form-delegate-wrapper mb-5\">\n                  <div className=\"input-group mb-3\">\n                    <label\n                      htmlFor=\"input-address\"\n                      className=\"block text-sm font-medium text-gray-700 mb-1\"\n                    >\n                      Reinvest To\n                    </label>\n                    <p>{operator}</p>\n                  </div>\n                  <div className=\"input-group mb-3\">\n                    <label\n                      htmlFor=\"input-amount\"\n                      className=\"block text-sm font-medium text-gray-700 mb-1\"\n                    >\n                      Current Rewards\n                    </label>\n                    <p>{rewardAmount} BAND</p>\n                  </div>\n                </div>\n                <button\n                  onClick={confirm}\n                  className=\"capitalize button block w-full bg-purple-600 text-white py-2 px-4 rounded-xl hover:bg-purple-700 focus:outline-none focus:ring-purple-600 focus:ring-opacity-50 transition duration-500 ease-in-out\"\n                >\n                  Reinvest\n                </button>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","/Users/pangp/Band/demo-bandchainjs/src/routes/Converter.js",["241","242","243"],{"ruleId":"244","replacedBy":"245"},{"ruleId":"246","replacedBy":"247"},{"ruleId":"248","severity":1,"message":"249","line":2,"column":17,"nodeType":"250","messageId":"251","endLine":2,"endColumn":25},{"ruleId":"248","severity":1,"message":"252","line":2,"column":27,"nodeType":"250","messageId":"251","endLine":2,"endColumn":36},{"ruleId":"248","severity":1,"message":"253","line":3,"column":10,"nodeType":"250","messageId":"251","endLine":3,"endColumn":14},{"ruleId":"248","severity":1,"message":"254","line":3,"column":10,"nodeType":"250","messageId":"251","endLine":3,"endColumn":26},{"ruleId":"248","severity":1,"message":"255","line":6,"column":8,"nodeType":"250","messageId":"251","endLine":6,"endColumn":26},{"ruleId":"256","severity":1,"message":"257","line":23,"column":6,"nodeType":"258","endLine":23,"endColumn":8,"suggestions":"259"},{"ruleId":"248","severity":1,"message":"260","line":13,"column":10,"nodeType":"250","messageId":"251","endLine":13,"endColumn":20},{"ruleId":"248","severity":1,"message":"261","line":14,"column":10,"nodeType":"250","messageId":"251","endLine":14,"endColumn":27},{"ruleId":"248","severity":1,"message":"260","line":14,"column":10,"nodeType":"250","messageId":"251","endLine":14,"endColumn":20},{"ruleId":"248","severity":1,"message":"261","line":15,"column":10,"nodeType":"250","messageId":"251","endLine":15,"endColumn":27},{"ruleId":"248","severity":1,"message":"260","line":16,"column":10,"nodeType":"250","messageId":"251","endLine":16,"endColumn":20},{"ruleId":"248","severity":1,"message":"261","line":17,"column":10,"nodeType":"250","messageId":"251","endLine":17,"endColumn":27},{"ruleId":"248","severity":1,"message":"262","line":2,"column":10,"nodeType":"250","messageId":"251","endLine":2,"endColumn":28},{"ruleId":"248","severity":1,"message":"263","line":67,"column":10,"nodeType":"250","messageId":"251","endLine":67,"endColumn":20},{"ruleId":"248","severity":1,"message":"264","line":5,"column":15,"nodeType":"250","messageId":"251","endLine":5,"endColumn":27},{"ruleId":"256","severity":1,"message":"265","line":46,"column":6,"nodeType":"258","endLine":46,"endColumn":20,"suggestions":"266"},{"ruleId":"248","severity":1,"message":"255","line":6,"column":8,"nodeType":"250","messageId":"251","endLine":6,"endColumn":26},{"ruleId":"248","severity":1,"message":"249","line":2,"column":10,"nodeType":"250","messageId":"251","endLine":2,"endColumn":18},{"ruleId":"248","severity":1,"message":"264","line":1,"column":15,"nodeType":"250","messageId":"251","endLine":1,"endColumn":27},{"ruleId":"248","severity":1,"message":"249","line":1,"column":10,"nodeType":"250","messageId":"251","endLine":1,"endColumn":18},{"ruleId":"248","severity":1,"message":"264","line":4,"column":15,"nodeType":"250","messageId":"251","endLine":4,"endColumn":27},{"ruleId":"248","severity":1,"message":"267","line":4,"column":29,"nodeType":"250","messageId":"251","endLine":4,"endColumn":44},{"ruleId":"248","severity":1,"message":"268","line":50,"column":9,"nodeType":"250","messageId":"251","endLine":50,"endColumn":24},{"ruleId":"248","severity":1,"message":"255","line":6,"column":8,"nodeType":"250","messageId":"251","endLine":6,"endColumn":26},{"ruleId":"248","severity":1,"message":"269","line":47,"column":11,"nodeType":"250","messageId":"251","endLine":47,"endColumn":18},{"ruleId":"248","severity":1,"message":"270","line":47,"column":20,"nodeType":"250","messageId":"251","endLine":47,"endColumn":25},{"ruleId":"248","severity":1,"message":"271","line":5,"column":10,"nodeType":"250","messageId":"251","endLine":5,"endColumn":13},{"ruleId":"248","severity":1,"message":"272","line":5,"column":15,"nodeType":"250","messageId":"251","endLine":5,"endColumn":23},{"ruleId":"273","severity":1,"message":"274","line":46,"column":22,"nodeType":"275","messageId":"276","endLine":46,"endColumn":24},{"ruleId":"256","severity":1,"message":"277","line":47,"column":6,"nodeType":"258","endLine":47,"endColumn":8,"suggestions":"278"},{"ruleId":"256","severity":1,"message":"279","line":51,"column":6,"nodeType":"258","endLine":51,"endColumn":12,"suggestions":"280"},"no-native-reassign",["281"],"no-negated-in-lhs",["282"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'Link' is defined but never used.","'createDataSource' is defined but never used.","'AccountWithBalance' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'defaultPair' and 'getPrice'. Either include them or remove the dependency array.","ArrayExpression",["283"],"'sendResult' is assigned a value but never used.","'sendResultSuccess' is assigned a value but never used.","'MsgBeginRedelegate' is defined but never used.","'decodeData' is defined but never used.","'useLazyQuery' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'error', and 'loading'. Either include them or remove the dependency array.",["284"],"'useSubscription' is defined but never used.","'GET_DELEGATIONS' is assigned a value but never used.","'loading' is assigned a value but never used.","'error' is assigned a value but never used.","'gql' is defined but never used.","'useQuery' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'symbolDest' and 'symbolSource'. Either include them or remove the dependency array.",["285"],"React Hook useEffect has a missing dependency: 'inputSource'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setinputDest' needs the current value of 'inputSource'.",["286"],"no-global-assign","no-unsafe-negation",{"desc":"287","fix":"288"},{"desc":"289","fix":"290"},{"desc":"291","fix":"292"},{"desc":"293","fix":"294"},"Update the dependencies array to be: [defaultPair, getPrice]",{"range":"295","text":"296"},"Update the dependencies array to be: [wallet, data, loading, error, dispatch]",{"range":"297","text":"298"},"Update the dependencies array to be: [symbolDest, symbolSource]",{"range":"299","text":"300"},"Update the dependencies array to be: [inputSource, rate]",{"range":"301","text":"302"},[554,556],"[defaultPair, getPrice]",[1397,1411],"[wallet, data, loading, error, dispatch]",[1162,1164],"[symbolDest, symbolSource]",[1244,1250],"[inputSource, rate]"]