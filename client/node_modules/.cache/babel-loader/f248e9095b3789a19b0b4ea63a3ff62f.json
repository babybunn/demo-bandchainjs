{"ast":null,"code":"// source: tendermint/crypto/keys.proto\n\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {missingRequire} reports error on implicit type usages.\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n\n/* eslint-disable */\n// @ts-nocheck\nvar jspb = require('google-protobuf');\n\nvar goog = jspb;\nvar global = Function('return this')();\n\nvar gogoproto_gogo_pb = require('../../gogoproto/gogo_pb.js');\n\ngoog.object.extend(proto, gogoproto_gogo_pb);\ngoog.exportSymbol('proto.tendermint.crypto.PublicKey', null, global);\ngoog.exportSymbol('proto.tendermint.crypto.PublicKey.SumCase', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\nproto.tendermint.crypto.PublicKey = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.tendermint.crypto.PublicKey.oneofGroups_);\n};\n\ngoog.inherits(proto.tendermint.crypto.PublicKey, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.tendermint.crypto.PublicKey.displayName = 'proto.tendermint.crypto.PublicKey';\n}\n/**\n * Oneof group definitions for this message. Each group defines the field\n * numbers belonging to that group. When of these fields' value is set, all\n * other fields in the group are cleared. During deserialization, if multiple\n * fields are encountered for a group, only the last value seen will be kept.\n * @private {!Array<!Array<number>>}\n * @const\n */\n\n\nproto.tendermint.crypto.PublicKey.oneofGroups_ = [[1, 2]];\n/**\n * @enum {number}\n */\n\nproto.tendermint.crypto.PublicKey.SumCase = {\n  SUM_NOT_SET: 0,\n  ED25519: 1,\n  SECP256K1: 2\n};\n/**\n * @return {proto.tendermint.crypto.PublicKey.SumCase}\n */\n\nproto.tendermint.crypto.PublicKey.prototype.getSumCase = function () {\n  return (\n    /** @type {proto.tendermint.crypto.PublicKey.SumCase} */\n    jspb.Message.computeOneofCase(this, proto.tendermint.crypto.PublicKey.oneofGroups_[0])\n  );\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.tendermint.crypto.PublicKey.prototype.toObject = function (opt_includeInstance) {\n    return proto.tendermint.crypto.PublicKey.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.tendermint.crypto.PublicKey} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.tendermint.crypto.PublicKey.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      ed25519: msg.getEd25519_asB64(),\n      secp256k1: msg.getSecp256k1_asB64()\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.tendermint.crypto.PublicKey}\n */\n\n\nproto.tendermint.crypto.PublicKey.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.tendermint.crypto.PublicKey();\n  return proto.tendermint.crypto.PublicKey.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.tendermint.crypto.PublicKey} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.tendermint.crypto.PublicKey}\n */\n\n\nproto.tendermint.crypto.PublicKey.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {!Uint8Array} */\n        reader.readBytes();\n        msg.setEd25519(value);\n        break;\n\n      case 2:\n        var value =\n        /** @type {!Uint8Array} */\n        reader.readBytes();\n        msg.setSecp256k1(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.tendermint.crypto.PublicKey.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.tendermint.crypto.PublicKey.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.tendermint.crypto.PublicKey} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.tendermint.crypto.PublicKey.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f =\n  /** @type {!(string|Uint8Array)} */\n  jspb.Message.getField(message, 1);\n\n  if (f != null) {\n    writer.writeBytes(1, f);\n  }\n\n  f =\n  /** @type {!(string|Uint8Array)} */\n  jspb.Message.getField(message, 2);\n\n  if (f != null) {\n    writer.writeBytes(2, f);\n  }\n};\n/**\n * optional bytes ed25519 = 1;\n * @return {!(string|Uint8Array)}\n */\n\n\nproto.tendermint.crypto.PublicKey.prototype.getEd25519 = function () {\n  return (\n    /** @type {!(string|Uint8Array)} */\n    jspb.Message.getFieldWithDefault(this, 1, \"\")\n  );\n};\n/**\n * optional bytes ed25519 = 1;\n * This is a type-conversion wrapper around `getEd25519()`\n * @return {string}\n */\n\n\nproto.tendermint.crypto.PublicKey.prototype.getEd25519_asB64 = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.bytesAsB64(this.getEd25519())\n  );\n};\n/**\n * optional bytes ed25519 = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getEd25519()`\n * @return {!Uint8Array}\n */\n\n\nproto.tendermint.crypto.PublicKey.prototype.getEd25519_asU8 = function () {\n  return (\n    /** @type {!Uint8Array} */\n    jspb.Message.bytesAsU8(this.getEd25519())\n  );\n};\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.tendermint.crypto.PublicKey} returns this\n */\n\n\nproto.tendermint.crypto.PublicKey.prototype.setEd25519 = function (value) {\n  return jspb.Message.setOneofField(this, 1, proto.tendermint.crypto.PublicKey.oneofGroups_[0], value);\n};\n/**\n * Clears the field making it undefined.\n * @return {!proto.tendermint.crypto.PublicKey} returns this\n */\n\n\nproto.tendermint.crypto.PublicKey.prototype.clearEd25519 = function () {\n  return jspb.Message.setOneofField(this, 1, proto.tendermint.crypto.PublicKey.oneofGroups_[0], undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.tendermint.crypto.PublicKey.prototype.hasEd25519 = function () {\n  return jspb.Message.getField(this, 1) != null;\n};\n/**\n * optional bytes secp256k1 = 2;\n * @return {!(string|Uint8Array)}\n */\n\n\nproto.tendermint.crypto.PublicKey.prototype.getSecp256k1 = function () {\n  return (\n    /** @type {!(string|Uint8Array)} */\n    jspb.Message.getFieldWithDefault(this, 2, \"\")\n  );\n};\n/**\n * optional bytes secp256k1 = 2;\n * This is a type-conversion wrapper around `getSecp256k1()`\n * @return {string}\n */\n\n\nproto.tendermint.crypto.PublicKey.prototype.getSecp256k1_asB64 = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.bytesAsB64(this.getSecp256k1())\n  );\n};\n/**\n * optional bytes secp256k1 = 2;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getSecp256k1()`\n * @return {!Uint8Array}\n */\n\n\nproto.tendermint.crypto.PublicKey.prototype.getSecp256k1_asU8 = function () {\n  return (\n    /** @type {!Uint8Array} */\n    jspb.Message.bytesAsU8(this.getSecp256k1())\n  );\n};\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.tendermint.crypto.PublicKey} returns this\n */\n\n\nproto.tendermint.crypto.PublicKey.prototype.setSecp256k1 = function (value) {\n  return jspb.Message.setOneofField(this, 2, proto.tendermint.crypto.PublicKey.oneofGroups_[0], value);\n};\n/**\n * Clears the field making it undefined.\n * @return {!proto.tendermint.crypto.PublicKey} returns this\n */\n\n\nproto.tendermint.crypto.PublicKey.prototype.clearSecp256k1 = function () {\n  return jspb.Message.setOneofField(this, 2, proto.tendermint.crypto.PublicKey.oneofGroups_[0], undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.tendermint.crypto.PublicKey.prototype.hasSecp256k1 = function () {\n  return jspb.Message.getField(this, 2) != null;\n};\n\ngoog.object.extend(exports, proto.tendermint.crypto);","map":{"version":3,"sources":["/Users/pangp/Band/demo-bandchainjs/client/node_modules/@bandprotocol/bandchain.js/proto/tendermint/crypto/keys_pb.js"],"names":["jspb","require","goog","global","Function","gogoproto_gogo_pb","object","extend","proto","exportSymbol","tendermint","crypto","PublicKey","opt_data","Message","initialize","oneofGroups_","inherits","DEBUG","COMPILED","displayName","SumCase","SUM_NOT_SET","ED25519","SECP256K1","prototype","getSumCase","computeOneofCase","GENERATE_TO_OBJECT","toObject","opt_includeInstance","includeInstance","msg","f","obj","ed25519","getEd25519_asB64","secp256k1","getSecp256k1_asB64","$jspbMessageInstance","deserializeBinary","bytes","reader","BinaryReader","deserializeBinaryFromReader","nextField","isEndGroup","field","getFieldNumber","value","readBytes","setEd25519","setSecp256k1","skipField","serializeBinary","writer","BinaryWriter","serializeBinaryToWriter","getResultBuffer","message","undefined","getField","writeBytes","getEd25519","getFieldWithDefault","bytesAsB64","getEd25519_asU8","bytesAsU8","setOneofField","clearEd25519","hasEd25519","getSecp256k1","getSecp256k1_asU8","clearSecp256k1","hasSecp256k1","exports"],"mappings":"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","sourcesContent":["// source: tendermint/crypto/keys.proto\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {missingRequire} reports error on implicit type usages.\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n/* eslint-disable */\n// @ts-nocheck\n\nvar jspb = require('google-protobuf');\nvar goog = jspb;\nvar global = Function('return this')();\n\nvar gogoproto_gogo_pb = require('../../gogoproto/gogo_pb.js');\ngoog.object.extend(proto, gogoproto_gogo_pb);\ngoog.exportSymbol('proto.tendermint.crypto.PublicKey', null, global);\ngoog.exportSymbol('proto.tendermint.crypto.PublicKey.SumCase', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.tendermint.crypto.PublicKey = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.tendermint.crypto.PublicKey.oneofGroups_);\n};\ngoog.inherits(proto.tendermint.crypto.PublicKey, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.tendermint.crypto.PublicKey.displayName = 'proto.tendermint.crypto.PublicKey';\n}\n\n/**\n * Oneof group definitions for this message. Each group defines the field\n * numbers belonging to that group. When of these fields' value is set, all\n * other fields in the group are cleared. During deserialization, if multiple\n * fields are encountered for a group, only the last value seen will be kept.\n * @private {!Array<!Array<number>>}\n * @const\n */\nproto.tendermint.crypto.PublicKey.oneofGroups_ = [[1,2]];\n\n/**\n * @enum {number}\n */\nproto.tendermint.crypto.PublicKey.SumCase = {\n  SUM_NOT_SET: 0,\n  ED25519: 1,\n  SECP256K1: 2\n};\n\n/**\n * @return {proto.tendermint.crypto.PublicKey.SumCase}\n */\nproto.tendermint.crypto.PublicKey.prototype.getSumCase = function() {\n  return /** @type {proto.tendermint.crypto.PublicKey.SumCase} */(jspb.Message.computeOneofCase(this, proto.tendermint.crypto.PublicKey.oneofGroups_[0]));\n};\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.tendermint.crypto.PublicKey.prototype.toObject = function(opt_includeInstance) {\n  return proto.tendermint.crypto.PublicKey.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.tendermint.crypto.PublicKey} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.tendermint.crypto.PublicKey.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    ed25519: msg.getEd25519_asB64(),\n    secp256k1: msg.getSecp256k1_asB64()\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.tendermint.crypto.PublicKey}\n */\nproto.tendermint.crypto.PublicKey.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.tendermint.crypto.PublicKey;\n  return proto.tendermint.crypto.PublicKey.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.tendermint.crypto.PublicKey} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.tendermint.crypto.PublicKey}\n */\nproto.tendermint.crypto.PublicKey.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setEd25519(value);\n      break;\n    case 2:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setSecp256k1(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.tendermint.crypto.PublicKey.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.tendermint.crypto.PublicKey.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.tendermint.crypto.PublicKey} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.tendermint.crypto.PublicKey.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));\n  if (f != null) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));\n  if (f != null) {\n    writer.writeBytes(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bytes ed25519 = 1;\n * @return {!(string|Uint8Array)}\n */\nproto.tendermint.crypto.PublicKey.prototype.getEd25519 = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes ed25519 = 1;\n * This is a type-conversion wrapper around `getEd25519()`\n * @return {string}\n */\nproto.tendermint.crypto.PublicKey.prototype.getEd25519_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getEd25519()));\n};\n\n\n/**\n * optional bytes ed25519 = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getEd25519()`\n * @return {!Uint8Array}\n */\nproto.tendermint.crypto.PublicKey.prototype.getEd25519_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getEd25519()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.tendermint.crypto.PublicKey} returns this\n */\nproto.tendermint.crypto.PublicKey.prototype.setEd25519 = function(value) {\n  return jspb.Message.setOneofField(this, 1, proto.tendermint.crypto.PublicKey.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the field making it undefined.\n * @return {!proto.tendermint.crypto.PublicKey} returns this\n */\nproto.tendermint.crypto.PublicKey.prototype.clearEd25519 = function() {\n  return jspb.Message.setOneofField(this, 1, proto.tendermint.crypto.PublicKey.oneofGroups_[0], undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.tendermint.crypto.PublicKey.prototype.hasEd25519 = function() {\n  return jspb.Message.getField(this, 1) != null;\n};\n\n\n/**\n * optional bytes secp256k1 = 2;\n * @return {!(string|Uint8Array)}\n */\nproto.tendermint.crypto.PublicKey.prototype.getSecp256k1 = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/**\n * optional bytes secp256k1 = 2;\n * This is a type-conversion wrapper around `getSecp256k1()`\n * @return {string}\n */\nproto.tendermint.crypto.PublicKey.prototype.getSecp256k1_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getSecp256k1()));\n};\n\n\n/**\n * optional bytes secp256k1 = 2;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getSecp256k1()`\n * @return {!Uint8Array}\n */\nproto.tendermint.crypto.PublicKey.prototype.getSecp256k1_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getSecp256k1()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.tendermint.crypto.PublicKey} returns this\n */\nproto.tendermint.crypto.PublicKey.prototype.setSecp256k1 = function(value) {\n  return jspb.Message.setOneofField(this, 2, proto.tendermint.crypto.PublicKey.oneofGroups_[0], value);\n};\n\n\n/**\n * Clears the field making it undefined.\n * @return {!proto.tendermint.crypto.PublicKey} returns this\n */\nproto.tendermint.crypto.PublicKey.prototype.clearSecp256k1 = function() {\n  return jspb.Message.setOneofField(this, 2, proto.tendermint.crypto.PublicKey.oneofGroups_[0], undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.tendermint.crypto.PublicKey.prototype.hasSecp256k1 = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\ngoog.object.extend(exports, proto.tendermint.crypto);\n"]},"metadata":{},"sourceType":"script"}