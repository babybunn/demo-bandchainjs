{"ast":null,"code":"// source: tendermint/crypto/proof.proto\n\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {missingRequire} reports error on implicit type usages.\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n\n/* eslint-disable */\n// @ts-nocheck\nvar jspb = require('google-protobuf');\n\nvar goog = jspb;\nvar global = Function('return this')();\n\nvar gogoproto_gogo_pb = require('../../gogoproto/gogo_pb.js');\n\ngoog.object.extend(proto, gogoproto_gogo_pb);\ngoog.exportSymbol('proto.tendermint.crypto.DominoOp', null, global);\ngoog.exportSymbol('proto.tendermint.crypto.Proof', null, global);\ngoog.exportSymbol('proto.tendermint.crypto.ProofOp', null, global);\ngoog.exportSymbol('proto.tendermint.crypto.ProofOps', null, global);\ngoog.exportSymbol('proto.tendermint.crypto.ValueOp', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\nproto.tendermint.crypto.Proof = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.tendermint.crypto.Proof.repeatedFields_, null);\n};\n\ngoog.inherits(proto.tendermint.crypto.Proof, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.tendermint.crypto.Proof.displayName = 'proto.tendermint.crypto.Proof';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.tendermint.crypto.ValueOp = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.tendermint.crypto.ValueOp, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.tendermint.crypto.ValueOp.displayName = 'proto.tendermint.crypto.ValueOp';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.tendermint.crypto.DominoOp = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.tendermint.crypto.DominoOp, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.tendermint.crypto.DominoOp.displayName = 'proto.tendermint.crypto.DominoOp';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.tendermint.crypto.ProofOp = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.tendermint.crypto.ProofOp, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.tendermint.crypto.ProofOp.displayName = 'proto.tendermint.crypto.ProofOp';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.tendermint.crypto.ProofOps = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.tendermint.crypto.ProofOps.repeatedFields_, null);\n};\n\ngoog.inherits(proto.tendermint.crypto.ProofOps, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.tendermint.crypto.ProofOps.displayName = 'proto.tendermint.crypto.ProofOps';\n}\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\n\n\nproto.tendermint.crypto.Proof.repeatedFields_ = [4];\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.tendermint.crypto.Proof.prototype.toObject = function (opt_includeInstance) {\n    return proto.tendermint.crypto.Proof.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.tendermint.crypto.Proof} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.tendermint.crypto.Proof.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      total: jspb.Message.getFieldWithDefault(msg, 1, 0),\n      index: jspb.Message.getFieldWithDefault(msg, 2, 0),\n      leafHash: msg.getLeafHash_asB64(),\n      auntsList: msg.getAuntsList_asB64()\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.tendermint.crypto.Proof}\n */\n\n\nproto.tendermint.crypto.Proof.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.tendermint.crypto.Proof();\n  return proto.tendermint.crypto.Proof.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.tendermint.crypto.Proof} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.tendermint.crypto.Proof}\n */\n\n\nproto.tendermint.crypto.Proof.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {number} */\n        reader.readInt64();\n        msg.setTotal(value);\n        break;\n\n      case 2:\n        var value =\n        /** @type {number} */\n        reader.readInt64();\n        msg.setIndex(value);\n        break;\n\n      case 3:\n        var value =\n        /** @type {!Uint8Array} */\n        reader.readBytes();\n        msg.setLeafHash(value);\n        break;\n\n      case 4:\n        var value =\n        /** @type {!Uint8Array} */\n        reader.readBytes();\n        msg.addAunts(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.tendermint.crypto.Proof.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.tendermint.crypto.Proof.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.tendermint.crypto.Proof} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.tendermint.crypto.Proof.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getTotal();\n\n  if (f !== 0) {\n    writer.writeInt64(1, f);\n  }\n\n  f = message.getIndex();\n\n  if (f !== 0) {\n    writer.writeInt64(2, f);\n  }\n\n  f = message.getLeafHash_asU8();\n\n  if (f.length > 0) {\n    writer.writeBytes(3, f);\n  }\n\n  f = message.getAuntsList_asU8();\n\n  if (f.length > 0) {\n    writer.writeRepeatedBytes(4, f);\n  }\n};\n/**\n * optional int64 total = 1;\n * @return {number}\n */\n\n\nproto.tendermint.crypto.Proof.prototype.getTotal = function () {\n  return (\n    /** @type {number} */\n    jspb.Message.getFieldWithDefault(this, 1, 0)\n  );\n};\n/**\n * @param {number} value\n * @return {!proto.tendermint.crypto.Proof} returns this\n */\n\n\nproto.tendermint.crypto.Proof.prototype.setTotal = function (value) {\n  return jspb.Message.setProto3IntField(this, 1, value);\n};\n/**\n * optional int64 index = 2;\n * @return {number}\n */\n\n\nproto.tendermint.crypto.Proof.prototype.getIndex = function () {\n  return (\n    /** @type {number} */\n    jspb.Message.getFieldWithDefault(this, 2, 0)\n  );\n};\n/**\n * @param {number} value\n * @return {!proto.tendermint.crypto.Proof} returns this\n */\n\n\nproto.tendermint.crypto.Proof.prototype.setIndex = function (value) {\n  return jspb.Message.setProto3IntField(this, 2, value);\n};\n/**\n * optional bytes leaf_hash = 3;\n * @return {!(string|Uint8Array)}\n */\n\n\nproto.tendermint.crypto.Proof.prototype.getLeafHash = function () {\n  return (\n    /** @type {!(string|Uint8Array)} */\n    jspb.Message.getFieldWithDefault(this, 3, \"\")\n  );\n};\n/**\n * optional bytes leaf_hash = 3;\n * This is a type-conversion wrapper around `getLeafHash()`\n * @return {string}\n */\n\n\nproto.tendermint.crypto.Proof.prototype.getLeafHash_asB64 = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.bytesAsB64(this.getLeafHash())\n  );\n};\n/**\n * optional bytes leaf_hash = 3;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getLeafHash()`\n * @return {!Uint8Array}\n */\n\n\nproto.tendermint.crypto.Proof.prototype.getLeafHash_asU8 = function () {\n  return (\n    /** @type {!Uint8Array} */\n    jspb.Message.bytesAsU8(this.getLeafHash())\n  );\n};\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.tendermint.crypto.Proof} returns this\n */\n\n\nproto.tendermint.crypto.Proof.prototype.setLeafHash = function (value) {\n  return jspb.Message.setProto3BytesField(this, 3, value);\n};\n/**\n * repeated bytes aunts = 4;\n * @return {!(Array<!Uint8Array>|Array<string>)}\n */\n\n\nproto.tendermint.crypto.Proof.prototype.getAuntsList = function () {\n  return (\n    /** @type {!(Array<!Uint8Array>|Array<string>)} */\n    jspb.Message.getRepeatedField(this, 4)\n  );\n};\n/**\n * repeated bytes aunts = 4;\n * This is a type-conversion wrapper around `getAuntsList()`\n * @return {!Array<string>}\n */\n\n\nproto.tendermint.crypto.Proof.prototype.getAuntsList_asB64 = function () {\n  return (\n    /** @type {!Array<string>} */\n    jspb.Message.bytesListAsB64(this.getAuntsList())\n  );\n};\n/**\n * repeated bytes aunts = 4;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getAuntsList()`\n * @return {!Array<!Uint8Array>}\n */\n\n\nproto.tendermint.crypto.Proof.prototype.getAuntsList_asU8 = function () {\n  return (\n    /** @type {!Array<!Uint8Array>} */\n    jspb.Message.bytesListAsU8(this.getAuntsList())\n  );\n};\n/**\n * @param {!(Array<!Uint8Array>|Array<string>)} value\n * @return {!proto.tendermint.crypto.Proof} returns this\n */\n\n\nproto.tendermint.crypto.Proof.prototype.setAuntsList = function (value) {\n  return jspb.Message.setField(this, 4, value || []);\n};\n/**\n * @param {!(string|Uint8Array)} value\n * @param {number=} opt_index\n * @return {!proto.tendermint.crypto.Proof} returns this\n */\n\n\nproto.tendermint.crypto.Proof.prototype.addAunts = function (value, opt_index) {\n  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);\n};\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.tendermint.crypto.Proof} returns this\n */\n\n\nproto.tendermint.crypto.Proof.prototype.clearAuntsList = function () {\n  return this.setAuntsList([]);\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.tendermint.crypto.ValueOp.prototype.toObject = function (opt_includeInstance) {\n    return proto.tendermint.crypto.ValueOp.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.tendermint.crypto.ValueOp} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.tendermint.crypto.ValueOp.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      key: msg.getKey_asB64(),\n      proof: (f = msg.getProof()) && proto.tendermint.crypto.Proof.toObject(includeInstance, f)\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.tendermint.crypto.ValueOp}\n */\n\n\nproto.tendermint.crypto.ValueOp.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.tendermint.crypto.ValueOp();\n  return proto.tendermint.crypto.ValueOp.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.tendermint.crypto.ValueOp} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.tendermint.crypto.ValueOp}\n */\n\n\nproto.tendermint.crypto.ValueOp.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {!Uint8Array} */\n        reader.readBytes();\n        msg.setKey(value);\n        break;\n\n      case 2:\n        var value = new proto.tendermint.crypto.Proof();\n        reader.readMessage(value, proto.tendermint.crypto.Proof.deserializeBinaryFromReader);\n        msg.setProof(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.tendermint.crypto.ValueOp.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.tendermint.crypto.ValueOp.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.tendermint.crypto.ValueOp} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.tendermint.crypto.ValueOp.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getKey_asU8();\n\n  if (f.length > 0) {\n    writer.writeBytes(1, f);\n  }\n\n  f = message.getProof();\n\n  if (f != null) {\n    writer.writeMessage(2, f, proto.tendermint.crypto.Proof.serializeBinaryToWriter);\n  }\n};\n/**\n * optional bytes key = 1;\n * @return {!(string|Uint8Array)}\n */\n\n\nproto.tendermint.crypto.ValueOp.prototype.getKey = function () {\n  return (\n    /** @type {!(string|Uint8Array)} */\n    jspb.Message.getFieldWithDefault(this, 1, \"\")\n  );\n};\n/**\n * optional bytes key = 1;\n * This is a type-conversion wrapper around `getKey()`\n * @return {string}\n */\n\n\nproto.tendermint.crypto.ValueOp.prototype.getKey_asB64 = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.bytesAsB64(this.getKey())\n  );\n};\n/**\n * optional bytes key = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getKey()`\n * @return {!Uint8Array}\n */\n\n\nproto.tendermint.crypto.ValueOp.prototype.getKey_asU8 = function () {\n  return (\n    /** @type {!Uint8Array} */\n    jspb.Message.bytesAsU8(this.getKey())\n  );\n};\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.tendermint.crypto.ValueOp} returns this\n */\n\n\nproto.tendermint.crypto.ValueOp.prototype.setKey = function (value) {\n  return jspb.Message.setProto3BytesField(this, 1, value);\n};\n/**\n * optional Proof proof = 2;\n * @return {?proto.tendermint.crypto.Proof}\n */\n\n\nproto.tendermint.crypto.ValueOp.prototype.getProof = function () {\n  return (\n    /** @type{?proto.tendermint.crypto.Proof} */\n    jspb.Message.getWrapperField(this, proto.tendermint.crypto.Proof, 2)\n  );\n};\n/**\n * @param {?proto.tendermint.crypto.Proof|undefined} value\n * @return {!proto.tendermint.crypto.ValueOp} returns this\n*/\n\n\nproto.tendermint.crypto.ValueOp.prototype.setProof = function (value) {\n  return jspb.Message.setWrapperField(this, 2, value);\n};\n/**\n * Clears the message field making it undefined.\n * @return {!proto.tendermint.crypto.ValueOp} returns this\n */\n\n\nproto.tendermint.crypto.ValueOp.prototype.clearProof = function () {\n  return this.setProof(undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.tendermint.crypto.ValueOp.prototype.hasProof = function () {\n  return jspb.Message.getField(this, 2) != null;\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.tendermint.crypto.DominoOp.prototype.toObject = function (opt_includeInstance) {\n    return proto.tendermint.crypto.DominoOp.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.tendermint.crypto.DominoOp} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.tendermint.crypto.DominoOp.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      key: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n      input: jspb.Message.getFieldWithDefault(msg, 2, \"\"),\n      output: jspb.Message.getFieldWithDefault(msg, 3, \"\")\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.tendermint.crypto.DominoOp}\n */\n\n\nproto.tendermint.crypto.DominoOp.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.tendermint.crypto.DominoOp();\n  return proto.tendermint.crypto.DominoOp.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.tendermint.crypto.DominoOp} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.tendermint.crypto.DominoOp}\n */\n\n\nproto.tendermint.crypto.DominoOp.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setKey(value);\n        break;\n\n      case 2:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setInput(value);\n        break;\n\n      case 3:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setOutput(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.tendermint.crypto.DominoOp.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.tendermint.crypto.DominoOp.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.tendermint.crypto.DominoOp} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.tendermint.crypto.DominoOp.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getKey();\n\n  if (f.length > 0) {\n    writer.writeString(1, f);\n  }\n\n  f = message.getInput();\n\n  if (f.length > 0) {\n    writer.writeString(2, f);\n  }\n\n  f = message.getOutput();\n\n  if (f.length > 0) {\n    writer.writeString(3, f);\n  }\n};\n/**\n * optional string key = 1;\n * @return {string}\n */\n\n\nproto.tendermint.crypto.DominoOp.prototype.getKey = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 1, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.tendermint.crypto.DominoOp} returns this\n */\n\n\nproto.tendermint.crypto.DominoOp.prototype.setKey = function (value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n/**\n * optional string input = 2;\n * @return {string}\n */\n\n\nproto.tendermint.crypto.DominoOp.prototype.getInput = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 2, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.tendermint.crypto.DominoOp} returns this\n */\n\n\nproto.tendermint.crypto.DominoOp.prototype.setInput = function (value) {\n  return jspb.Message.setProto3StringField(this, 2, value);\n};\n/**\n * optional string output = 3;\n * @return {string}\n */\n\n\nproto.tendermint.crypto.DominoOp.prototype.getOutput = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 3, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.tendermint.crypto.DominoOp} returns this\n */\n\n\nproto.tendermint.crypto.DominoOp.prototype.setOutput = function (value) {\n  return jspb.Message.setProto3StringField(this, 3, value);\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.tendermint.crypto.ProofOp.prototype.toObject = function (opt_includeInstance) {\n    return proto.tendermint.crypto.ProofOp.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.tendermint.crypto.ProofOp} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.tendermint.crypto.ProofOp.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      type: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n      key: msg.getKey_asB64(),\n      data: msg.getData_asB64()\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.tendermint.crypto.ProofOp}\n */\n\n\nproto.tendermint.crypto.ProofOp.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.tendermint.crypto.ProofOp();\n  return proto.tendermint.crypto.ProofOp.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.tendermint.crypto.ProofOp} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.tendermint.crypto.ProofOp}\n */\n\n\nproto.tendermint.crypto.ProofOp.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setType(value);\n        break;\n\n      case 2:\n        var value =\n        /** @type {!Uint8Array} */\n        reader.readBytes();\n        msg.setKey(value);\n        break;\n\n      case 3:\n        var value =\n        /** @type {!Uint8Array} */\n        reader.readBytes();\n        msg.setData(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.tendermint.crypto.ProofOp.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.tendermint.crypto.ProofOp.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.tendermint.crypto.ProofOp} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.tendermint.crypto.ProofOp.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getType();\n\n  if (f.length > 0) {\n    writer.writeString(1, f);\n  }\n\n  f = message.getKey_asU8();\n\n  if (f.length > 0) {\n    writer.writeBytes(2, f);\n  }\n\n  f = message.getData_asU8();\n\n  if (f.length > 0) {\n    writer.writeBytes(3, f);\n  }\n};\n/**\n * optional string type = 1;\n * @return {string}\n */\n\n\nproto.tendermint.crypto.ProofOp.prototype.getType = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 1, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.tendermint.crypto.ProofOp} returns this\n */\n\n\nproto.tendermint.crypto.ProofOp.prototype.setType = function (value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n/**\n * optional bytes key = 2;\n * @return {!(string|Uint8Array)}\n */\n\n\nproto.tendermint.crypto.ProofOp.prototype.getKey = function () {\n  return (\n    /** @type {!(string|Uint8Array)} */\n    jspb.Message.getFieldWithDefault(this, 2, \"\")\n  );\n};\n/**\n * optional bytes key = 2;\n * This is a type-conversion wrapper around `getKey()`\n * @return {string}\n */\n\n\nproto.tendermint.crypto.ProofOp.prototype.getKey_asB64 = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.bytesAsB64(this.getKey())\n  );\n};\n/**\n * optional bytes key = 2;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getKey()`\n * @return {!Uint8Array}\n */\n\n\nproto.tendermint.crypto.ProofOp.prototype.getKey_asU8 = function () {\n  return (\n    /** @type {!Uint8Array} */\n    jspb.Message.bytesAsU8(this.getKey())\n  );\n};\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.tendermint.crypto.ProofOp} returns this\n */\n\n\nproto.tendermint.crypto.ProofOp.prototype.setKey = function (value) {\n  return jspb.Message.setProto3BytesField(this, 2, value);\n};\n/**\n * optional bytes data = 3;\n * @return {!(string|Uint8Array)}\n */\n\n\nproto.tendermint.crypto.ProofOp.prototype.getData = function () {\n  return (\n    /** @type {!(string|Uint8Array)} */\n    jspb.Message.getFieldWithDefault(this, 3, \"\")\n  );\n};\n/**\n * optional bytes data = 3;\n * This is a type-conversion wrapper around `getData()`\n * @return {string}\n */\n\n\nproto.tendermint.crypto.ProofOp.prototype.getData_asB64 = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.bytesAsB64(this.getData())\n  );\n};\n/**\n * optional bytes data = 3;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getData()`\n * @return {!Uint8Array}\n */\n\n\nproto.tendermint.crypto.ProofOp.prototype.getData_asU8 = function () {\n  return (\n    /** @type {!Uint8Array} */\n    jspb.Message.bytesAsU8(this.getData())\n  );\n};\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.tendermint.crypto.ProofOp} returns this\n */\n\n\nproto.tendermint.crypto.ProofOp.prototype.setData = function (value) {\n  return jspb.Message.setProto3BytesField(this, 3, value);\n};\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\n\n\nproto.tendermint.crypto.ProofOps.repeatedFields_ = [1];\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.tendermint.crypto.ProofOps.prototype.toObject = function (opt_includeInstance) {\n    return proto.tendermint.crypto.ProofOps.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.tendermint.crypto.ProofOps} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.tendermint.crypto.ProofOps.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      opsList: jspb.Message.toObjectList(msg.getOpsList(), proto.tendermint.crypto.ProofOp.toObject, includeInstance)\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.tendermint.crypto.ProofOps}\n */\n\n\nproto.tendermint.crypto.ProofOps.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.tendermint.crypto.ProofOps();\n  return proto.tendermint.crypto.ProofOps.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.tendermint.crypto.ProofOps} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.tendermint.crypto.ProofOps}\n */\n\n\nproto.tendermint.crypto.ProofOps.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value = new proto.tendermint.crypto.ProofOp();\n        reader.readMessage(value, proto.tendermint.crypto.ProofOp.deserializeBinaryFromReader);\n        msg.addOps(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.tendermint.crypto.ProofOps.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.tendermint.crypto.ProofOps.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.tendermint.crypto.ProofOps} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.tendermint.crypto.ProofOps.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getOpsList();\n\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(1, f, proto.tendermint.crypto.ProofOp.serializeBinaryToWriter);\n  }\n};\n/**\n * repeated ProofOp ops = 1;\n * @return {!Array<!proto.tendermint.crypto.ProofOp>}\n */\n\n\nproto.tendermint.crypto.ProofOps.prototype.getOpsList = function () {\n  return (\n    /** @type{!Array<!proto.tendermint.crypto.ProofOp>} */\n    jspb.Message.getRepeatedWrapperField(this, proto.tendermint.crypto.ProofOp, 1)\n  );\n};\n/**\n * @param {!Array<!proto.tendermint.crypto.ProofOp>} value\n * @return {!proto.tendermint.crypto.ProofOps} returns this\n*/\n\n\nproto.tendermint.crypto.ProofOps.prototype.setOpsList = function (value) {\n  return jspb.Message.setRepeatedWrapperField(this, 1, value);\n};\n/**\n * @param {!proto.tendermint.crypto.ProofOp=} opt_value\n * @param {number=} opt_index\n * @return {!proto.tendermint.crypto.ProofOp}\n */\n\n\nproto.tendermint.crypto.ProofOps.prototype.addOps = function (opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.tendermint.crypto.ProofOp, opt_index);\n};\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.tendermint.crypto.ProofOps} returns this\n */\n\n\nproto.tendermint.crypto.ProofOps.prototype.clearOpsList = function () {\n  return this.setOpsList([]);\n};\n\ngoog.object.extend(exports, proto.tendermint.crypto);","map":{"version":3,"sources":["/Users/pangp/Band/demo-bandchainjs/client/node_modules/@bandprotocol/bandchain.js/proto/tendermint/crypto/proof_pb.js"],"names":["jspb","require","goog","global","Function","gogoproto_gogo_pb","object","extend","proto","exportSymbol","tendermint","crypto","Proof","opt_data","Message","initialize","repeatedFields_","inherits","DEBUG","COMPILED","displayName","ValueOp","DominoOp","ProofOp","ProofOps","GENERATE_TO_OBJECT","prototype","toObject","opt_includeInstance","includeInstance","msg","f","obj","total","getFieldWithDefault","index","leafHash","getLeafHash_asB64","auntsList","getAuntsList_asB64","$jspbMessageInstance","deserializeBinary","bytes","reader","BinaryReader","deserializeBinaryFromReader","nextField","isEndGroup","field","getFieldNumber","value","readInt64","setTotal","setIndex","readBytes","setLeafHash","addAunts","skipField","serializeBinary","writer","BinaryWriter","serializeBinaryToWriter","getResultBuffer","message","undefined","getTotal","writeInt64","getIndex","getLeafHash_asU8","length","writeBytes","getAuntsList_asU8","writeRepeatedBytes","setProto3IntField","getLeafHash","bytesAsB64","bytesAsU8","setProto3BytesField","getAuntsList","getRepeatedField","bytesListAsB64","bytesListAsU8","setAuntsList","setField","opt_index","addToRepeatedField","clearAuntsList","key","getKey_asB64","proof","getProof","setKey","readMessage","setProof","getKey_asU8","writeMessage","getKey","getWrapperField","setWrapperField","clearProof","hasProof","getField","input","output","readString","setInput","setOutput","writeString","getInput","getOutput","setProto3StringField","type","data","getData_asB64","setType","setData","getType","getData_asU8","getData","opsList","toObjectList","getOpsList","addOps","writeRepeatedMessage","getRepeatedWrapperField","setOpsList","setRepeatedWrapperField","opt_value","addToRepeatedWrapperField","clearOpsList","exports"],"mappings":"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","sourcesContent":["// source: tendermint/crypto/proof.proto\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {missingRequire} reports error on implicit type usages.\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n/* eslint-disable */\n// @ts-nocheck\n\nvar jspb = require('google-protobuf');\nvar goog = jspb;\nvar global = Function('return this')();\n\nvar gogoproto_gogo_pb = require('../../gogoproto/gogo_pb.js');\ngoog.object.extend(proto, gogoproto_gogo_pb);\ngoog.exportSymbol('proto.tendermint.crypto.DominoOp', null, global);\ngoog.exportSymbol('proto.tendermint.crypto.Proof', null, global);\ngoog.exportSymbol('proto.tendermint.crypto.ProofOp', null, global);\ngoog.exportSymbol('proto.tendermint.crypto.ProofOps', null, global);\ngoog.exportSymbol('proto.tendermint.crypto.ValueOp', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.tendermint.crypto.Proof = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.tendermint.crypto.Proof.repeatedFields_, null);\n};\ngoog.inherits(proto.tendermint.crypto.Proof, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.tendermint.crypto.Proof.displayName = 'proto.tendermint.crypto.Proof';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.tendermint.crypto.ValueOp = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.tendermint.crypto.ValueOp, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.tendermint.crypto.ValueOp.displayName = 'proto.tendermint.crypto.ValueOp';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.tendermint.crypto.DominoOp = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.tendermint.crypto.DominoOp, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.tendermint.crypto.DominoOp.displayName = 'proto.tendermint.crypto.DominoOp';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.tendermint.crypto.ProofOp = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.tendermint.crypto.ProofOp, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.tendermint.crypto.ProofOp.displayName = 'proto.tendermint.crypto.ProofOp';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.tendermint.crypto.ProofOps = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.tendermint.crypto.ProofOps.repeatedFields_, null);\n};\ngoog.inherits(proto.tendermint.crypto.ProofOps, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.tendermint.crypto.ProofOps.displayName = 'proto.tendermint.crypto.ProofOps';\n}\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.tendermint.crypto.Proof.repeatedFields_ = [4];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.tendermint.crypto.Proof.prototype.toObject = function(opt_includeInstance) {\n  return proto.tendermint.crypto.Proof.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.tendermint.crypto.Proof} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.tendermint.crypto.Proof.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    total: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    index: jspb.Message.getFieldWithDefault(msg, 2, 0),\n    leafHash: msg.getLeafHash_asB64(),\n    auntsList: msg.getAuntsList_asB64()\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.tendermint.crypto.Proof}\n */\nproto.tendermint.crypto.Proof.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.tendermint.crypto.Proof;\n  return proto.tendermint.crypto.Proof.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.tendermint.crypto.Proof} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.tendermint.crypto.Proof}\n */\nproto.tendermint.crypto.Proof.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setTotal(value);\n      break;\n    case 2:\n      var value = /** @type {number} */ (reader.readInt64());\n      msg.setIndex(value);\n      break;\n    case 3:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setLeafHash(value);\n      break;\n    case 4:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.addAunts(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.tendermint.crypto.Proof.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.tendermint.crypto.Proof.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.tendermint.crypto.Proof} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.tendermint.crypto.Proof.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getTotal();\n  if (f !== 0) {\n    writer.writeInt64(\n      1,\n      f\n    );\n  }\n  f = message.getIndex();\n  if (f !== 0) {\n    writer.writeInt64(\n      2,\n      f\n    );\n  }\n  f = message.getLeafHash_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      3,\n      f\n    );\n  }\n  f = message.getAuntsList_asU8();\n  if (f.length > 0) {\n    writer.writeRepeatedBytes(\n      4,\n      f\n    );\n  }\n};\n\n\n/**\n * optional int64 total = 1;\n * @return {number}\n */\nproto.tendermint.crypto.Proof.prototype.getTotal = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.tendermint.crypto.Proof} returns this\n */\nproto.tendermint.crypto.Proof.prototype.setTotal = function(value) {\n  return jspb.Message.setProto3IntField(this, 1, value);\n};\n\n\n/**\n * optional int64 index = 2;\n * @return {number}\n */\nproto.tendermint.crypto.Proof.prototype.getIndex = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.tendermint.crypto.Proof} returns this\n */\nproto.tendermint.crypto.Proof.prototype.setIndex = function(value) {\n  return jspb.Message.setProto3IntField(this, 2, value);\n};\n\n\n/**\n * optional bytes leaf_hash = 3;\n * @return {!(string|Uint8Array)}\n */\nproto.tendermint.crypto.Proof.prototype.getLeafHash = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, \"\"));\n};\n\n\n/**\n * optional bytes leaf_hash = 3;\n * This is a type-conversion wrapper around `getLeafHash()`\n * @return {string}\n */\nproto.tendermint.crypto.Proof.prototype.getLeafHash_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getLeafHash()));\n};\n\n\n/**\n * optional bytes leaf_hash = 3;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getLeafHash()`\n * @return {!Uint8Array}\n */\nproto.tendermint.crypto.Proof.prototype.getLeafHash_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getLeafHash()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.tendermint.crypto.Proof} returns this\n */\nproto.tendermint.crypto.Proof.prototype.setLeafHash = function(value) {\n  return jspb.Message.setProto3BytesField(this, 3, value);\n};\n\n\n/**\n * repeated bytes aunts = 4;\n * @return {!(Array<!Uint8Array>|Array<string>)}\n */\nproto.tendermint.crypto.Proof.prototype.getAuntsList = function() {\n  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 4));\n};\n\n\n/**\n * repeated bytes aunts = 4;\n * This is a type-conversion wrapper around `getAuntsList()`\n * @return {!Array<string>}\n */\nproto.tendermint.crypto.Proof.prototype.getAuntsList_asB64 = function() {\n  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(\n      this.getAuntsList()));\n};\n\n\n/**\n * repeated bytes aunts = 4;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getAuntsList()`\n * @return {!Array<!Uint8Array>}\n */\nproto.tendermint.crypto.Proof.prototype.getAuntsList_asU8 = function() {\n  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(\n      this.getAuntsList()));\n};\n\n\n/**\n * @param {!(Array<!Uint8Array>|Array<string>)} value\n * @return {!proto.tendermint.crypto.Proof} returns this\n */\nproto.tendermint.crypto.Proof.prototype.setAuntsList = function(value) {\n  return jspb.Message.setField(this, 4, value || []);\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @param {number=} opt_index\n * @return {!proto.tendermint.crypto.Proof} returns this\n */\nproto.tendermint.crypto.Proof.prototype.addAunts = function(value, opt_index) {\n  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.tendermint.crypto.Proof} returns this\n */\nproto.tendermint.crypto.Proof.prototype.clearAuntsList = function() {\n  return this.setAuntsList([]);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.tendermint.crypto.ValueOp.prototype.toObject = function(opt_includeInstance) {\n  return proto.tendermint.crypto.ValueOp.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.tendermint.crypto.ValueOp} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.tendermint.crypto.ValueOp.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    key: msg.getKey_asB64(),\n    proof: (f = msg.getProof()) && proto.tendermint.crypto.Proof.toObject(includeInstance, f)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.tendermint.crypto.ValueOp}\n */\nproto.tendermint.crypto.ValueOp.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.tendermint.crypto.ValueOp;\n  return proto.tendermint.crypto.ValueOp.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.tendermint.crypto.ValueOp} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.tendermint.crypto.ValueOp}\n */\nproto.tendermint.crypto.ValueOp.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setKey(value);\n      break;\n    case 2:\n      var value = new proto.tendermint.crypto.Proof;\n      reader.readMessage(value,proto.tendermint.crypto.Proof.deserializeBinaryFromReader);\n      msg.setProof(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.tendermint.crypto.ValueOp.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.tendermint.crypto.ValueOp.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.tendermint.crypto.ValueOp} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.tendermint.crypto.ValueOp.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getKey_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n  f = message.getProof();\n  if (f != null) {\n    writer.writeMessage(\n      2,\n      f,\n      proto.tendermint.crypto.Proof.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * optional bytes key = 1;\n * @return {!(string|Uint8Array)}\n */\nproto.tendermint.crypto.ValueOp.prototype.getKey = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes key = 1;\n * This is a type-conversion wrapper around `getKey()`\n * @return {string}\n */\nproto.tendermint.crypto.ValueOp.prototype.getKey_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getKey()));\n};\n\n\n/**\n * optional bytes key = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getKey()`\n * @return {!Uint8Array}\n */\nproto.tendermint.crypto.ValueOp.prototype.getKey_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getKey()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.tendermint.crypto.ValueOp} returns this\n */\nproto.tendermint.crypto.ValueOp.prototype.setKey = function(value) {\n  return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n\n/**\n * optional Proof proof = 2;\n * @return {?proto.tendermint.crypto.Proof}\n */\nproto.tendermint.crypto.ValueOp.prototype.getProof = function() {\n  return /** @type{?proto.tendermint.crypto.Proof} */ (\n    jspb.Message.getWrapperField(this, proto.tendermint.crypto.Proof, 2));\n};\n\n\n/**\n * @param {?proto.tendermint.crypto.Proof|undefined} value\n * @return {!proto.tendermint.crypto.ValueOp} returns this\n*/\nproto.tendermint.crypto.ValueOp.prototype.setProof = function(value) {\n  return jspb.Message.setWrapperField(this, 2, value);\n};\n\n\n/**\n * Clears the message field making it undefined.\n * @return {!proto.tendermint.crypto.ValueOp} returns this\n */\nproto.tendermint.crypto.ValueOp.prototype.clearProof = function() {\n  return this.setProof(undefined);\n};\n\n\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\nproto.tendermint.crypto.ValueOp.prototype.hasProof = function() {\n  return jspb.Message.getField(this, 2) != null;\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.tendermint.crypto.DominoOp.prototype.toObject = function(opt_includeInstance) {\n  return proto.tendermint.crypto.DominoOp.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.tendermint.crypto.DominoOp} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.tendermint.crypto.DominoOp.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    key: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n    input: jspb.Message.getFieldWithDefault(msg, 2, \"\"),\n    output: jspb.Message.getFieldWithDefault(msg, 3, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.tendermint.crypto.DominoOp}\n */\nproto.tendermint.crypto.DominoOp.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.tendermint.crypto.DominoOp;\n  return proto.tendermint.crypto.DominoOp.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.tendermint.crypto.DominoOp} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.tendermint.crypto.DominoOp}\n */\nproto.tendermint.crypto.DominoOp.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setKey(value);\n      break;\n    case 2:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setInput(value);\n      break;\n    case 3:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setOutput(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.tendermint.crypto.DominoOp.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.tendermint.crypto.DominoOp.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.tendermint.crypto.DominoOp} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.tendermint.crypto.DominoOp.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getKey();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f = message.getInput();\n  if (f.length > 0) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n  f = message.getOutput();\n  if (f.length > 0) {\n    writer.writeString(\n      3,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string key = 1;\n * @return {string}\n */\nproto.tendermint.crypto.DominoOp.prototype.getKey = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.tendermint.crypto.DominoOp} returns this\n */\nproto.tendermint.crypto.DominoOp.prototype.setKey = function(value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n/**\n * optional string input = 2;\n * @return {string}\n */\nproto.tendermint.crypto.DominoOp.prototype.getInput = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.tendermint.crypto.DominoOp} returns this\n */\nproto.tendermint.crypto.DominoOp.prototype.setInput = function(value) {\n  return jspb.Message.setProto3StringField(this, 2, value);\n};\n\n\n/**\n * optional string output = 3;\n * @return {string}\n */\nproto.tendermint.crypto.DominoOp.prototype.getOutput = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.tendermint.crypto.DominoOp} returns this\n */\nproto.tendermint.crypto.DominoOp.prototype.setOutput = function(value) {\n  return jspb.Message.setProto3StringField(this, 3, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.tendermint.crypto.ProofOp.prototype.toObject = function(opt_includeInstance) {\n  return proto.tendermint.crypto.ProofOp.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.tendermint.crypto.ProofOp} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.tendermint.crypto.ProofOp.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    type: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n    key: msg.getKey_asB64(),\n    data: msg.getData_asB64()\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.tendermint.crypto.ProofOp}\n */\nproto.tendermint.crypto.ProofOp.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.tendermint.crypto.ProofOp;\n  return proto.tendermint.crypto.ProofOp.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.tendermint.crypto.ProofOp} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.tendermint.crypto.ProofOp}\n */\nproto.tendermint.crypto.ProofOp.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setType(value);\n      break;\n    case 2:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setKey(value);\n      break;\n    case 3:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setData(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.tendermint.crypto.ProofOp.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.tendermint.crypto.ProofOp.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.tendermint.crypto.ProofOp} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.tendermint.crypto.ProofOp.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getType();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n  f = message.getKey_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      2,\n      f\n    );\n  }\n  f = message.getData_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      3,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string type = 1;\n * @return {string}\n */\nproto.tendermint.crypto.ProofOp.prototype.getType = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.tendermint.crypto.ProofOp} returns this\n */\nproto.tendermint.crypto.ProofOp.prototype.setType = function(value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n/**\n * optional bytes key = 2;\n * @return {!(string|Uint8Array)}\n */\nproto.tendermint.crypto.ProofOp.prototype.getKey = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/**\n * optional bytes key = 2;\n * This is a type-conversion wrapper around `getKey()`\n * @return {string}\n */\nproto.tendermint.crypto.ProofOp.prototype.getKey_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getKey()));\n};\n\n\n/**\n * optional bytes key = 2;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getKey()`\n * @return {!Uint8Array}\n */\nproto.tendermint.crypto.ProofOp.prototype.getKey_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getKey()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.tendermint.crypto.ProofOp} returns this\n */\nproto.tendermint.crypto.ProofOp.prototype.setKey = function(value) {\n  return jspb.Message.setProto3BytesField(this, 2, value);\n};\n\n\n/**\n * optional bytes data = 3;\n * @return {!(string|Uint8Array)}\n */\nproto.tendermint.crypto.ProofOp.prototype.getData = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, \"\"));\n};\n\n\n/**\n * optional bytes data = 3;\n * This is a type-conversion wrapper around `getData()`\n * @return {string}\n */\nproto.tendermint.crypto.ProofOp.prototype.getData_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getData()));\n};\n\n\n/**\n * optional bytes data = 3;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getData()`\n * @return {!Uint8Array}\n */\nproto.tendermint.crypto.ProofOp.prototype.getData_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getData()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.tendermint.crypto.ProofOp} returns this\n */\nproto.tendermint.crypto.ProofOp.prototype.setData = function(value) {\n  return jspb.Message.setProto3BytesField(this, 3, value);\n};\n\n\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.tendermint.crypto.ProofOps.repeatedFields_ = [1];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.tendermint.crypto.ProofOps.prototype.toObject = function(opt_includeInstance) {\n  return proto.tendermint.crypto.ProofOps.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.tendermint.crypto.ProofOps} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.tendermint.crypto.ProofOps.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    opsList: jspb.Message.toObjectList(msg.getOpsList(),\n    proto.tendermint.crypto.ProofOp.toObject, includeInstance)\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.tendermint.crypto.ProofOps}\n */\nproto.tendermint.crypto.ProofOps.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.tendermint.crypto.ProofOps;\n  return proto.tendermint.crypto.ProofOps.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.tendermint.crypto.ProofOps} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.tendermint.crypto.ProofOps}\n */\nproto.tendermint.crypto.ProofOps.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = new proto.tendermint.crypto.ProofOp;\n      reader.readMessage(value,proto.tendermint.crypto.ProofOp.deserializeBinaryFromReader);\n      msg.addOps(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.tendermint.crypto.ProofOps.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.tendermint.crypto.ProofOps.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.tendermint.crypto.ProofOps} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.tendermint.crypto.ProofOps.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getOpsList();\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(\n      1,\n      f,\n      proto.tendermint.crypto.ProofOp.serializeBinaryToWriter\n    );\n  }\n};\n\n\n/**\n * repeated ProofOp ops = 1;\n * @return {!Array<!proto.tendermint.crypto.ProofOp>}\n */\nproto.tendermint.crypto.ProofOps.prototype.getOpsList = function() {\n  return /** @type{!Array<!proto.tendermint.crypto.ProofOp>} */ (\n    jspb.Message.getRepeatedWrapperField(this, proto.tendermint.crypto.ProofOp, 1));\n};\n\n\n/**\n * @param {!Array<!proto.tendermint.crypto.ProofOp>} value\n * @return {!proto.tendermint.crypto.ProofOps} returns this\n*/\nproto.tendermint.crypto.ProofOps.prototype.setOpsList = function(value) {\n  return jspb.Message.setRepeatedWrapperField(this, 1, value);\n};\n\n\n/**\n * @param {!proto.tendermint.crypto.ProofOp=} opt_value\n * @param {number=} opt_index\n * @return {!proto.tendermint.crypto.ProofOp}\n */\nproto.tendermint.crypto.ProofOps.prototype.addOps = function(opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.tendermint.crypto.ProofOp, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.tendermint.crypto.ProofOps} returns this\n */\nproto.tendermint.crypto.ProofOps.prototype.clearOpsList = function() {\n  return this.setOpsList([]);\n};\n\n\ngoog.object.extend(exports, proto.tendermint.crypto);\n"]},"metadata":{},"sourceType":"script"}