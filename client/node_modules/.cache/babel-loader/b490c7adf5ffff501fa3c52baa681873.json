{"ast":null,"code":"import { Client, Wallet, Obi, Message, Coin, Transaction, Fee } from \"@bandprotocol/bandchain.js\";\nimport moment from \"moment\";\nconst grpcUrl = \"https://laozi-testnet4.bandchain.org/grpc-web\";\nconst client = new Client(grpcUrl);\nexport function getWallet(mnemonic) {\n  const {\n    PrivateKey\n  } = Wallet;\n  const privateKey = PrivateKey.fromMnemonic(mnemonic);\n  const pubkey = privateKey.toPubkey();\n  const sender = pubkey.toAddress().toAccBech32();\n  return {\n    sender,\n    privateKey,\n    pubkey\n  };\n}\nexport async function makeRequest(symbols, multiplier, feeInput, prepareGas, executeGas) {\n  symbols = symbols.toUpperCase().replace(/\\s/g, \"\").split(\",\"); // Step 1: Import a private key for signing transaction\n\n  const {\n    PrivateKey\n  } = Wallet;\n  const mnemonic = \"s\";\n  const privateKey = PrivateKey.fromMnemonic(mnemonic);\n  const pubkey = privateKey.toPubkey();\n  const sender = pubkey.toAddress().toAccBech32(); // Step 2.1: Prepare oracle request's properties\n\n  const obi = new Obi(\"{symbols:[string],multiplier:u64}/{rates:[u64]}\");\n  const calldata = obi.encodeInput({\n    symbols: symbols,\n    multiplier: multiplier\n  });\n  const oracleScriptId = 37;\n  const askCount = 2;\n  const minCount = 1;\n  const clientId = \"from_bandchain.js\";\n  let feeLimit = new Coin();\n  feeLimit.setDenom(\"uband\");\n  feeLimit.setAmount(feeInput); // Step 2.2: Create an oracle request message\n\n  const requestMessage = new Message.MsgRequestData(oracleScriptId, calldata, askCount, minCount, clientId, sender, [feeLimit], prepareGas, executeGas);\n  let feeCoin = new Coin();\n  feeCoin.setDenom(\"uband\");\n  feeCoin.setAmount(\"50000\"); // Step 3.1: Construct a transaction\n\n  const fee = new Fee();\n  fee.setAmountList([feeCoin]);\n  fee.setGasLimit(10000000);\n  const chainId = await client.getChainId();\n  const txn = new Transaction();\n  txn.withMessages(requestMessage);\n  await txn.withSender(client, sender);\n  txn.withChainId(chainId);\n  txn.withFee(fee);\n  txn.withMemo(\"Test Send Oracle Request from Babybun\"); // Step 3.2: Sign the transaction using the private key\n\n  const signDoc = txn.getSignDoc(pubkey);\n  const signature = privateKey.sign(signDoc);\n  const txRawBytes = txn.getTxData(signature, pubkey); // Step 4: Broadcast the transaction\n\n  const sendTx = await client.sendTxBlockMode(txRawBytes);\n  console.log(sendTx);\n  return sendTx;\n}\nexport const sendCoin = async (address, amount, privateKey, pubkey, sender, action = \"send\", chainId = \"band-laozi-testnet4\") => {\n  const {\n    MsgSend,\n    MsgDelegate\n  } = Message;\n  const receiver = address;\n  const sendAmount = new Coin();\n  sendAmount.setDenom(\"uband\");\n  sendAmount.setAmount((amount * 1e6).toString());\n  const msg = action === \"delegate\" ? new MsgDelegate(sender, receiver, sendAmount) : new MsgSend(sender, receiver, [sendAmount]);\n  const account = await client.getAccount(sender);\n  console.log(account);\n  let feeCoin = new Coin();\n  feeCoin.setDenom(\"uband\");\n  feeCoin.setAmount(\"1000\");\n  const fee = new Fee();\n  fee.setAmountList([feeCoin]);\n  fee.setGasLimit(1000000);\n  const tx = new Transaction().withMessages(msg).withAccountNum(account.accountNumber).withSequence(account.sequence).withChainId(chainId).withFee(fee); // Step 4 sign the transaction\n\n  const txSignData = tx.getSignDoc(pubkey);\n  const signature = privateKey.sign(txSignData);\n  const signedTx = tx.getTxData(signature, pubkey); // Step 5 send the transaction\n\n  const response = await client.sendTxBlockMode(signedTx);\n  return response;\n};\nexport const sendIBC = async (address, amount, privateKey, pubkey, sender) => {\n  const {\n    MsgTransfer\n  } = Message; // Here we use different message type, which is MsgSend\n\n  const receiver = address;\n  const sendAmount = new Coin();\n  sendAmount.setDenom(\"uband\");\n  sendAmount.setAmount((amount * 1e6).toString());\n  const timeoutTimestamp = moment().unix() * 1e9;\n  const msg = new MsgTransfer(\"transfer\", \"channel-25\", sender, receiver, sendAmount, timeoutTimestamp); // Step 3.2 constructs a transaction\n\n  const account = await client.getAccount(sender);\n  let feeCoin = new Coin();\n  feeCoin.setDenom(\"uband\");\n  feeCoin.setAmount(\"1000\");\n  const fee = new Fee();\n  fee.setAmountList([feeCoin]);\n  fee.setGasLimit(1000000);\n  const tx = new Transaction().withMessages(msg).withAccountNum(account.accountNumber).withSequence(account.sequence).withChainId(\"band-laozi-testnet4\").withFee(fee); // Step 4 sign the transaction\n\n  const txSignData = tx.getSignDoc(pubkey);\n  const signature = privateKey.sign(txSignData);\n  const signedTx = tx.getTxData(signature, pubkey); // Step 5 send the transaction\n\n  const response = await client.sendTxBlockMode(signedTx);\n  return response;\n};\nexport const createDataSource = async (title, code, sender, owner, treasury, privateKey, pubkey, ...desc) => {\n  const {\n    MsgCreateDataSource\n  } = Message;\n  let feeCoin = new Coin();\n  feeCoin.setDenom(\"uband\");\n  feeCoin.setAmount(\"1000\");\n  const msg = MsgCreateDataSource(title, code, [feeCoin], treasury, owner, sender); // const msg = new Message.MsgCreateDataSource(title, code, [feeCoin], treasury, owner, sender);\n\n  const fee = new Fee();\n  fee.setAmountList([feeCoin]);\n  fee.setGasLimit(1000000);\n  const account = await client.getAccount(sender);\n  const tx = new Transaction().withMessages(msg).withAccountNum(account.accountNumber).withSequence(account.sequence).withChainId(\"band-laozi-testnet4\").withFee(fee); // Step 4 sign the transaction\n\n  const txSignData = tx.getSignDoc(pubkey);\n  const signature = privateKey.sign(txSignData);\n  const signedTx = tx.getTxData(signature, pubkey); // Step 5 send the transaction\n\n  const response = await client.sendTxBlockMode(signedTx);\n  return response;\n};\nexport const editDataSource = async (id, code, sender, owner, privateKey, pubkey, ...args) => {\n  let feeCoin = new Coin();\n  feeCoin.setDenom(\"uband\");\n  feeCoin.setAmount(\"1000\");\n  const msg = new Message.MsgEditDataSource(parseInt(id), code, [feeCoin], owner, sender);\n  const fee = new Fee();\n  fee.setAmountList([feeCoin]);\n  fee.setGasLimit(1000000);\n  const account = await client.getAccount(sender);\n  const tx = new Transaction().withMessages(msg).withAccountNum(account.accountNumber).withSequence(account.sequence).withChainId(\"band-laozi-testnet4\").withFee(fee); // Step 4 sign the transaction\n\n  const txSignData = tx.getSignDoc(pubkey);\n  const signature = privateKey.sign(txSignData);\n  const signedTx = tx.getTxData(signature, pubkey); // Step 5 send the transaction\n\n  const response = await client.sendTxBlockMode(signedTx);\n  return response;\n};","map":{"version":3,"sources":["/Users/pangp/Band/demo-bandchainjs/src/band.js"],"names":["Client","Wallet","Obi","Message","Coin","Transaction","Fee","moment","grpcUrl","client","getWallet","mnemonic","PrivateKey","privateKey","fromMnemonic","pubkey","toPubkey","sender","toAddress","toAccBech32","makeRequest","symbols","multiplier","feeInput","prepareGas","executeGas","toUpperCase","replace","split","obi","calldata","encodeInput","oracleScriptId","askCount","minCount","clientId","feeLimit","setDenom","setAmount","requestMessage","MsgRequestData","feeCoin","fee","setAmountList","setGasLimit","chainId","getChainId","txn","withMessages","withSender","withChainId","withFee","withMemo","signDoc","getSignDoc","signature","sign","txRawBytes","getTxData","sendTx","sendTxBlockMode","console","log","sendCoin","address","amount","action","MsgSend","MsgDelegate","receiver","sendAmount","toString","msg","account","getAccount","tx","withAccountNum","accountNumber","withSequence","sequence","txSignData","signedTx","response","sendIBC","MsgTransfer","timeoutTimestamp","unix","createDataSource","title","code","owner","treasury","desc","MsgCreateDataSource","editDataSource","id","args","MsgEditDataSource","parseInt"],"mappings":"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","sourcesContent":["import { Client, Wallet, Obi, Message, Coin, Transaction, Fee } from \"@bandprotocol/bandchain.js\";\nimport moment from \"moment\";\n\nconst grpcUrl = \"https://laozi-testnet4.bandchain.org/grpc-web\";\nconst client = new Client(grpcUrl);\n\nexport function getWallet(mnemonic) {\n  const { PrivateKey } = Wallet;\n  const privateKey = PrivateKey.fromMnemonic(mnemonic);\n  const pubkey = privateKey.toPubkey();\n  const sender = pubkey.toAddress().toAccBech32();\n  return { sender, privateKey, pubkey };\n}\n\nexport async function makeRequest(symbols, multiplier, feeInput, prepareGas, executeGas) {\n  symbols = symbols.toUpperCase().replace(/\\s/g, \"\").split(\",\");\n\n  // Step 1: Import a private key for signing transaction\n  const { PrivateKey } = Wallet;\n  const mnemonic = \"s\";\n  const privateKey = PrivateKey.fromMnemonic(mnemonic);\n  const pubkey = privateKey.toPubkey();\n  const sender = pubkey.toAddress().toAccBech32();\n\n  // Step 2.1: Prepare oracle request's properties\n  const obi = new Obi(\"{symbols:[string],multiplier:u64}/{rates:[u64]}\");\n  const calldata = obi.encodeInput({ symbols: symbols, multiplier: multiplier });\n\n  const oracleScriptId = 37;\n  const askCount = 2;\n  const minCount = 1;\n  const clientId = \"from_bandchain.js\";\n\n  let feeLimit = new Coin();\n  feeLimit.setDenom(\"uband\");\n  feeLimit.setAmount(feeInput);\n\n  // Step 2.2: Create an oracle request message\n  const requestMessage = new Message.MsgRequestData(\n    oracleScriptId,\n    calldata,\n    askCount,\n    minCount,\n    clientId,\n    sender,\n    [feeLimit],\n    prepareGas,\n    executeGas\n  );\n\n  let feeCoin = new Coin();\n  feeCoin.setDenom(\"uband\");\n  feeCoin.setAmount(\"50000\");\n\n  // Step 3.1: Construct a transaction\n  const fee = new Fee();\n  fee.setAmountList([feeCoin]);\n  fee.setGasLimit(10000000);\n\n  const chainId = await client.getChainId();\n  const txn = new Transaction();\n  txn.withMessages(requestMessage);\n  await txn.withSender(client, sender);\n  txn.withChainId(chainId);\n  txn.withFee(fee);\n  txn.withMemo(\"Test Send Oracle Request from Babybun\");\n\n  // Step 3.2: Sign the transaction using the private key\n  const signDoc = txn.getSignDoc(pubkey);\n  const signature = privateKey.sign(signDoc);\n\n  const txRawBytes = txn.getTxData(signature, pubkey);\n\n  // Step 4: Broadcast the transaction\n  const sendTx = await client.sendTxBlockMode(txRawBytes);\n  console.log(sendTx);\n  return sendTx;\n}\n\nexport const sendCoin = async (\n  address,\n  amount,\n  privateKey,\n  pubkey,\n  sender,\n  action = \"send\",\n  chainId = \"band-laozi-testnet4\"\n) => {\n  const { MsgSend, MsgDelegate } = Message;\n\n  const receiver = address;\n  const sendAmount = new Coin();\n  sendAmount.setDenom(\"uband\");\n  sendAmount.setAmount((amount * 1e6).toString());\n\n  const msg =\n    action === \"delegate\"\n      ? new MsgDelegate(sender, receiver, sendAmount)\n      : new MsgSend(sender, receiver, [sendAmount]);\n\n  const account = await client.getAccount(sender);\n  console.log(account);\n\n  let feeCoin = new Coin();\n  feeCoin.setDenom(\"uband\");\n  feeCoin.setAmount(\"1000\");\n\n  const fee = new Fee();\n  fee.setAmountList([feeCoin]);\n  fee.setGasLimit(1000000);\n  const tx = new Transaction()\n    .withMessages(msg)\n    .withAccountNum(account.accountNumber)\n    .withSequence(account.sequence)\n    .withChainId(chainId)\n    .withFee(fee);\n\n  // Step 4 sign the transaction\n  const txSignData = tx.getSignDoc(pubkey);\n  const signature = privateKey.sign(txSignData);\n  const signedTx = tx.getTxData(signature, pubkey);\n\n  // Step 5 send the transaction\n  const response = await client.sendTxBlockMode(signedTx);\n\n  return response;\n};\n\nexport const sendIBC = async (address, amount, privateKey, pubkey, sender) => {\n  const { MsgTransfer } = Message;\n\n  // Here we use different message type, which is MsgSend\n  const receiver = address;\n  const sendAmount = new Coin();\n  sendAmount.setDenom(\"uband\");\n  sendAmount.setAmount((amount * 1e6).toString());\n  const timeoutTimestamp = moment().unix() * 1e9;\n\n  const msg = new MsgTransfer(\n    \"transfer\",\n    \"channel-25\",\n    sender,\n    receiver,\n    sendAmount,\n    timeoutTimestamp\n  );\n\n  // Step 3.2 constructs a transaction\n  const account = await client.getAccount(sender);\n\n  let feeCoin = new Coin();\n  feeCoin.setDenom(\"uband\");\n  feeCoin.setAmount(\"1000\");\n\n  const fee = new Fee();\n  fee.setAmountList([feeCoin]);\n  fee.setGasLimit(1000000);\n  const tx = new Transaction()\n    .withMessages(msg)\n    .withAccountNum(account.accountNumber)\n    .withSequence(account.sequence)\n    .withChainId(\"band-laozi-testnet4\")\n    .withFee(fee);\n\n  // Step 4 sign the transaction\n  const txSignData = tx.getSignDoc(pubkey);\n  const signature = privateKey.sign(txSignData);\n  const signedTx = tx.getTxData(signature, pubkey);\n\n  // Step 5 send the transaction\n  const response = await client.sendTxBlockMode(signedTx);\n\n  return response;\n};\n\nexport const createDataSource = async (\n  title,\n  code,\n  sender,\n  owner,\n  treasury,\n  privateKey,\n  pubkey,\n  ...desc\n) => {\n  const { MsgCreateDataSource } = Message;\n  let feeCoin = new Coin();\n  feeCoin.setDenom(\"uband\");\n  feeCoin.setAmount(\"1000\");\n\n  const msg = MsgCreateDataSource(title, code, [feeCoin], treasury, owner, sender);\n\n  // const msg = new Message.MsgCreateDataSource(title, code, [feeCoin], treasury, owner, sender);\n\n  const fee = new Fee();\n  fee.setAmountList([feeCoin]);\n  fee.setGasLimit(1000000);\n\n  const account = await client.getAccount(sender);\n\n  const tx = new Transaction()\n    .withMessages(msg)\n    .withAccountNum(account.accountNumber)\n    .withSequence(account.sequence)\n    .withChainId(\"band-laozi-testnet4\")\n    .withFee(fee);\n\n  // Step 4 sign the transaction\n  const txSignData = tx.getSignDoc(pubkey);\n  const signature = privateKey.sign(txSignData);\n  const signedTx = tx.getTxData(signature, pubkey);\n\n  // Step 5 send the transaction\n  const response = await client.sendTxBlockMode(signedTx);\n\n  return response;\n};\n\nexport const editDataSource = async (id, code, sender, owner, privateKey, pubkey, ...args) => {\n  let feeCoin = new Coin();\n  feeCoin.setDenom(\"uband\");\n  feeCoin.setAmount(\"1000\");\n\n  const msg = new Message.MsgEditDataSource(parseInt(id), code, [feeCoin], owner, sender);\n\n  const fee = new Fee();\n  fee.setAmountList([feeCoin]);\n  fee.setGasLimit(1000000);\n\n  const account = await client.getAccount(sender);\n\n  const tx = new Transaction()\n    .withMessages(msg)\n    .withAccountNum(account.accountNumber)\n    .withSequence(account.sequence)\n    .withChainId(\"band-laozi-testnet4\")\n    .withFee(fee);\n\n  // Step 4 sign the transaction\n  const txSignData = tx.getSignDoc(pubkey);\n  const signature = privateKey.sign(txSignData);\n  const signedTx = tx.getTxData(signature, pubkey);\n\n  // Step 5 send the transaction\n  const response = await client.sendTxBlockMode(signedTx);\n\n  return response;\n};\n"]},"metadata":{},"sourceType":"module"}