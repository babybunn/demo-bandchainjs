{"ast":null,"code":"var _jsxFileName = \"/Users/pangp/Band/demo-bandchainjs/src/routes/Delegations.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Routes, Route } from \"react-router-dom\";\nimport { gql, useLazyQuery } from \"@apollo/client\";\nimport { SingleDelegator } from \"../components/SingleDelegator\";\nimport DelegatorDetails from \"./DelegatorDetails\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Delegations() {\n  _s();\n\n  const wallet = useSelector(state => state.wallet);\n  useEffect(() => {\n    getDelegators({\n      variables: {\n        address: wallet.address\n      }\n    });\n  }, []);\n  const GET_DELEGATIONS = gql`\n    query GetAccountDelegations($address: String!) {\n      delegations_view(where: { delegator_address: { _eq: $address } }) {\n        amount\n        moniker\n        reward\n        operator_address\n        delegator_address\n      }\n    }\n  `; //   const { loading, error, data } = useQuery(GET_DELEGATIONS);\n\n  const [getDelegators, {\n    loading,\n    error,\n    data\n  }] = useLazyQuery(GET_DELEGATIONS);\n  return /*#__PURE__*/_jsxDEV(Routes, {\n    children: /*#__PURE__*/_jsxDEV(Route, {\n      path: \"delegations\",\n      element: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-2xl mb-5\",\n          children: /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Delegations\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex flex-wrap -mx-2\",\n          children: loading ? \"Loading...\" : error ? `Error! ${error.message}` : data ? data.delegations_view.map((delegator, ind) => {\n            return /*#__PURE__*/_jsxDEV(SingleDelegator, {\n              delegator: delegator\n            }, ind, false, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 28\n            }, this);\n          }) : \"0 Validator\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this),\n      children: /*#__PURE__*/_jsxDEV(Route, {\n        path: \":delegator\",\n        element: /*#__PURE__*/_jsxDEV(DelegatorDetails, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 43\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Delegations, \"189OZvf3XjNO760voBr+zaFbBVg=\", false, function () {\n  return [useSelector, useLazyQuery];\n});\n\n_c = Delegations;\n\nvar _c;\n\n$RefreshReg$(_c, \"Delegations\");","map":{"version":3,"sources":["/Users/pangp/Band/demo-bandchainjs/src/routes/Delegations.js"],"names":["useState","useEffect","useSelector","Routes","Route","gql","useLazyQuery","SingleDelegator","DelegatorDetails","Delegations","wallet","state","getDelegators","variables","address","GET_DELEGATIONS","loading","error","data","message","delegations_view","map","delegator","ind"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,MAAT,EAAiBC,KAAjB,QAA8B,kBAA9B;AACA,SAASC,GAAT,EAAcC,YAAd,QAAkC,gBAAlC;AACA,SAASC,eAAT,QAAgC,+BAAhC;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;;AAEA,eAAe,SAASC,WAAT,GAAuB;AAAA;;AACpC,QAAMC,MAAM,GAAGR,WAAW,CAAES,KAAD,IAAWA,KAAK,CAACD,MAAlB,CAA1B;AACAT,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,aAAa,CAAC;AAAEC,MAAAA,SAAS,EAAE;AAAEC,QAAAA,OAAO,EAAEJ,MAAM,CAACI;AAAlB;AAAb,KAAD,CAAb;AACD,GAFQ,EAEN,EAFM,CAAT;AAIA,QAAMC,eAAe,GAAGV,GAAI;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAVE,CANoC,CAkBpC;;AACA,QAAM,CAACO,aAAD,EAAgB;AAAEI,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,GAAhB,IAA4CZ,YAAY,CAACS,eAAD,CAA9D;AAEA,sBACE,QAAC,MAAD;AAAA,2BACE,QAAC,KAAD;AACE,MAAA,IAAI,EAAC,aADP;AAEE,MAAA,OAAO,eACL;AAAA,gCACE;AAAI,UAAA,SAAS,EAAC,eAAd;AAAA,iCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF,eAIE;AAAK,UAAA,SAAS,EAAC,sBAAf;AAAA,oBACGC,OAAO,GACJ,YADI,GAEJC,KAAK,GACJ,UAASA,KAAK,CAACE,OAAQ,EADnB,GAELD,IAAI,GACJA,IAAI,CAACE,gBAAL,CAAsBC,GAAtB,CAA0B,CAACC,SAAD,EAAYC,GAAZ,KAAoB;AAC5C,gCAAO,QAAC,eAAD;AAAiB,cAAA,SAAS,EAAED;AAA5B,eAA4CC,GAA5C;AAAA;AAAA;AAAA;AAAA,oBAAP;AACD,WAFD,CADI,GAIJ;AATN;AAAA;AAAA;AAAA;AAAA,gBAJF;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA,6BAqBE,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,YAAZ;AAAyB,QAAA,OAAO,eAAE,QAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAlC;AAAA;AAAA;AAAA;AAAA;AArBF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AA2BD;;GAhDuBd,W;UACPP,W,EAkBmCI,Y;;;KAnB5BG,W","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Routes, Route } from \"react-router-dom\";\nimport { gql, useLazyQuery } from \"@apollo/client\";\nimport { SingleDelegator } from \"../components/SingleDelegator\";\nimport DelegatorDetails from \"./DelegatorDetails\";\n\nexport default function Delegations() {\n  const wallet = useSelector((state) => state.wallet);\n  useEffect(() => {\n    getDelegators({ variables: { address: wallet.address } });\n  }, []);\n\n  const GET_DELEGATIONS = gql`\n    query GetAccountDelegations($address: String!) {\n      delegations_view(where: { delegator_address: { _eq: $address } }) {\n        amount\n        moniker\n        reward\n        operator_address\n        delegator_address\n      }\n    }\n  `;\n\n  //   const { loading, error, data } = useQuery(GET_DELEGATIONS);\n  const [getDelegators, { loading, error, data }] = useLazyQuery(GET_DELEGATIONS);\n\n  return (\n    <Routes>\n      <Route\n        path=\"delegations\"\n        element={\n          <div>\n            <h2 className=\"text-2xl mb-5\">\n              <strong>Delegations</strong>\n            </h2>\n            <div className=\"flex flex-wrap -mx-2\">\n              {loading\n                ? \"Loading...\"\n                : error\n                ? `Error! ${error.message}`\n                : data\n                ? data.delegations_view.map((delegator, ind) => {\n                    return <SingleDelegator delegator={delegator} key={ind} />;\n                  })\n                : \"0 Validator\"}\n            </div>\n          </div>\n        }\n      >\n        <Route path=\":delegator\" element={<DelegatorDetails />} />\n      </Route>\n    </Routes>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}