{"ast":null,"code":"// source: cosmos/crypto/multisig/v1beta1/multisig.proto\n\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {missingRequire} reports error on implicit type usages.\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n\n/* eslint-disable */\n// @ts-nocheck\nvar jspb = require('google-protobuf');\n\nvar goog = jspb;\nvar global = Function('return this')();\n\nvar gogoproto_gogo_pb = require('../../../../gogoproto/gogo_pb.js');\n\ngoog.object.extend(proto, gogoproto_gogo_pb);\ngoog.exportSymbol('proto.cosmos.crypto.multisig.v1beta1.CompactBitArray', null, global);\ngoog.exportSymbol('proto.cosmos.crypto.multisig.v1beta1.MultiSignature', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\nproto.cosmos.crypto.multisig.v1beta1.MultiSignature = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.cosmos.crypto.multisig.v1beta1.MultiSignature.repeatedFields_, null);\n};\n\ngoog.inherits(proto.cosmos.crypto.multisig.v1beta1.MultiSignature, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.cosmos.crypto.multisig.v1beta1.MultiSignature.displayName = 'proto.cosmos.crypto.multisig.v1beta1.MultiSignature';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.cosmos.crypto.multisig.v1beta1.CompactBitArray = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.cosmos.crypto.multisig.v1beta1.CompactBitArray, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.cosmos.crypto.multisig.v1beta1.CompactBitArray.displayName = 'proto.cosmos.crypto.multisig.v1beta1.CompactBitArray';\n}\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\n\n\nproto.cosmos.crypto.multisig.v1beta1.MultiSignature.repeatedFields_ = [1];\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.cosmos.crypto.multisig.v1beta1.MultiSignature.prototype.toObject = function (opt_includeInstance) {\n    return proto.cosmos.crypto.multisig.v1beta1.MultiSignature.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.cosmos.crypto.multisig.v1beta1.MultiSignature} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.cosmos.crypto.multisig.v1beta1.MultiSignature.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      signaturesList: msg.getSignaturesList_asB64()\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.cosmos.crypto.multisig.v1beta1.MultiSignature}\n */\n\n\nproto.cosmos.crypto.multisig.v1beta1.MultiSignature.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.cosmos.crypto.multisig.v1beta1.MultiSignature();\n  return proto.cosmos.crypto.multisig.v1beta1.MultiSignature.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.cosmos.crypto.multisig.v1beta1.MultiSignature} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.cosmos.crypto.multisig.v1beta1.MultiSignature}\n */\n\n\nproto.cosmos.crypto.multisig.v1beta1.MultiSignature.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {!Uint8Array} */\n        reader.readBytes();\n        msg.addSignatures(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.cosmos.crypto.multisig.v1beta1.MultiSignature.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.cosmos.crypto.multisig.v1beta1.MultiSignature.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.cosmos.crypto.multisig.v1beta1.MultiSignature} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.cosmos.crypto.multisig.v1beta1.MultiSignature.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getSignaturesList_asU8();\n\n  if (f.length > 0) {\n    writer.writeRepeatedBytes(1, f);\n  }\n};\n/**\n * repeated bytes signatures = 1;\n * @return {!(Array<!Uint8Array>|Array<string>)}\n */\n\n\nproto.cosmos.crypto.multisig.v1beta1.MultiSignature.prototype.getSignaturesList = function () {\n  return (\n    /** @type {!(Array<!Uint8Array>|Array<string>)} */\n    jspb.Message.getRepeatedField(this, 1)\n  );\n};\n/**\n * repeated bytes signatures = 1;\n * This is a type-conversion wrapper around `getSignaturesList()`\n * @return {!Array<string>}\n */\n\n\nproto.cosmos.crypto.multisig.v1beta1.MultiSignature.prototype.getSignaturesList_asB64 = function () {\n  return (\n    /** @type {!Array<string>} */\n    jspb.Message.bytesListAsB64(this.getSignaturesList())\n  );\n};\n/**\n * repeated bytes signatures = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getSignaturesList()`\n * @return {!Array<!Uint8Array>}\n */\n\n\nproto.cosmos.crypto.multisig.v1beta1.MultiSignature.prototype.getSignaturesList_asU8 = function () {\n  return (\n    /** @type {!Array<!Uint8Array>} */\n    jspb.Message.bytesListAsU8(this.getSignaturesList())\n  );\n};\n/**\n * @param {!(Array<!Uint8Array>|Array<string>)} value\n * @return {!proto.cosmos.crypto.multisig.v1beta1.MultiSignature} returns this\n */\n\n\nproto.cosmos.crypto.multisig.v1beta1.MultiSignature.prototype.setSignaturesList = function (value) {\n  return jspb.Message.setField(this, 1, value || []);\n};\n/**\n * @param {!(string|Uint8Array)} value\n * @param {number=} opt_index\n * @return {!proto.cosmos.crypto.multisig.v1beta1.MultiSignature} returns this\n */\n\n\nproto.cosmos.crypto.multisig.v1beta1.MultiSignature.prototype.addSignatures = function (value, opt_index) {\n  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);\n};\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.cosmos.crypto.multisig.v1beta1.MultiSignature} returns this\n */\n\n\nproto.cosmos.crypto.multisig.v1beta1.MultiSignature.prototype.clearSignaturesList = function () {\n  return this.setSignaturesList([]);\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.cosmos.crypto.multisig.v1beta1.CompactBitArray.prototype.toObject = function (opt_includeInstance) {\n    return proto.cosmos.crypto.multisig.v1beta1.CompactBitArray.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.cosmos.crypto.multisig.v1beta1.CompactBitArray} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.cosmos.crypto.multisig.v1beta1.CompactBitArray.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      extraBitsStored: jspb.Message.getFieldWithDefault(msg, 1, 0),\n      elems: msg.getElems_asB64()\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.cosmos.crypto.multisig.v1beta1.CompactBitArray}\n */\n\n\nproto.cosmos.crypto.multisig.v1beta1.CompactBitArray.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.cosmos.crypto.multisig.v1beta1.CompactBitArray();\n  return proto.cosmos.crypto.multisig.v1beta1.CompactBitArray.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.cosmos.crypto.multisig.v1beta1.CompactBitArray} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.cosmos.crypto.multisig.v1beta1.CompactBitArray}\n */\n\n\nproto.cosmos.crypto.multisig.v1beta1.CompactBitArray.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {number} */\n        reader.readUint32();\n        msg.setExtraBitsStored(value);\n        break;\n\n      case 2:\n        var value =\n        /** @type {!Uint8Array} */\n        reader.readBytes();\n        msg.setElems(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.cosmos.crypto.multisig.v1beta1.CompactBitArray.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.cosmos.crypto.multisig.v1beta1.CompactBitArray.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.cosmos.crypto.multisig.v1beta1.CompactBitArray} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.cosmos.crypto.multisig.v1beta1.CompactBitArray.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getExtraBitsStored();\n\n  if (f !== 0) {\n    writer.writeUint32(1, f);\n  }\n\n  f = message.getElems_asU8();\n\n  if (f.length > 0) {\n    writer.writeBytes(2, f);\n  }\n};\n/**\n * optional uint32 extra_bits_stored = 1;\n * @return {number}\n */\n\n\nproto.cosmos.crypto.multisig.v1beta1.CompactBitArray.prototype.getExtraBitsStored = function () {\n  return (\n    /** @type {number} */\n    jspb.Message.getFieldWithDefault(this, 1, 0)\n  );\n};\n/**\n * @param {number} value\n * @return {!proto.cosmos.crypto.multisig.v1beta1.CompactBitArray} returns this\n */\n\n\nproto.cosmos.crypto.multisig.v1beta1.CompactBitArray.prototype.setExtraBitsStored = function (value) {\n  return jspb.Message.setProto3IntField(this, 1, value);\n};\n/**\n * optional bytes elems = 2;\n * @return {!(string|Uint8Array)}\n */\n\n\nproto.cosmos.crypto.multisig.v1beta1.CompactBitArray.prototype.getElems = function () {\n  return (\n    /** @type {!(string|Uint8Array)} */\n    jspb.Message.getFieldWithDefault(this, 2, \"\")\n  );\n};\n/**\n * optional bytes elems = 2;\n * This is a type-conversion wrapper around `getElems()`\n * @return {string}\n */\n\n\nproto.cosmos.crypto.multisig.v1beta1.CompactBitArray.prototype.getElems_asB64 = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.bytesAsB64(this.getElems())\n  );\n};\n/**\n * optional bytes elems = 2;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getElems()`\n * @return {!Uint8Array}\n */\n\n\nproto.cosmos.crypto.multisig.v1beta1.CompactBitArray.prototype.getElems_asU8 = function () {\n  return (\n    /** @type {!Uint8Array} */\n    jspb.Message.bytesAsU8(this.getElems())\n  );\n};\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.cosmos.crypto.multisig.v1beta1.CompactBitArray} returns this\n */\n\n\nproto.cosmos.crypto.multisig.v1beta1.CompactBitArray.prototype.setElems = function (value) {\n  return jspb.Message.setProto3BytesField(this, 2, value);\n};\n\ngoog.object.extend(exports, proto.cosmos.crypto.multisig.v1beta1);","map":{"version":3,"sources":["/Users/pangp/Band/demo-bandchainjs/node_modules/@bandprotocol/bandchain.js/proto/cosmos/crypto/multisig/v1beta1/multisig_pb.js"],"names":["jspb","require","goog","global","Function","gogoproto_gogo_pb","object","extend","proto","exportSymbol","cosmos","crypto","multisig","v1beta1","MultiSignature","opt_data","Message","initialize","repeatedFields_","inherits","DEBUG","COMPILED","displayName","CompactBitArray","GENERATE_TO_OBJECT","prototype","toObject","opt_includeInstance","includeInstance","msg","f","obj","signaturesList","getSignaturesList_asB64","$jspbMessageInstance","deserializeBinary","bytes","reader","BinaryReader","deserializeBinaryFromReader","nextField","isEndGroup","field","getFieldNumber","value","readBytes","addSignatures","skipField","serializeBinary","writer","BinaryWriter","serializeBinaryToWriter","getResultBuffer","message","undefined","getSignaturesList_asU8","length","writeRepeatedBytes","getSignaturesList","getRepeatedField","bytesListAsB64","bytesListAsU8","setSignaturesList","setField","opt_index","addToRepeatedField","clearSignaturesList","extraBitsStored","getFieldWithDefault","elems","getElems_asB64","readUint32","setExtraBitsStored","setElems","getExtraBitsStored","writeUint32","getElems_asU8","writeBytes","setProto3IntField","getElems","bytesAsB64","bytesAsU8","setProto3BytesField","exports"],"mappings":"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","sourcesContent":["// source: cosmos/crypto/multisig/v1beta1/multisig.proto\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {missingRequire} reports error on implicit type usages.\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n/* eslint-disable */\n// @ts-nocheck\n\nvar jspb = require('google-protobuf');\nvar goog = jspb;\nvar global = Function('return this')();\n\nvar gogoproto_gogo_pb = require('../../../../gogoproto/gogo_pb.js');\ngoog.object.extend(proto, gogoproto_gogo_pb);\ngoog.exportSymbol('proto.cosmos.crypto.multisig.v1beta1.CompactBitArray', null, global);\ngoog.exportSymbol('proto.cosmos.crypto.multisig.v1beta1.MultiSignature', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.cosmos.crypto.multisig.v1beta1.MultiSignature = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.cosmos.crypto.multisig.v1beta1.MultiSignature.repeatedFields_, null);\n};\ngoog.inherits(proto.cosmos.crypto.multisig.v1beta1.MultiSignature, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.cosmos.crypto.multisig.v1beta1.MultiSignature.displayName = 'proto.cosmos.crypto.multisig.v1beta1.MultiSignature';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.cosmos.crypto.multisig.v1beta1.CompactBitArray = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.cosmos.crypto.multisig.v1beta1.CompactBitArray, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.cosmos.crypto.multisig.v1beta1.CompactBitArray.displayName = 'proto.cosmos.crypto.multisig.v1beta1.CompactBitArray';\n}\n\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\nproto.cosmos.crypto.multisig.v1beta1.MultiSignature.repeatedFields_ = [1];\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.cosmos.crypto.multisig.v1beta1.MultiSignature.prototype.toObject = function(opt_includeInstance) {\n  return proto.cosmos.crypto.multisig.v1beta1.MultiSignature.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.cosmos.crypto.multisig.v1beta1.MultiSignature} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.cosmos.crypto.multisig.v1beta1.MultiSignature.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    signaturesList: msg.getSignaturesList_asB64()\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.cosmos.crypto.multisig.v1beta1.MultiSignature}\n */\nproto.cosmos.crypto.multisig.v1beta1.MultiSignature.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.cosmos.crypto.multisig.v1beta1.MultiSignature;\n  return proto.cosmos.crypto.multisig.v1beta1.MultiSignature.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.cosmos.crypto.multisig.v1beta1.MultiSignature} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.cosmos.crypto.multisig.v1beta1.MultiSignature}\n */\nproto.cosmos.crypto.multisig.v1beta1.MultiSignature.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.addSignatures(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.cosmos.crypto.multisig.v1beta1.MultiSignature.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.cosmos.crypto.multisig.v1beta1.MultiSignature.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.cosmos.crypto.multisig.v1beta1.MultiSignature} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.cosmos.crypto.multisig.v1beta1.MultiSignature.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getSignaturesList_asU8();\n  if (f.length > 0) {\n    writer.writeRepeatedBytes(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * repeated bytes signatures = 1;\n * @return {!(Array<!Uint8Array>|Array<string>)}\n */\nproto.cosmos.crypto.multisig.v1beta1.MultiSignature.prototype.getSignaturesList = function() {\n  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 1));\n};\n\n\n/**\n * repeated bytes signatures = 1;\n * This is a type-conversion wrapper around `getSignaturesList()`\n * @return {!Array<string>}\n */\nproto.cosmos.crypto.multisig.v1beta1.MultiSignature.prototype.getSignaturesList_asB64 = function() {\n  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(\n      this.getSignaturesList()));\n};\n\n\n/**\n * repeated bytes signatures = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getSignaturesList()`\n * @return {!Array<!Uint8Array>}\n */\nproto.cosmos.crypto.multisig.v1beta1.MultiSignature.prototype.getSignaturesList_asU8 = function() {\n  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(\n      this.getSignaturesList()));\n};\n\n\n/**\n * @param {!(Array<!Uint8Array>|Array<string>)} value\n * @return {!proto.cosmos.crypto.multisig.v1beta1.MultiSignature} returns this\n */\nproto.cosmos.crypto.multisig.v1beta1.MultiSignature.prototype.setSignaturesList = function(value) {\n  return jspb.Message.setField(this, 1, value || []);\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @param {number=} opt_index\n * @return {!proto.cosmos.crypto.multisig.v1beta1.MultiSignature} returns this\n */\nproto.cosmos.crypto.multisig.v1beta1.MultiSignature.prototype.addSignatures = function(value, opt_index) {\n  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);\n};\n\n\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.cosmos.crypto.multisig.v1beta1.MultiSignature} returns this\n */\nproto.cosmos.crypto.multisig.v1beta1.MultiSignature.prototype.clearSignaturesList = function() {\n  return this.setSignaturesList([]);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.cosmos.crypto.multisig.v1beta1.CompactBitArray.prototype.toObject = function(opt_includeInstance) {\n  return proto.cosmos.crypto.multisig.v1beta1.CompactBitArray.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.cosmos.crypto.multisig.v1beta1.CompactBitArray} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.cosmos.crypto.multisig.v1beta1.CompactBitArray.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    extraBitsStored: jspb.Message.getFieldWithDefault(msg, 1, 0),\n    elems: msg.getElems_asB64()\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.cosmos.crypto.multisig.v1beta1.CompactBitArray}\n */\nproto.cosmos.crypto.multisig.v1beta1.CompactBitArray.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.cosmos.crypto.multisig.v1beta1.CompactBitArray;\n  return proto.cosmos.crypto.multisig.v1beta1.CompactBitArray.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.cosmos.crypto.multisig.v1beta1.CompactBitArray} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.cosmos.crypto.multisig.v1beta1.CompactBitArray}\n */\nproto.cosmos.crypto.multisig.v1beta1.CompactBitArray.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {number} */ (reader.readUint32());\n      msg.setExtraBitsStored(value);\n      break;\n    case 2:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setElems(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.cosmos.crypto.multisig.v1beta1.CompactBitArray.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.cosmos.crypto.multisig.v1beta1.CompactBitArray.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.cosmos.crypto.multisig.v1beta1.CompactBitArray} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.cosmos.crypto.multisig.v1beta1.CompactBitArray.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getExtraBitsStored();\n  if (f !== 0) {\n    writer.writeUint32(\n      1,\n      f\n    );\n  }\n  f = message.getElems_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      2,\n      f\n    );\n  }\n};\n\n\n/**\n * optional uint32 extra_bits_stored = 1;\n * @return {number}\n */\nproto.cosmos.crypto.multisig.v1beta1.CompactBitArray.prototype.getExtraBitsStored = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));\n};\n\n\n/**\n * @param {number} value\n * @return {!proto.cosmos.crypto.multisig.v1beta1.CompactBitArray} returns this\n */\nproto.cosmos.crypto.multisig.v1beta1.CompactBitArray.prototype.setExtraBitsStored = function(value) {\n  return jspb.Message.setProto3IntField(this, 1, value);\n};\n\n\n/**\n * optional bytes elems = 2;\n * @return {!(string|Uint8Array)}\n */\nproto.cosmos.crypto.multisig.v1beta1.CompactBitArray.prototype.getElems = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/**\n * optional bytes elems = 2;\n * This is a type-conversion wrapper around `getElems()`\n * @return {string}\n */\nproto.cosmos.crypto.multisig.v1beta1.CompactBitArray.prototype.getElems_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getElems()));\n};\n\n\n/**\n * optional bytes elems = 2;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getElems()`\n * @return {!Uint8Array}\n */\nproto.cosmos.crypto.multisig.v1beta1.CompactBitArray.prototype.getElems_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getElems()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.cosmos.crypto.multisig.v1beta1.CompactBitArray} returns this\n */\nproto.cosmos.crypto.multisig.v1beta1.CompactBitArray.prototype.setElems = function(value) {\n  return jspb.Message.setProto3BytesField(this, 2, value);\n};\n\n\ngoog.object.extend(exports, proto.cosmos.crypto.multisig.v1beta1);\n"]},"metadata":{},"sourceType":"script"}