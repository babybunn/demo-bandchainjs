{"ast":null,"code":"var _jsxFileName = \"/Users/pangp/Band/demo-bandchainjs/src/components/FormConnectWallet.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { getWallet } from \"../band\";\nimport { useDispatch } from \"react-redux\";\nimport { addWallet } from \"../redux/walletSlice\";\nimport { gql, useLazyQuery } from \"@apollo/client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function FormConnectWallet() {\n  _s();\n\n  const dispatch = useDispatch();\n  const [mnemonic, setMnemonic] = useState(\"\");\n  const GET_BALANCE = gql`\n    query GetBalance($address: String!) {\n      accounts(where: { address: { _eq: $address } }) {\n        balance\n      }\n    }\n  `;\n  const [getBalance, {\n    loading,\n    error,\n    data\n  }] = useLazyQuery(GET_BALANCE);\n\n  const handleConnectButton = () => {\n    if (mnemonic.length > 0 && mnemonic !== \"\") {\n      const {\n        sender,\n        privateKey,\n        pubkey\n      } = getWallet(mnemonic);\n      dispatch(addWallet({\n        address: sender,\n        name: sender,\n        privateKey: privateKey,\n        pubkey: pubkey\n      }));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-inner\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-5\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-group mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"input-address\",\n            className: \"block text-sm font-medium text-gray-700 mb-1\",\n            children: \"Enter mnemonic phrase\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"focus:outline-none focus:ring-2 focus:ring-gray-200 block w-full p-2 sm:text-sm border-solid border-2 border-gray-200 rounded-md\",\n            type: \"text\",\n            id: \"input-address\",\n            valur: mnemonic,\n            onChange: e => setMnemonic(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleConnectButton,\n        className: \"button block w-full bg-purple-600 text-white py-2 px-4 rounded-xl hover:bg-purple-700 focus:outline-none focus:ring-purple-600 focus:ring-opacity-50 transition duration-500 ease-in-out\",\n        children: \"Connect Wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n\n_s(FormConnectWallet, \"jUGABLFMi1PduKgA4l9XSvxsSGQ=\", false, function () {\n  return [useDispatch, useLazyQuery];\n});\n\n_c = FormConnectWallet;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormConnectWallet\");","map":{"version":3,"sources":["/Users/pangp/Band/demo-bandchainjs/src/components/FormConnectWallet.js"],"names":["useState","useEffect","getWallet","useDispatch","addWallet","gql","useLazyQuery","FormConnectWallet","dispatch","mnemonic","setMnemonic","GET_BALANCE","getBalance","loading","error","data","handleConnectButton","length","sender","privateKey","pubkey","address","name","e","target","value"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,SAAT,QAA0B,SAA1B;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,SAAT,QAA0B,sBAA1B;AACA,SAASC,GAAT,EAAcC,YAAd,QAAkC,gBAAlC;;AAEA,eAAe,SAASC,iBAAT,GAA6B;AAAA;;AAC1C,QAAMC,QAAQ,GAAGL,WAAW,EAA5B;AACA,QAAM,CAACM,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,CAAC,EAAD,CAAxC;AAEA,QAAMW,WAAW,GAAGN,GAAI;AAC1B;AACA;AACA;AACA;AACA;AACA,GANE;AAQA,QAAM,CAACO,UAAD,EAAa;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,GAAb,IAAyCT,YAAY,CAACK,WAAD,CAA3D;;AAEA,QAAMK,mBAAmB,GAAG,MAAM;AAChC,QAAIP,QAAQ,CAACQ,MAAT,GAAkB,CAAlB,IAAuBR,QAAQ,KAAK,EAAxC,EAA4C;AAC1C,YAAM;AAAES,QAAAA,MAAF;AAAUC,QAAAA,UAAV;AAAsBC,QAAAA;AAAtB,UAAiClB,SAAS,CAACO,QAAD,CAAhD;AACAD,MAAAA,QAAQ,CACNJ,SAAS,CAAC;AACRiB,QAAAA,OAAO,EAAEH,MADD;AAERI,QAAAA,IAAI,EAAEJ,MAFE;AAGRC,QAAAA,UAAU,EAAEA,UAHJ;AAIRC,QAAAA,MAAM,EAAEA;AAJA,OAAD,CADH,CAAR;AAQD;AACF,GAZD;;AAcA,sBACE;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA,+BACE;AAAK,UAAA,SAAS,EAAC,kBAAf;AAAA,kCACE;AAAO,YAAA,OAAO,EAAC,eAAf;AAA+B,YAAA,SAAS,EAAC,8CAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAIE;AACE,YAAA,SAAS,EAAC,kIADZ;AAEE,YAAA,IAAI,EAAC,MAFP;AAGE,YAAA,EAAE,EAAC,eAHL;AAIE,YAAA,KAAK,EAAEX,QAJT;AAKE,YAAA,QAAQ,EAAGc,CAAD,IAAOb,WAAW,CAACa,CAAC,CAACC,MAAF,CAASC,KAAV;AAL9B;AAAA;AAAA;AAAA;AAAA,kBAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eAeE;AACE,QAAA,OAAO,EAAET,mBADX;AAEE,QAAA,SAAS,EAAC,0LAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAfF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AA0BD;;GAtDuBT,iB;UACLJ,W,EAW8BG,Y;;;KAZzBC,iB","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { getWallet } from \"../band\";\nimport { useDispatch } from \"react-redux\";\nimport { addWallet } from \"../redux/walletSlice\";\nimport { gql, useLazyQuery } from \"@apollo/client\";\n\nexport default function FormConnectWallet() {\n  const dispatch = useDispatch();\n  const [mnemonic, setMnemonic] = useState(\"\");\n\n  const GET_BALANCE = gql`\n    query GetBalance($address: String!) {\n      accounts(where: { address: { _eq: $address } }) {\n        balance\n      }\n    }\n  `;\n\n  const [getBalance, { loading, error, data }] = useLazyQuery(GET_BALANCE);\n\n  const handleConnectButton = () => {\n    if (mnemonic.length > 0 && mnemonic !== \"\") {\n      const { sender, privateKey, pubkey } = getWallet(mnemonic);\n      dispatch(\n        addWallet({\n          address: sender,\n          name: sender,\n          privateKey: privateKey,\n          pubkey: pubkey,\n        })\n      );\n    }\n  };\n\n  return (\n    <div>\n      <div className=\"card-inner\">\n        <div className=\"mb-5\">\n          <div className=\"input-group mb-3\">\n            <label htmlFor=\"input-address\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Enter mnemonic phrase\n            </label>\n            <input\n              className=\"focus:outline-none focus:ring-2 focus:ring-gray-200 block w-full p-2 sm:text-sm border-solid border-2 border-gray-200 rounded-md\"\n              type=\"text\"\n              id=\"input-address\"\n              valur={mnemonic}\n              onChange={(e) => setMnemonic(e.target.value)}\n            />\n          </div>\n        </div>\n        <button\n          onClick={handleConnectButton}\n          className=\"button block w-full bg-purple-600 text-white py-2 px-4 rounded-xl hover:bg-purple-700 focus:outline-none focus:ring-purple-600 focus:ring-opacity-50 transition duration-500 ease-in-out\"\n        >\n          Connect Wallet\n        </button>\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}