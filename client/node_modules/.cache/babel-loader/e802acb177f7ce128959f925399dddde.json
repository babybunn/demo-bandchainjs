{"ast":null,"code":"// source: cosmos/crypto/secp256k1/keys.proto\n\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {missingRequire} reports error on implicit type usages.\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n\n/* eslint-disable */\n// @ts-nocheck\nvar jspb = require('google-protobuf');\n\nvar goog = jspb;\nvar global = Function('return this')();\n\nvar gogoproto_gogo_pb = require('../../../gogoproto/gogo_pb.js');\n\ngoog.object.extend(proto, gogoproto_gogo_pb);\ngoog.exportSymbol('proto.cosmos.crypto.secp256k1.PrivKey', null, global);\ngoog.exportSymbol('proto.cosmos.crypto.secp256k1.PubKey', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\nproto.cosmos.crypto.secp256k1.PubKey = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.cosmos.crypto.secp256k1.PubKey, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.cosmos.crypto.secp256k1.PubKey.displayName = 'proto.cosmos.crypto.secp256k1.PubKey';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.cosmos.crypto.secp256k1.PrivKey = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.cosmos.crypto.secp256k1.PrivKey, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.cosmos.crypto.secp256k1.PrivKey.displayName = 'proto.cosmos.crypto.secp256k1.PrivKey';\n}\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.cosmos.crypto.secp256k1.PubKey.prototype.toObject = function (opt_includeInstance) {\n    return proto.cosmos.crypto.secp256k1.PubKey.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.cosmos.crypto.secp256k1.PubKey} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.cosmos.crypto.secp256k1.PubKey.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      key: msg.getKey_asB64()\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.cosmos.crypto.secp256k1.PubKey}\n */\n\n\nproto.cosmos.crypto.secp256k1.PubKey.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.cosmos.crypto.secp256k1.PubKey();\n  return proto.cosmos.crypto.secp256k1.PubKey.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.cosmos.crypto.secp256k1.PubKey} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.cosmos.crypto.secp256k1.PubKey}\n */\n\n\nproto.cosmos.crypto.secp256k1.PubKey.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {!Uint8Array} */\n        reader.readBytes();\n        msg.setKey(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.cosmos.crypto.secp256k1.PubKey.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.cosmos.crypto.secp256k1.PubKey.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.cosmos.crypto.secp256k1.PubKey} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.cosmos.crypto.secp256k1.PubKey.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getKey_asU8();\n\n  if (f.length > 0) {\n    writer.writeBytes(1, f);\n  }\n};\n/**\n * optional bytes key = 1;\n * @return {!(string|Uint8Array)}\n */\n\n\nproto.cosmos.crypto.secp256k1.PubKey.prototype.getKey = function () {\n  return (\n    /** @type {!(string|Uint8Array)} */\n    jspb.Message.getFieldWithDefault(this, 1, \"\")\n  );\n};\n/**\n * optional bytes key = 1;\n * This is a type-conversion wrapper around `getKey()`\n * @return {string}\n */\n\n\nproto.cosmos.crypto.secp256k1.PubKey.prototype.getKey_asB64 = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.bytesAsB64(this.getKey())\n  );\n};\n/**\n * optional bytes key = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getKey()`\n * @return {!Uint8Array}\n */\n\n\nproto.cosmos.crypto.secp256k1.PubKey.prototype.getKey_asU8 = function () {\n  return (\n    /** @type {!Uint8Array} */\n    jspb.Message.bytesAsU8(this.getKey())\n  );\n};\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.cosmos.crypto.secp256k1.PubKey} returns this\n */\n\n\nproto.cosmos.crypto.secp256k1.PubKey.prototype.setKey = function (value) {\n  return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.cosmos.crypto.secp256k1.PrivKey.prototype.toObject = function (opt_includeInstance) {\n    return proto.cosmos.crypto.secp256k1.PrivKey.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.cosmos.crypto.secp256k1.PrivKey} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.cosmos.crypto.secp256k1.PrivKey.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      key: msg.getKey_asB64()\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.cosmos.crypto.secp256k1.PrivKey}\n */\n\n\nproto.cosmos.crypto.secp256k1.PrivKey.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.cosmos.crypto.secp256k1.PrivKey();\n  return proto.cosmos.crypto.secp256k1.PrivKey.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.cosmos.crypto.secp256k1.PrivKey} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.cosmos.crypto.secp256k1.PrivKey}\n */\n\n\nproto.cosmos.crypto.secp256k1.PrivKey.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {!Uint8Array} */\n        reader.readBytes();\n        msg.setKey(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.cosmos.crypto.secp256k1.PrivKey.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.cosmos.crypto.secp256k1.PrivKey.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.cosmos.crypto.secp256k1.PrivKey} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.cosmos.crypto.secp256k1.PrivKey.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getKey_asU8();\n\n  if (f.length > 0) {\n    writer.writeBytes(1, f);\n  }\n};\n/**\n * optional bytes key = 1;\n * @return {!(string|Uint8Array)}\n */\n\n\nproto.cosmos.crypto.secp256k1.PrivKey.prototype.getKey = function () {\n  return (\n    /** @type {!(string|Uint8Array)} */\n    jspb.Message.getFieldWithDefault(this, 1, \"\")\n  );\n};\n/**\n * optional bytes key = 1;\n * This is a type-conversion wrapper around `getKey()`\n * @return {string}\n */\n\n\nproto.cosmos.crypto.secp256k1.PrivKey.prototype.getKey_asB64 = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.bytesAsB64(this.getKey())\n  );\n};\n/**\n * optional bytes key = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getKey()`\n * @return {!Uint8Array}\n */\n\n\nproto.cosmos.crypto.secp256k1.PrivKey.prototype.getKey_asU8 = function () {\n  return (\n    /** @type {!Uint8Array} */\n    jspb.Message.bytesAsU8(this.getKey())\n  );\n};\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.cosmos.crypto.secp256k1.PrivKey} returns this\n */\n\n\nproto.cosmos.crypto.secp256k1.PrivKey.prototype.setKey = function (value) {\n  return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\ngoog.object.extend(exports, proto.cosmos.crypto.secp256k1);","map":{"version":3,"sources":["/Users/pangp/Band/demo-bandchainjs/client/node_modules/@bandprotocol/bandchain.js/proto/cosmos/crypto/secp256k1/keys_pb.js"],"names":["jspb","require","goog","global","Function","gogoproto_gogo_pb","object","extend","proto","exportSymbol","cosmos","crypto","secp256k1","PubKey","opt_data","Message","initialize","inherits","DEBUG","COMPILED","displayName","PrivKey","GENERATE_TO_OBJECT","prototype","toObject","opt_includeInstance","includeInstance","msg","f","obj","key","getKey_asB64","$jspbMessageInstance","deserializeBinary","bytes","reader","BinaryReader","deserializeBinaryFromReader","nextField","isEndGroup","field","getFieldNumber","value","readBytes","setKey","skipField","serializeBinary","writer","BinaryWriter","serializeBinaryToWriter","getResultBuffer","message","undefined","getKey_asU8","length","writeBytes","getKey","getFieldWithDefault","bytesAsB64","bytesAsU8","setProto3BytesField","exports"],"mappings":"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","sourcesContent":["// source: cosmos/crypto/secp256k1/keys.proto\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {missingRequire} reports error on implicit type usages.\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n/* eslint-disable */\n// @ts-nocheck\n\nvar jspb = require('google-protobuf');\nvar goog = jspb;\nvar global = Function('return this')();\n\nvar gogoproto_gogo_pb = require('../../../gogoproto/gogo_pb.js');\ngoog.object.extend(proto, gogoproto_gogo_pb);\ngoog.exportSymbol('proto.cosmos.crypto.secp256k1.PrivKey', null, global);\ngoog.exportSymbol('proto.cosmos.crypto.secp256k1.PubKey', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.cosmos.crypto.secp256k1.PubKey = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.cosmos.crypto.secp256k1.PubKey, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.cosmos.crypto.secp256k1.PubKey.displayName = 'proto.cosmos.crypto.secp256k1.PubKey';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.cosmos.crypto.secp256k1.PrivKey = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.cosmos.crypto.secp256k1.PrivKey, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.cosmos.crypto.secp256k1.PrivKey.displayName = 'proto.cosmos.crypto.secp256k1.PrivKey';\n}\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.cosmos.crypto.secp256k1.PubKey.prototype.toObject = function(opt_includeInstance) {\n  return proto.cosmos.crypto.secp256k1.PubKey.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.cosmos.crypto.secp256k1.PubKey} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.cosmos.crypto.secp256k1.PubKey.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    key: msg.getKey_asB64()\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.cosmos.crypto.secp256k1.PubKey}\n */\nproto.cosmos.crypto.secp256k1.PubKey.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.cosmos.crypto.secp256k1.PubKey;\n  return proto.cosmos.crypto.secp256k1.PubKey.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.cosmos.crypto.secp256k1.PubKey} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.cosmos.crypto.secp256k1.PubKey}\n */\nproto.cosmos.crypto.secp256k1.PubKey.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setKey(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.cosmos.crypto.secp256k1.PubKey.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.cosmos.crypto.secp256k1.PubKey.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.cosmos.crypto.secp256k1.PubKey} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.cosmos.crypto.secp256k1.PubKey.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getKey_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bytes key = 1;\n * @return {!(string|Uint8Array)}\n */\nproto.cosmos.crypto.secp256k1.PubKey.prototype.getKey = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes key = 1;\n * This is a type-conversion wrapper around `getKey()`\n * @return {string}\n */\nproto.cosmos.crypto.secp256k1.PubKey.prototype.getKey_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getKey()));\n};\n\n\n/**\n * optional bytes key = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getKey()`\n * @return {!Uint8Array}\n */\nproto.cosmos.crypto.secp256k1.PubKey.prototype.getKey_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getKey()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.cosmos.crypto.secp256k1.PubKey} returns this\n */\nproto.cosmos.crypto.secp256k1.PubKey.prototype.setKey = function(value) {\n  return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.cosmos.crypto.secp256k1.PrivKey.prototype.toObject = function(opt_includeInstance) {\n  return proto.cosmos.crypto.secp256k1.PrivKey.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.cosmos.crypto.secp256k1.PrivKey} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.cosmos.crypto.secp256k1.PrivKey.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    key: msg.getKey_asB64()\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.cosmos.crypto.secp256k1.PrivKey}\n */\nproto.cosmos.crypto.secp256k1.PrivKey.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.cosmos.crypto.secp256k1.PrivKey;\n  return proto.cosmos.crypto.secp256k1.PrivKey.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.cosmos.crypto.secp256k1.PrivKey} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.cosmos.crypto.secp256k1.PrivKey}\n */\nproto.cosmos.crypto.secp256k1.PrivKey.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setKey(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.cosmos.crypto.secp256k1.PrivKey.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.cosmos.crypto.secp256k1.PrivKey.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.cosmos.crypto.secp256k1.PrivKey} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.cosmos.crypto.secp256k1.PrivKey.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getKey_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bytes key = 1;\n * @return {!(string|Uint8Array)}\n */\nproto.cosmos.crypto.secp256k1.PrivKey.prototype.getKey = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes key = 1;\n * This is a type-conversion wrapper around `getKey()`\n * @return {string}\n */\nproto.cosmos.crypto.secp256k1.PrivKey.prototype.getKey_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getKey()));\n};\n\n\n/**\n * optional bytes key = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getKey()`\n * @return {!Uint8Array}\n */\nproto.cosmos.crypto.secp256k1.PrivKey.prototype.getKey_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getKey()));\n};\n\n\n/**\n * @param {!(string|Uint8Array)} value\n * @return {!proto.cosmos.crypto.secp256k1.PrivKey} returns this\n */\nproto.cosmos.crypto.secp256k1.PrivKey.prototype.setKey = function(value) {\n  return jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n\ngoog.object.extend(exports, proto.cosmos.crypto.secp256k1);\n"]},"metadata":{},"sourceType":"script"}