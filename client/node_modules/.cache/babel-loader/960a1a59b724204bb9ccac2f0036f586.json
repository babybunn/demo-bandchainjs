{"ast":null,"code":"import { Client, Wallet, Obi, Message, Coin, Transaction, Fee } from \"@bandprotocol/bandchain.js\";\nimport moment from \"moment\";\nconst grpcUrl = \"https://laozi-testnet4.bandchain.org/grpc-web\";\nconst client = new Client(grpcUrl);\nexport async function getPairPrice(pair, minCount, askCount) {\n  const data = await client.getReferenceData(pair, minCount, askCount);\n  return data;\n}\nexport function getWallet(mnemonic) {\n  const {\n    PrivateKey\n  } = Wallet;\n  const privateKey = PrivateKey.fromMnemonic(mnemonic);\n  const pubkey = privateKey.toPubkey();\n  const sender = pubkey.toAddress().toAccBech32();\n  return {\n    sender,\n    privateKey,\n    pubkey\n  };\n}\nexport async function makeRequest(symbols, multiplier, feeInput, prepareGas, executeGas) {\n  symbols = symbols.toUpperCase().replace(/\\s/g, \"\").split(\",\"); // Step 1: Import a private key for signing transaction\n\n  const {\n    PrivateKey\n  } = Wallet;\n  const mnemonic = \"s\";\n  const privateKey = PrivateKey.fromMnemonic(mnemonic);\n  const pubkey = privateKey.toPubkey();\n  const sender = pubkey.toAddress().toAccBech32(); // Step 2.1: Prepare oracle request's properties\n\n  const obi = new Obi(\"{symbols:[string],multiplier:u64}/{rates:[u64]}\");\n  const calldata = obi.encodeInput({\n    symbols: symbols,\n    multiplier: multiplier\n  });\n  const oracleScriptId = 37;\n  const askCount = 2;\n  const minCount = 1;\n  const clientId = \"from_bandchain.js\";\n  let feeLimit = new Coin();\n  feeLimit.setDenom(\"uband\");\n  feeLimit.setAmount(feeInput); // Step 2.2: Create an oracle request message\n\n  const requestMessage = new Message.MsgRequestData(oracleScriptId, calldata, askCount, minCount, clientId, sender, [feeLimit], prepareGas, executeGas);\n  const txRawBytes = await createSignedTransaction(requestMessage, sender, pubkey, privateKey); // Step 4: Broadcast the transaction\n\n  const sendTx = await client.sendTxBlockMode(txRawBytes);\n  if (sendTx) decodeData(sendTx);\n  return sendTx;\n}\n\nfunction decodeData(data) {\n  console.log(data);\n  const obi = new Obi(\"{symbols:[string],multiplier:u64}/{rates:[u64]}\"); // const calldata = obi.encodeInput({ symbols: symbols, multiplier: multiplier });\n\n  const decoded = obi.decodeOutput(data.data);\n  console.log(decoded);\n}\n\nexport const sendCoin = async (address, amount, privateKey, pubkey, sender, action = \"send\") => {\n  const {\n    MsgSend,\n    MsgDelegate\n  } = Message;\n  const receiver = address;\n  const sendAmount = new Coin();\n  sendAmount.setDenom(\"uband\");\n  sendAmount.setAmount((amount * 1e6).toString());\n  const msg = action === \"delegate\" ? new MsgDelegate(sender, receiver, sendAmount) : new MsgSend(sender, receiver, [sendAmount]);\n  const txRawBytes = await createSignedTransaction(msg, sender, pubkey, privateKey); // Step 5 send the transaction\n\n  const response = await client.sendTxBlockMode(txRawBytes);\n  return response;\n};\nexport const undelegateCoin = async (operator, amount, privateKey, pubkey, sender) => {\n  const sendAmount = new Coin();\n  sendAmount.setDenom(\"uband\");\n  sendAmount.setAmount((amount * 1e6).toString());\n  const {\n    MsgUndelegate\n  } = Message;\n  const msg = new MsgUndelegate(sender, operator, sendAmount);\n  const txRawBytes = await createSignedTransaction(msg, sender, pubkey, privateKey);\n  const response = await client.sendTxBlockMode(txRawBytes);\n  return response;\n};\nexport const sendIBC = async (address, amount, privateKey, pubkey, sender) => {\n  const {\n    MsgTransfer\n  } = Message; // Here we use different message type, which is MsgSend\n\n  const receiver = address;\n  const sendAmount = new Coin();\n  sendAmount.setDenom(\"uband\");\n  sendAmount.setAmount((amount * 1e6).toString());\n  const timeoutTimestamp = moment().unix() * 1e9;\n  const msg = new MsgTransfer(\"transfer\", \"channel-25\", sender, receiver, sendAmount, timeoutTimestamp);\n  const signedTx = await createSignedTransaction(msg, sender, pubkey, privateKey); // Step 5 send the transaction\n\n  const response = await client.sendTxBlockMode(signedTx);\n  return response;\n};\nexport const createDataSource = async (title, code, sender, owner, treasury, privateKey, pubkey, ...desc) => {\n  const {\n    MsgCreateDataSource\n  } = Message;\n  let feeCoin = new Coin();\n  feeCoin.setDenom(\"uband\");\n  feeCoin.setAmount(\"1000\");\n  const msg = MsgCreateDataSource(title, code, [feeCoin], treasury, owner, sender, desc); // const msg = new Message.MsgCreateDataSource(title, code, [feeCoin], treasury, owner, sender);\n\n  const signedTx = await createSignedTransaction(msg, sender, pubkey, privateKey); // Step 5 send the transaction\n\n  const response = await client.sendTxBlockMode(signedTx);\n  return response;\n};\nexport const editDataSource = async (id, code, sender, owner, privateKey, pubkey, ...args) => {\n  let feeCoin = new Coin();\n  feeCoin.setDenom(\"uband\");\n  feeCoin.setAmount(\"1000\");\n  const msg = new Message.MsgEditDataSource(parseInt(id), code, [feeCoin], owner, sender);\n  const signedTx = await createSignedTransaction(msg, sender, pubkey, privateKey); // Step 5 send the transaction\n\n  const response = await client.sendTxBlockMode(signedTx);\n  return response;\n};\nexport async function createOracleScript(title, desc, schema, source_code_url, code, sender, owner, privateKey, pubkey) {\n  let coin = new Coin();\n  coin.setDenom(\"uband\");\n  coin.setAmount(\"1000000\");\n  let feeCoin = new Coin();\n  feeCoin.setDenom(\"uband\");\n  feeCoin.setAmount(\"1000\");\n  const requestMessage = new Message.MsgCreateOracleScript(title, desc, schema, source_code_url, Buffer.from(code), owner, sender);\n  const signedTx = await createSignedTransaction(requestMessage, sender, pubkey, privateKey);\n  const sendTx = await client.sendTxBlockMode(signedTx);\n  return sendTx;\n}\nexport async function createMsgEditOS(id, title, desc, schema, source_code_url, code, sender, owner, privateKey, pubkey) {\n  let coin = new Coin();\n  coin.setDenom(\"uband\");\n  coin.setAmount(\"1000000\");\n  let feeCoin = new Coin();\n  feeCoin.setDenom(\"uband\");\n  feeCoin.setAmount(\"1000\");\n  const requestMessage = new Message.MsgEditOracleScript(id, title, desc, schema, source_code_url, Buffer.from(code), owner, sender);\n  const signedTx = await createSignedTransaction(requestMessage, sender, pubkey, privateKey);\n  const sendTx = await client.sendTxBlockMode(signedTx);\n  return sendTx;\n}\nexport async function getRawPreview(title, desc, schema, source_code_url, code, sender, owner, privateKey, pubkey) {\n  let coin = new Coin();\n  coin.setDenom(\"uband\");\n  coin.setAmount(\"1000000\");\n  let feeCoin = new Coin();\n  feeCoin.setDenom(\"uband\");\n  feeCoin.setAmount(\"1000\");\n  const requestMessage = new Message.MsgCreateOracleScript(title, desc, schema, source_code_url, Buffer.from(code), owner, sender);\n  const fee = new Fee();\n  fee.setAmountList([feeCoin]);\n  fee.setGasLimit(1000000);\n  const chainId = await client.getChainId();\n  const txn = new Transaction();\n  txn.withMessages(requestMessage);\n  await txn.withSender(client, sender);\n  txn.withChainId(chainId);\n  txn.withFee(fee);\n  txn.withMemo(\"\");\n  const signDoc = txn.getSignDoc(pubkey);\n  const signature = privateKey.sign(signDoc);\n  const txRawBytes = txn.getTxData(signature, pubkey);\n  return txRawBytes;\n}\nexport async function getRawPreviewEditOs(title, desc, schema, source_code_url, code, sender, owner, privateKey, pubkey) {\n  let coin = new Coin();\n  coin.setDenom(\"uband\");\n  coin.setAmount(\"1000000\");\n  let feeCoin = new Coin();\n  feeCoin.setDenom(\"uband\");\n  feeCoin.setAmount(\"1000\");\n  const requestMessage = new Message.MsgCreateOracleScript(title, desc, schema, source_code_url, Buffer.from(code), owner, sender);\n  const fee = new Fee();\n  fee.setAmountList([feeCoin]);\n  fee.setGasLimit(1000000);\n  const chainId = await client.getChainId();\n  const txn = new Transaction();\n  txn.withMessages(requestMessage);\n  await txn.withSender(client, sender);\n  txn.withChainId(chainId);\n  txn.withFee(fee);\n  txn.withMemo(\"\");\n  const signDoc = txn.getSignDoc(pubkey);\n  const signature = privateKey.sign(signDoc);\n  const txRawBytes = txn.getTxData(signature, pubkey);\n  return txRawBytes;\n}\nexport async function withdrawReward(delegator, validator, sender, pubkey, privateKey) {\n  const msg = new Message.MsgWithdrawDelegatorReward(delegator, validator);\n  const signedTx = await createSignedTransaction(msg, sender, pubkey, privateKey);\n  const response = await client.sendTxBlockMode(signedTx);\n  return response;\n}\nexport async function createSignedTransaction(msg, sender, pubkey, privateKey) {\n  let feeCoin = new Coin();\n  feeCoin.setDenom(\"uband\");\n  feeCoin.setAmount(\"1000\");\n  const fee = new Fee();\n  fee.setAmountList([feeCoin]);\n  fee.setGasLimit(1000000);\n  const chainId = await client.getChainId();\n  const txn = new Transaction();\n  txn.withMessages(msg);\n  await txn.withSender(client, sender);\n  txn.withChainId(chainId);\n  txn.withFee(fee);\n  txn.withMemo(\"From Bandchain.js Demo App\");\n  const signDoc = txn.getSignDoc(pubkey);\n  const signature = privateKey.sign(signDoc);\n  const txRawBytes = txn.getTxData(signature, pubkey);\n  return txRawBytes;\n}","map":{"version":3,"sources":["/Users/pangp/Band/demo-bandchainjs/src/band.js"],"names":["Client","Wallet","Obi","Message","Coin","Transaction","Fee","moment","grpcUrl","client","getPairPrice","pair","minCount","askCount","data","getReferenceData","getWallet","mnemonic","PrivateKey","privateKey","fromMnemonic","pubkey","toPubkey","sender","toAddress","toAccBech32","makeRequest","symbols","multiplier","feeInput","prepareGas","executeGas","toUpperCase","replace","split","obi","calldata","encodeInput","oracleScriptId","clientId","feeLimit","setDenom","setAmount","requestMessage","MsgRequestData","txRawBytes","createSignedTransaction","sendTx","sendTxBlockMode","decodeData","console","log","decoded","decodeOutput","sendCoin","address","amount","action","MsgSend","MsgDelegate","receiver","sendAmount","toString","msg","response","undelegateCoin","operator","MsgUndelegate","sendIBC","MsgTransfer","timeoutTimestamp","unix","signedTx","createDataSource","title","code","owner","treasury","desc","MsgCreateDataSource","feeCoin","editDataSource","id","args","MsgEditDataSource","parseInt","createOracleScript","schema","source_code_url","coin","MsgCreateOracleScript","Buffer","from","createMsgEditOS","MsgEditOracleScript","getRawPreview","fee","setAmountList","setGasLimit","chainId","getChainId","txn","withMessages","withSender","withChainId","withFee","withMemo","signDoc","getSignDoc","signature","sign","getTxData","getRawPreviewEditOs","withdrawReward","delegator","validator","MsgWithdrawDelegatorReward"],"mappings":"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","sourcesContent":["import { Client, Wallet, Obi, Message, Coin, Transaction, Fee } from \"@bandprotocol/bandchain.js\";\nimport moment from \"moment\";\n\nconst grpcUrl = \"https://laozi-testnet4.bandchain.org/grpc-web\";\nconst client = new Client(grpcUrl);\n\nexport async function getPairPrice(pair, minCount, askCount) {\n  const data = await client.getReferenceData(pair, minCount, askCount);\n  return data;\n}\n\nexport function getWallet(mnemonic) {\n  const { PrivateKey } = Wallet;\n  const privateKey = PrivateKey.fromMnemonic(mnemonic);\n  const pubkey = privateKey.toPubkey();\n  const sender = pubkey.toAddress().toAccBech32();\n  return { sender, privateKey, pubkey };\n}\n\nexport async function makeRequest(symbols, multiplier, feeInput, prepareGas, executeGas) {\n  symbols = symbols.toUpperCase().replace(/\\s/g, \"\").split(\",\");\n\n  // Step 1: Import a private key for signing transaction\n  const { PrivateKey } = Wallet;\n  const mnemonic = \"s\";\n  const privateKey = PrivateKey.fromMnemonic(mnemonic);\n  const pubkey = privateKey.toPubkey();\n  const sender = pubkey.toAddress().toAccBech32();\n\n  // Step 2.1: Prepare oracle request's properties\n  const obi = new Obi(\"{symbols:[string],multiplier:u64}/{rates:[u64]}\");\n  const calldata = obi.encodeInput({ symbols: symbols, multiplier: multiplier });\n\n  const oracleScriptId = 37;\n  const askCount = 2;\n  const minCount = 1;\n  const clientId = \"from_bandchain.js\";\n\n  let feeLimit = new Coin();\n  feeLimit.setDenom(\"uband\");\n  feeLimit.setAmount(feeInput);\n\n  // Step 2.2: Create an oracle request message\n  const requestMessage = new Message.MsgRequestData(\n    oracleScriptId,\n    calldata,\n    askCount,\n    minCount,\n    clientId,\n    sender,\n    [feeLimit],\n    prepareGas,\n    executeGas\n  );\n\n  const txRawBytes = await createSignedTransaction(requestMessage, sender, pubkey, privateKey);\n\n  // Step 4: Broadcast the transaction\n  const sendTx = await client.sendTxBlockMode(txRawBytes);\n\n  if (sendTx) decodeData(sendTx);\n\n  return sendTx;\n}\n\nfunction decodeData(data) {\n  console.log(data);\n  const obi = new Obi(\"{symbols:[string],multiplier:u64}/{rates:[u64]}\");\n  // const calldata = obi.encodeInput({ symbols: symbols, multiplier: multiplier });\n  const decoded = obi.decodeOutput(data.data);\n  console.log(decoded);\n}\n\nexport const sendCoin = async (address, amount, privateKey, pubkey, sender, action = \"send\") => {\n  const { MsgSend, MsgDelegate } = Message;\n\n  const receiver = address;\n  const sendAmount = new Coin();\n  sendAmount.setDenom(\"uband\");\n  sendAmount.setAmount((amount * 1e6).toString());\n\n  const msg =\n    action === \"delegate\"\n      ? new MsgDelegate(sender, receiver, sendAmount)\n      : new MsgSend(sender, receiver, [sendAmount]);\n\n  const txRawBytes = await createSignedTransaction(msg, sender, pubkey, privateKey);\n\n  // Step 5 send the transaction\n  const response = await client.sendTxBlockMode(txRawBytes);\n\n  return response;\n};\n\nexport const undelegateCoin = async (operator, amount, privateKey, pubkey, sender) => {\n  const sendAmount = new Coin();\n  sendAmount.setDenom(\"uband\");\n  sendAmount.setAmount((amount * 1e6).toString());\n\n  const { MsgUndelegate } = Message;\n  const msg = new MsgUndelegate(sender, operator, sendAmount);\n  const txRawBytes = await createSignedTransaction(msg, sender, pubkey, privateKey);\n  const response = await client.sendTxBlockMode(txRawBytes);\n\n  return response;\n};\n\nexport const sendIBC = async (address, amount, privateKey, pubkey, sender) => {\n  const { MsgTransfer } = Message;\n\n  // Here we use different message type, which is MsgSend\n  const receiver = address;\n  const sendAmount = new Coin();\n  sendAmount.setDenom(\"uband\");\n  sendAmount.setAmount((amount * 1e6).toString());\n  const timeoutTimestamp = moment().unix() * 1e9;\n\n  const msg = new MsgTransfer(\n    \"transfer\",\n    \"channel-25\",\n    sender,\n    receiver,\n    sendAmount,\n    timeoutTimestamp\n  );\n\n  const signedTx = await createSignedTransaction(msg, sender, pubkey, privateKey);\n\n  // Step 5 send the transaction\n  const response = await client.sendTxBlockMode(signedTx);\n\n  return response;\n};\n\nexport const createDataSource = async (\n  title,\n  code,\n  sender,\n  owner,\n  treasury,\n  privateKey,\n  pubkey,\n  ...desc\n) => {\n  const { MsgCreateDataSource } = Message;\n  let feeCoin = new Coin();\n  feeCoin.setDenom(\"uband\");\n  feeCoin.setAmount(\"1000\");\n\n  const msg = MsgCreateDataSource(title, code, [feeCoin], treasury, owner, sender, desc);\n\n  // const msg = new Message.MsgCreateDataSource(title, code, [feeCoin], treasury, owner, sender);\n\n  const signedTx = await createSignedTransaction(msg, sender, pubkey, privateKey);\n\n  // Step 5 send the transaction\n  const response = await client.sendTxBlockMode(signedTx);\n\n  return response;\n};\n\nexport const editDataSource = async (id, code, sender, owner, privateKey, pubkey, ...args) => {\n  let feeCoin = new Coin();\n  feeCoin.setDenom(\"uband\");\n  feeCoin.setAmount(\"1000\");\n\n  const msg = new Message.MsgEditDataSource(parseInt(id), code, [feeCoin], owner, sender);\n\n  const signedTx = await createSignedTransaction(msg, sender, pubkey, privateKey);\n\n  // Step 5 send the transaction\n  const response = await client.sendTxBlockMode(signedTx);\n\n  return response;\n};\n\nexport async function createOracleScript(\n  title,\n  desc,\n  schema,\n  source_code_url,\n  code,\n  sender,\n  owner,\n  privateKey,\n  pubkey\n) {\n  let coin = new Coin();\n  coin.setDenom(\"uband\");\n  coin.setAmount(\"1000000\");\n\n  let feeCoin = new Coin();\n  feeCoin.setDenom(\"uband\");\n  feeCoin.setAmount(\"1000\");\n\n  const requestMessage = new Message.MsgCreateOracleScript(\n    title,\n    desc,\n    schema,\n    source_code_url,\n    Buffer.from(code),\n    owner,\n    sender\n  );\n\n  const signedTx = await createSignedTransaction(requestMessage, sender, pubkey, privateKey);\n  const sendTx = await client.sendTxBlockMode(signedTx);\n\n  return sendTx;\n}\n\nexport async function createMsgEditOS(\n  id,\n  title,\n  desc,\n  schema,\n  source_code_url,\n  code,\n  sender,\n  owner,\n  privateKey,\n  pubkey\n) {\n  let coin = new Coin();\n  coin.setDenom(\"uband\");\n  coin.setAmount(\"1000000\");\n\n  let feeCoin = new Coin();\n  feeCoin.setDenom(\"uband\");\n  feeCoin.setAmount(\"1000\");\n\n  const requestMessage = new Message.MsgEditOracleScript(\n    id,\n    title,\n    desc,\n    schema,\n    source_code_url,\n    Buffer.from(code),\n    owner,\n    sender\n  );\n\n  const signedTx = await createSignedTransaction(requestMessage, sender, pubkey, privateKey);\n  const sendTx = await client.sendTxBlockMode(signedTx);\n\n  return sendTx;\n}\n\nexport async function getRawPreview(\n  title,\n  desc,\n  schema,\n  source_code_url,\n  code,\n  sender,\n  owner,\n  privateKey,\n  pubkey\n) {\n  let coin = new Coin();\n  coin.setDenom(\"uband\");\n  coin.setAmount(\"1000000\");\n\n  let feeCoin = new Coin();\n  feeCoin.setDenom(\"uband\");\n  feeCoin.setAmount(\"1000\");\n\n  const requestMessage = new Message.MsgCreateOracleScript(\n    title,\n    desc,\n    schema,\n    source_code_url,\n    Buffer.from(code),\n    owner,\n    sender\n  );\n\n  const fee = new Fee();\n  fee.setAmountList([feeCoin]);\n  fee.setGasLimit(1000000);\n  const chainId = await client.getChainId();\n  const txn = new Transaction();\n  txn.withMessages(requestMessage);\n  await txn.withSender(client, sender);\n  txn.withChainId(chainId);\n  txn.withFee(fee);\n  txn.withMemo(\"\");\n\n  const signDoc = txn.getSignDoc(pubkey);\n  const signature = privateKey.sign(signDoc);\n\n  const txRawBytes = txn.getTxData(signature, pubkey);\n\n  return txRawBytes;\n}\n\nexport async function getRawPreviewEditOs(\n  title,\n  desc,\n  schema,\n  source_code_url,\n  code,\n  sender,\n  owner,\n  privateKey,\n  pubkey\n) {\n  let coin = new Coin();\n  coin.setDenom(\"uband\");\n  coin.setAmount(\"1000000\");\n\n  let feeCoin = new Coin();\n  feeCoin.setDenom(\"uband\");\n  feeCoin.setAmount(\"1000\");\n\n  const requestMessage = new Message.MsgCreateOracleScript(\n    title,\n    desc,\n    schema,\n    source_code_url,\n    Buffer.from(code),\n    owner,\n    sender\n  );\n\n  const fee = new Fee();\n  fee.setAmountList([feeCoin]);\n  fee.setGasLimit(1000000);\n  const chainId = await client.getChainId();\n  const txn = new Transaction();\n  txn.withMessages(requestMessage);\n  await txn.withSender(client, sender);\n  txn.withChainId(chainId);\n  txn.withFee(fee);\n  txn.withMemo(\"\");\n\n  const signDoc = txn.getSignDoc(pubkey);\n  const signature = privateKey.sign(signDoc);\n\n  const txRawBytes = txn.getTxData(signature, pubkey);\n\n  return txRawBytes;\n}\n\nexport async function withdrawReward(delegator, validator, sender, pubkey, privateKey) {\n  const msg = new Message.MsgWithdrawDelegatorReward(delegator, validator);\n  const signedTx = await createSignedTransaction(msg, sender, pubkey, privateKey);\n  const response = await client.sendTxBlockMode(signedTx);\n  return response;\n}\n\nexport async function createSignedTransaction(msg, sender, pubkey, privateKey) {\n  let feeCoin = new Coin();\n  feeCoin.setDenom(\"uband\");\n  feeCoin.setAmount(\"1000\");\n\n  const fee = new Fee();\n  fee.setAmountList([feeCoin]);\n  fee.setGasLimit(1000000);\n  const chainId = await client.getChainId();\n  const txn = new Transaction();\n  txn.withMessages(msg);\n  await txn.withSender(client, sender);\n  txn.withChainId(chainId);\n  txn.withFee(fee);\n  txn.withMemo(\"From Bandchain.js Demo App\");\n\n  const signDoc = txn.getSignDoc(pubkey);\n  const signature = privateKey.sign(signDoc);\n\n  const txRawBytes = txn.getTxData(signature, pubkey);\n\n  return txRawBytes;\n}\n"]},"metadata":{},"sourceType":"module"}