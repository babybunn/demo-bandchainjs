{"ast":null,"code":"var _jsxFileName = \"/Users/pangp/Band/demo-bandchainjs/src/components/FormConnectWallet.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { getWallet } from \"../band\";\nimport { useDispatch } from \"react-redux\";\nimport { addWallet, updateBalance } from \"../redux/walletSlice\";\nimport { gql, useLazyQuery } from \"@apollo/client\";\nimport { useSelector } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function FormConnectWallet() {\n  _s();\n\n  const wallet = useSelector(state => state.wallet);\n  const dispatch = useDispatch();\n  const [mnemonic, setMnemonic] = useState(\"\");\n  const GET_BALANCE = gql`\n    query GetBalance($address: String!) {\n      accounts(where: { address: { _eq: $address } }) {\n        balance\n      }\n    }\n  `;\n  const [getBalance, {\n    loading,\n    error,\n    data\n  }] = useLazyQuery(GET_BALANCE);\n  useEffect(() => {\n    getBalance({\n      variables: {\n        address: wallet.address\n      }\n    });\n  }, [wallet, getBalance]);\n\n  const handleConnectButton = e => {\n    e.preventDefault();\n\n    if (mnemonic.length > 0 && mnemonic !== \"\") {\n      const {\n        sender,\n        privateKey,\n        pubkey\n      } = getWallet(mnemonic);\n\n      if (sender) {\n        dispatch(addWallet({\n          address: sender,\n          name: sender,\n          privateKey: privateKey,\n          pubkey: pubkey\n        }));\n\n        if (data) {\n          console.log(data);\n          const uband = data.accounts[0].balance.split(\"uband\")[0];\n          dispatch(updateBalance({\n            balance: uband / 1e6\n          }));\n        }\n\n        if (loading) console.error(loading);\n        if (error) console.error(error);\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-inner\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-5\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-group mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"input-address\",\n            className: \"block text-sm font-medium text-gray-700 mb-1\",\n            children: \"Enter mnemonic phrase\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"focus:outline-none focus:ring-2 focus:ring-gray-200 block w-full p-2 sm:text-sm border-solid border-2 border-gray-200 rounded-md\",\n            type: \"text\",\n            id: \"input-address\",\n            valur: mnemonic,\n            onChange: e => setMnemonic(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: e => handleConnectButton(e),\n        className: \"button block w-full bg-purple-600 text-white py-2 px-4 rounded-xl hover:bg-purple-700 focus:outline-none focus:ring-purple-600 focus:ring-opacity-50 transition duration-500 ease-in-out\",\n        children: \"Connect Wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n\n_s(FormConnectWallet, \"i+tb1laJjIlKlkkDAOxAL2wJuzU=\", false, function () {\n  return [useSelector, useDispatch, useLazyQuery];\n});\n\n_c = FormConnectWallet;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormConnectWallet\");","map":{"version":3,"sources":["/Users/pangp/Band/demo-bandchainjs/src/components/FormConnectWallet.js"],"names":["useState","useEffect","getWallet","useDispatch","addWallet","updateBalance","gql","useLazyQuery","useSelector","FormConnectWallet","wallet","state","dispatch","mnemonic","setMnemonic","GET_BALANCE","getBalance","loading","error","data","variables","address","handleConnectButton","e","preventDefault","length","sender","privateKey","pubkey","name","console","log","uband","accounts","balance","split","target","value"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,SAAT,QAA0B,SAA1B;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,SAAT,EAAoBC,aAApB,QAAyC,sBAAzC;AACA,SAASC,GAAT,EAAcC,YAAd,QAAkC,gBAAlC;AACA,SAASC,WAAT,QAA4B,aAA5B;;AAEA,eAAe,SAASC,iBAAT,GAA6B;AAAA;;AAC1C,QAAMC,MAAM,GAAGF,WAAW,CAAEG,KAAD,IAAWA,KAAK,CAACD,MAAlB,CAA1B;AACA,QAAME,QAAQ,GAAGT,WAAW,EAA5B;AACA,QAAM,CAACU,QAAD,EAAWC,WAAX,IAA0Bd,QAAQ,CAAC,EAAD,CAAxC;AAEA,QAAMe,WAAW,GAAGT,GAAI;AAC1B;AACA;AACA;AACA;AACA;AACA,GANE;AAQA,QAAM,CAACU,UAAD,EAAa;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,GAAb,IAAyCZ,YAAY,CAACQ,WAAD,CAA3D;AAEAd,EAAAA,SAAS,CAAC,MAAM;AACde,IAAAA,UAAU,CAAC;AAAEI,MAAAA,SAAS,EAAE;AAAEC,QAAAA,OAAO,EAAEX,MAAM,CAACW;AAAlB;AAAb,KAAD,CAAV;AACD,GAFQ,EAEN,CAACX,MAAD,EAASM,UAAT,CAFM,CAAT;;AAIA,QAAMM,mBAAmB,GAAIC,CAAD,IAAO;AACjCA,IAAAA,CAAC,CAACC,cAAF;;AACA,QAAIX,QAAQ,CAACY,MAAT,GAAkB,CAAlB,IAAuBZ,QAAQ,KAAK,EAAxC,EAA4C;AAC1C,YAAM;AAAEa,QAAAA,MAAF;AAAUC,QAAAA,UAAV;AAAsBC,QAAAA;AAAtB,UAAiC1B,SAAS,CAACW,QAAD,CAAhD;;AACA,UAAIa,MAAJ,EAAY;AACVd,QAAAA,QAAQ,CACNR,SAAS,CAAC;AACRiB,UAAAA,OAAO,EAAEK,MADD;AAERG,UAAAA,IAAI,EAAEH,MAFE;AAGRC,UAAAA,UAAU,EAAEA,UAHJ;AAIRC,UAAAA,MAAM,EAAEA;AAJA,SAAD,CADH,CAAR;;AASA,YAAIT,IAAJ,EAAU;AACRW,UAAAA,OAAO,CAACC,GAAR,CAAYZ,IAAZ;AACA,gBAAMa,KAAK,GAAGb,IAAI,CAACc,QAAL,CAAc,CAAd,EAAiBC,OAAjB,CAAyBC,KAAzB,CAA+B,OAA/B,EAAwC,CAAxC,CAAd;AACAvB,UAAAA,QAAQ,CACNP,aAAa,CAAC;AACZ6B,YAAAA,OAAO,EAAEF,KAAK,GAAG;AADL,WAAD,CADP,CAAR;AAKD;;AACD,YAAIf,OAAJ,EAAaa,OAAO,CAACZ,KAAR,CAAcD,OAAd;AACb,YAAIC,KAAJ,EAAWY,OAAO,CAACZ,KAAR,CAAcA,KAAd;AACZ;AACF;AACF,GA3BD;;AA6BA,sBACE;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA,+BACE;AAAK,UAAA,SAAS,EAAC,kBAAf;AAAA,kCACE;AAAO,YAAA,OAAO,EAAC,eAAf;AAA+B,YAAA,SAAS,EAAC,8CAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAIE;AACE,YAAA,SAAS,EAAC,kIADZ;AAEE,YAAA,IAAI,EAAC,MAFP;AAGE,YAAA,EAAE,EAAC,eAHL;AAIE,YAAA,KAAK,EAAEL,QAJT;AAKE,YAAA,QAAQ,EAAGU,CAAD,IAAOT,WAAW,CAACS,CAAC,CAACa,MAAF,CAASC,KAAV;AAL9B;AAAA;AAAA;AAAA;AAAA,kBAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eAeE;AACE,QAAA,OAAO,EAAGd,CAAD,IAAOD,mBAAmB,CAACC,CAAD,CADrC;AAEE,QAAA,SAAS,EAAC,0LAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAfF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AA0BD;;GA1EuBd,iB;UACPD,W,EACEL,W,EAW8BI,Y;;;KAbzBE,iB","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { getWallet } from \"../band\";\nimport { useDispatch } from \"react-redux\";\nimport { addWallet, updateBalance } from \"../redux/walletSlice\";\nimport { gql, useLazyQuery } from \"@apollo/client\";\nimport { useSelector } from \"react-redux\";\n\nexport default function FormConnectWallet() {\n  const wallet = useSelector((state) => state.wallet);\n  const dispatch = useDispatch();\n  const [mnemonic, setMnemonic] = useState(\"\");\n\n  const GET_BALANCE = gql`\n    query GetBalance($address: String!) {\n      accounts(where: { address: { _eq: $address } }) {\n        balance\n      }\n    }\n  `;\n\n  const [getBalance, { loading, error, data }] = useLazyQuery(GET_BALANCE);\n\n  useEffect(() => {\n    getBalance({ variables: { address: wallet.address } });\n  }, [wallet, getBalance]);\n\n  const handleConnectButton = (e) => {\n    e.preventDefault();\n    if (mnemonic.length > 0 && mnemonic !== \"\") {\n      const { sender, privateKey, pubkey } = getWallet(mnemonic);\n      if (sender) {\n        dispatch(\n          addWallet({\n            address: sender,\n            name: sender,\n            privateKey: privateKey,\n            pubkey: pubkey,\n          })\n        );\n\n        if (data) {\n          console.log(data);\n          const uband = data.accounts[0].balance.split(\"uband\")[0];\n          dispatch(\n            updateBalance({\n              balance: uband / 1e6,\n            })\n          );\n        }\n        if (loading) console.error(loading);\n        if (error) console.error(error);\n      }\n    }\n  };\n\n  return (\n    <div>\n      <div className=\"card-inner\">\n        <div className=\"mb-5\">\n          <div className=\"input-group mb-3\">\n            <label htmlFor=\"input-address\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Enter mnemonic phrase\n            </label>\n            <input\n              className=\"focus:outline-none focus:ring-2 focus:ring-gray-200 block w-full p-2 sm:text-sm border-solid border-2 border-gray-200 rounded-md\"\n              type=\"text\"\n              id=\"input-address\"\n              valur={mnemonic}\n              onChange={(e) => setMnemonic(e.target.value)}\n            />\n          </div>\n        </div>\n        <button\n          onClick={(e) => handleConnectButton(e)}\n          className=\"button block w-full bg-purple-600 text-white py-2 px-4 rounded-xl hover:bg-purple-700 focus:outline-none focus:ring-purple-600 focus:ring-opacity-50 transition duration-500 ease-in-out\"\n        >\n          Connect Wallet\n        </button>\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}