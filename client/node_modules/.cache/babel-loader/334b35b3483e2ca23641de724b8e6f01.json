{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MsgTransfer = exports.MsgVote = exports.MsgWithdrawDelegatorReward = exports.MsgBeginRedelegate = exports.MsgUndelegate = exports.MsgDelegate = exports.MsgSend = exports.MsgRequestData = void 0;\n\nconst any_pb_1 = require(\"google-protobuf/google/protobuf/any_pb\");\n\nconst constant_1 = require(\"./constant\");\n\nconst error_1 = require(\"./error\");\n\nconst tx_pb_1 = require(\"../proto/oracle/v1/tx_pb\");\n\nconst tx_pb_2 = require(\"../proto/cosmos/bank/v1beta1/tx_pb\");\n\nconst tx_pb_3 = require(\"../proto/cosmos/staking/v1beta1/tx_pb\");\n\nconst tx_pb_4 = require(\"../proto/cosmos/distribution/v1beta1/tx_pb\");\n\nconst gov_pb_1 = require(\"../proto/cosmos/gov/v1beta1/gov_pb\");\n\nconst tx_pb_5 = require(\"../proto/ibc/applications/transfer/v1/tx_pb\");\n\nclass MsgRequestData extends tx_pb_1.MsgRequestData {\n  constructor(oracleScriptId, calldata, askCount, minCount, clientId, sender, feeLimitList = [], prepareGas = 50000, executeGas = 300000) {\n    super();\n    this.setOracleScriptId(oracleScriptId);\n    this.setCalldata(calldata);\n    this.setAskCount(askCount);\n    this.setMinCount(minCount);\n    this.setClientId(clientId);\n    this.setFeeLimitList(feeLimitList);\n    this.setPrepareGas(prepareGas);\n    this.setExecuteGas(executeGas);\n    this.setSender(sender);\n  }\n\n  toAny() {\n    this.validate();\n    const anyMsg = new any_pb_1.Any();\n    const name = 'oracle.v1.MsgRequestData';\n    anyMsg.pack(this.serializeBinary(), name, '/');\n    return anyMsg;\n  }\n\n  toJSON() {\n    return {\n      type: 'oracle/Request',\n      value: {\n        ask_count: this.getAskCount().toString(),\n        calldata: this.getCalldata_asB64(),\n        oracle_script_id: this.getOracleScriptId().toString(),\n        min_count: this.getMinCount().toString(),\n        client_id: this.getClientId(),\n        sender: this.getSender(),\n        fee_limit: this.getFeeLimitList().map(coin => coin.toObject()),\n        prepare_gas: this.getPrepareGas().toString(),\n        execute_gas: this.getExecuteGas().toString()\n      }\n    };\n  }\n\n  validate() {\n    if (this.getOracleScriptId() <= 0) throw new error_1.NegativeIntegerError('oracleScriptId cannot be less than zero');\n    if (!Number.isInteger(this.getOracleScriptId())) throw new error_1.ValueError('oracleScriptId is not an integer');\n    if (!Number.isInteger(this.getAskCount())) throw new error_1.ValueError('askCount is not an integer');\n    if (!Number.isInteger(this.getMinCount())) throw new error_1.ValueError('minCount is not an integer');\n    if (this.getCalldata().length > constant_1.MAX_DATA_SIZE) throw new error_1.ValueTooLargeError('Too large calldata');\n    if (this.getMinCount() <= 0) throw new error_1.ValueError(`Invalid minCount, got: minCount: ${this.getMinCount()}`);\n    if (this.getAskCount() < this.getMinCount()) throw new error_1.ValueError(`Invalid askCount got: minCount: ${this.getMinCount()}, askCount: ${this.getAskCount()}`);\n    this.getFeeLimitList().forEach(coin => {\n      if (Number(coin.getAmount()) && Number(coin.getAmount()) < 0) {\n        throw new error_1.NegativeIntegerError('Fee limit cannot be less than zero');\n      } else if (!Number(coin.getAmount())) {\n        throw new error_1.NotIntegerError('Invalid fee limit, fee limit should be a number');\n      }\n    });\n  }\n\n}\n\nexports.MsgRequestData = MsgRequestData;\n\nclass MsgSend extends tx_pb_2.MsgSend {\n  constructor(from, to, amountList) {\n    super();\n    this.setFromAddress(from);\n    this.setToAddress(to);\n    this.setAmountList(amountList);\n  }\n\n  toAny() {\n    this.validate();\n    const anyMsg = new any_pb_1.Any();\n    const name = 'cosmos.bank.v1beta1.MsgSend';\n    anyMsg.pack(this.serializeBinary(), name, '/');\n    return anyMsg;\n  }\n\n  toJSON() {\n    return {\n      type: 'cosmos-sdk/MsgSend',\n      value: {\n        from_address: this.getFromAddress(),\n        to_address: this.getToAddress(),\n        amount: this.getAmountList().map(coin => coin.toObject())\n      }\n    };\n  }\n\n  validate() {\n    if (this.getAmountList().length === 0) {\n      throw new error_1.InsufficientCoinError('Expect at least 1 coin');\n    }\n\n    if (this.getToAddress() === '' || this.getFromAddress() === '') {\n      throw new error_1.ValueError('Address should not be an empty string');\n    }\n  }\n\n}\n\nexports.MsgSend = MsgSend;\n\nclass MsgDelegate extends tx_pb_3.MsgDelegate {\n  constructor(delegator, validator, amount) {\n    super();\n    this.setDelegatorAddress(delegator);\n    this.setValidatorAddress(validator);\n    this.setAmount(amount);\n  }\n\n  toAny() {\n    this.validate();\n    const anyMsg = new any_pb_1.Any();\n    const name = 'cosmos.staking.v1beta1.MsgDelegate';\n    anyMsg.pack(this.serializeBinary(), name, '/');\n    return anyMsg;\n  }\n\n  toJSON() {\n    return {\n      type: 'cosmos-sdk/MsgDelegate',\n      value: {\n        delegator_address: this.getDelegatorAddress(),\n        validator_address: this.getValidatorAddress(),\n        amount: this.getAmount().toObject()\n      }\n    };\n  }\n\n  validate() {\n    if (this.getAmount() === undefined) {\n      throw new error_1.InsufficientCoinError('Expect at least 1 coin');\n    }\n\n    if (this.getDelegatorAddress() === '' || this.getValidatorAddress() === '') {\n      throw new error_1.ValueError('Address should not be an empty string');\n    }\n  }\n\n}\n\nexports.MsgDelegate = MsgDelegate;\n\nclass MsgUndelegate extends tx_pb_3.MsgUndelegate {\n  constructor(delegator, validator, amount) {\n    super();\n    this.setDelegatorAddress(delegator);\n    this.setValidatorAddress(validator);\n    this.setAmount(amount);\n  }\n\n  toAny() {\n    this.validate();\n    const anyMsg = new any_pb_1.Any();\n    const name = 'cosmos.staking.v1beta1.MsgUndelegate';\n    anyMsg.pack(this.serializeBinary(), name, '/');\n    return anyMsg;\n  }\n\n  toJSON() {\n    return {\n      type: 'cosmos-sdk/MsgUndelegate',\n      value: {\n        delegator_address: this.getDelegatorAddress(),\n        validator_address: this.getValidatorAddress(),\n        amount: this.getAmount().toObject()\n      }\n    };\n  }\n\n  validate() {\n    if (this.getAmount() === undefined) {\n      throw new error_1.InsufficientCoinError('Expect at least 1 coin');\n    }\n\n    if (this.getDelegatorAddress() === '' || this.getValidatorAddress() === '') {\n      throw new error_1.ValueError('Address should not be an empty string');\n    }\n  }\n\n}\n\nexports.MsgUndelegate = MsgUndelegate;\n\nclass MsgBeginRedelegate extends tx_pb_3.MsgBeginRedelegate {\n  constructor(delegator, srcValidator, dstValidator, amount) {\n    super();\n    this.setDelegatorAddress(delegator);\n    this.setValidatorSrcAddress(srcValidator);\n    this.setValidatorDstAddress(dstValidator);\n    this.setAmount(amount);\n  }\n\n  toAny() {\n    this.validate();\n    const anyMsg = new any_pb_1.Any();\n    const name = 'cosmos.staking.v1beta1.MsgBeginRedelegate';\n    anyMsg.pack(this.serializeBinary(), name, '/');\n    return anyMsg;\n  }\n\n  toJSON() {\n    return {\n      type: 'cosmos-sdk/MsgBeginRedelegate',\n      value: {\n        delegator_address: this.getDelegatorAddress(),\n        validator_src_address: this.getValidatorSrcAddress(),\n        validator_dst_address: this.getValidatorDstAddress(),\n        amount: this.getAmount().toObject()\n      }\n    };\n  }\n\n  validate() {\n    if (this.getAmount() === undefined) {\n      throw new error_1.InsufficientCoinError('Expect at least 1 coin');\n    }\n\n    if (this.getDelegatorAddress() === '' || this.getValidatorSrcAddress() === '' || this.getValidatorDstAddress() === '') {\n      throw new error_1.ValueError('Address should not be an empty string');\n    }\n  }\n\n}\n\nexports.MsgBeginRedelegate = MsgBeginRedelegate;\n\nclass MsgWithdrawDelegatorReward extends tx_pb_4.MsgWithdrawDelegatorReward {\n  constructor(delegator, validator) {\n    super();\n    this.setDelegatorAddress(delegator);\n    this.setValidatorAddress(validator);\n  }\n\n  toAny() {\n    this.validate();\n    const anyMsg = new any_pb_1.Any();\n    const name = 'cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward';\n    anyMsg.pack(this.serializeBinary(), name, '/');\n    return anyMsg;\n  }\n\n  toJSON() {\n    return {\n      type: 'cosmos-sdk/MsgWithdrawDelegationReward',\n      value: {\n        delegator_address: this.getDelegatorAddress(),\n        validator_address: this.getValidatorAddress()\n      }\n    };\n  }\n\n  validate() {\n    if (this.getDelegatorAddress() === '' || this.getValidatorAddress() === '') {\n      throw new error_1.ValueError('Address should not be an empty string');\n    }\n  }\n\n}\n\nexports.MsgWithdrawDelegatorReward = MsgWithdrawDelegatorReward;\n\nclass MsgVote extends gov_pb_1.Vote {\n  constructor(proposalId, voter, option) {\n    super();\n    this.setProposalId(proposalId);\n    this.setVoter(voter);\n    this.setOption(option);\n  }\n\n  toAny() {\n    this.validate();\n    const anyMsg = new any_pb_1.Any();\n    const name = 'cosmos.gov.v1beta1.MsgVote';\n    anyMsg.pack(this.serializeBinary(), name, '/');\n    return anyMsg;\n  }\n\n  toJSON() {\n    return {\n      type: 'cosmos-sdk/MsgVote',\n      value: {\n        proposal_id: this.getProposalId().toString(),\n        voter: this.getVoter(),\n        option: this.getOption()\n      }\n    };\n  }\n\n  validate() {\n    if (this.getProposalId() <= 0) {\n      throw new error_1.NegativeIntegerError('proposalId cannot be less than zero');\n    }\n\n    if (this.getVoter() === '') {\n      throw new error_1.ValueError('Address should not be an empty string');\n    }\n\n    if (this.getOption() === gov_pb_1.VoteOption.VOTE_OPTION_UNSPECIFIED) {\n      throw new error_1.ValueError('VoteOption should not be VOTE_OPTION_UNSPECIFIED');\n    }\n  }\n\n}\n\nexports.MsgVote = MsgVote;\n\nclass MsgTransfer extends tx_pb_5.MsgTransfer {\n  constructor(sourcePort, sourceChannel, sender, receiver, token, timeoutTimestamp) {\n    super();\n    this.setSourcePort(sourcePort);\n    this.setSourceChannel(sourceChannel);\n    this.setSender(sender);\n    this.setReceiver(receiver);\n    this.setToken(token);\n    this.setTimeoutTimestamp(timeoutTimestamp);\n  }\n\n  toAny() {\n    this.validate();\n    const anyMsg = new any_pb_1.Any();\n    const name = 'ibc.applications.transfer.v1.MsgTransfer';\n    anyMsg.pack(this.serializeBinary(), name, '/');\n    return anyMsg;\n  }\n\n  toJSON() {\n    return {\n      type: 'cosmos-sdk/MsgTransfer',\n      value: {\n        source_port: this.getSourcePort(),\n        source_channel: this.getSourceChannel(),\n        sender: this.getSender(),\n        receiver: this.getReceiver(),\n        token: this.getToken().toObject(),\n        timeout_height: {},\n        timeout_timestamp: this.getTimeoutTimestamp().toString()\n      }\n    };\n  }\n\n  validate() {\n    if (this.getSourcePort() === '') {\n      throw new error_1.ValueError('sourcePort should not be an empty string');\n    }\n\n    if (this.getSourceChannel() === '') {\n      throw new error_1.ValueError('sourceChannel should not be an empty string');\n    }\n\n    if (this.getSender() === '') {\n      throw new error_1.ValueError('sender should not be an empty string');\n    }\n\n    if (this.getReceiver() === '') {\n      throw new error_1.ValueError('receiver should not be an empty string');\n    }\n  }\n\n}\n\nexports.MsgTransfer = MsgTransfer;","map":{"version":3,"sources":["/Users/pangp/Band/demo-bandchainjs/node_modules/@bandprotocol/bandchain.js/lib/message.js"],"names":["Object","defineProperty","exports","value","MsgTransfer","MsgVote","MsgWithdrawDelegatorReward","MsgBeginRedelegate","MsgUndelegate","MsgDelegate","MsgSend","MsgRequestData","any_pb_1","require","constant_1","error_1","tx_pb_1","tx_pb_2","tx_pb_3","tx_pb_4","gov_pb_1","tx_pb_5","constructor","oracleScriptId","calldata","askCount","minCount","clientId","sender","feeLimitList","prepareGas","executeGas","setOracleScriptId","setCalldata","setAskCount","setMinCount","setClientId","setFeeLimitList","setPrepareGas","setExecuteGas","setSender","toAny","validate","anyMsg","Any","name","pack","serializeBinary","toJSON","type","ask_count","getAskCount","toString","getCalldata_asB64","oracle_script_id","getOracleScriptId","min_count","getMinCount","client_id","getClientId","getSender","fee_limit","getFeeLimitList","map","coin","toObject","prepare_gas","getPrepareGas","execute_gas","getExecuteGas","NegativeIntegerError","Number","isInteger","ValueError","getCalldata","length","MAX_DATA_SIZE","ValueTooLargeError","forEach","getAmount","NotIntegerError","from","to","amountList","setFromAddress","setToAddress","setAmountList","from_address","getFromAddress","to_address","getToAddress","amount","getAmountList","InsufficientCoinError","delegator","validator","setDelegatorAddress","setValidatorAddress","setAmount","delegator_address","getDelegatorAddress","validator_address","getValidatorAddress","undefined","srcValidator","dstValidator","setValidatorSrcAddress","setValidatorDstAddress","validator_src_address","getValidatorSrcAddress","validator_dst_address","getValidatorDstAddress","Vote","proposalId","voter","option","setProposalId","setVoter","setOption","proposal_id","getProposalId","getVoter","getOption","VoteOption","VOTE_OPTION_UNSPECIFIED","sourcePort","sourceChannel","receiver","token","timeoutTimestamp","setSourcePort","setSourceChannel","setReceiver","setToken","setTimeoutTimestamp","source_port","getSourcePort","source_channel","getSourceChannel","getReceiver","getToken","timeout_height","timeout_timestamp","getTimeoutTimestamp"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,WAAR,GAAsBF,OAAO,CAACG,OAAR,GAAkBH,OAAO,CAACI,0BAAR,GAAqCJ,OAAO,CAACK,kBAAR,GAA6BL,OAAO,CAACM,aAAR,GAAwBN,OAAO,CAACO,WAAR,GAAsBP,OAAO,CAACQ,OAAR,GAAkBR,OAAO,CAACS,cAAR,GAAyB,KAAK,CAAxM;;AACA,MAAMC,QAAQ,GAAGC,OAAO,CAAC,wCAAD,CAAxB;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,YAAD,CAA1B;;AACA,MAAME,OAAO,GAAGF,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMG,OAAO,GAAGH,OAAO,CAAC,0BAAD,CAAvB;;AACA,MAAMI,OAAO,GAAGJ,OAAO,CAAC,oCAAD,CAAvB;;AACA,MAAMK,OAAO,GAAGL,OAAO,CAAC,uCAAD,CAAvB;;AACA,MAAMM,OAAO,GAAGN,OAAO,CAAC,4CAAD,CAAvB;;AACA,MAAMO,QAAQ,GAAGP,OAAO,CAAC,oCAAD,CAAxB;;AACA,MAAMQ,OAAO,GAAGR,OAAO,CAAC,6CAAD,CAAvB;;AACA,MAAMF,cAAN,SAA6BK,OAAO,CAACL,cAArC,CAAoD;AAChDW,EAAAA,WAAW,CAACC,cAAD,EAAiBC,QAAjB,EAA2BC,QAA3B,EAAqCC,QAArC,EAA+CC,QAA/C,EAAyDC,MAAzD,EAAiEC,YAAY,GAAG,EAAhF,EAAoFC,UAAU,GAAG,KAAjG,EAAwGC,UAAU,GAAG,MAArH,EAA6H;AACpI;AACA,SAAKC,iBAAL,CAAuBT,cAAvB;AACA,SAAKU,WAAL,CAAiBT,QAAjB;AACA,SAAKU,WAAL,CAAiBT,QAAjB;AACA,SAAKU,WAAL,CAAiBT,QAAjB;AACA,SAAKU,WAAL,CAAiBT,QAAjB;AACA,SAAKU,eAAL,CAAqBR,YAArB;AACA,SAAKS,aAAL,CAAmBR,UAAnB;AACA,SAAKS,aAAL,CAAmBR,UAAnB;AACA,SAAKS,SAAL,CAAeZ,MAAf;AACH;;AACDa,EAAAA,KAAK,GAAG;AACJ,SAAKC,QAAL;AACA,UAAMC,MAAM,GAAG,IAAI/B,QAAQ,CAACgC,GAAb,EAAf;AACA,UAAMC,IAAI,GAAG,0BAAb;AACAF,IAAAA,MAAM,CAACG,IAAP,CAAY,KAAKC,eAAL,EAAZ,EAAoCF,IAApC,EAA0C,GAA1C;AACA,WAAOF,MAAP;AACH;;AACDK,EAAAA,MAAM,GAAG;AACL,WAAO;AACHC,MAAAA,IAAI,EAAE,gBADH;AAEH9C,MAAAA,KAAK,EAAE;AACH+C,QAAAA,SAAS,EAAE,KAAKC,WAAL,GAAmBC,QAAnB,EADR;AAEH5B,QAAAA,QAAQ,EAAE,KAAK6B,iBAAL,EAFP;AAGHC,QAAAA,gBAAgB,EAAE,KAAKC,iBAAL,GAAyBH,QAAzB,EAHf;AAIHI,QAAAA,SAAS,EAAE,KAAKC,WAAL,GAAmBL,QAAnB,EAJR;AAKHM,QAAAA,SAAS,EAAE,KAAKC,WAAL,EALR;AAMH/B,QAAAA,MAAM,EAAE,KAAKgC,SAAL,EANL;AAOHC,QAAAA,SAAS,EAAE,KAAKC,eAAL,GAAuBC,GAAvB,CAA4BC,IAAD,IAAUA,IAAI,CAACC,QAAL,EAArC,CAPR;AAQHC,QAAAA,WAAW,EAAE,KAAKC,aAAL,GAAqBf,QAArB,EARV;AASHgB,QAAAA,WAAW,EAAE,KAAKC,aAAL,GAAqBjB,QAArB;AATV;AAFJ,KAAP;AAcH;;AACDV,EAAAA,QAAQ,GAAG;AACP,QAAI,KAAKa,iBAAL,MAA4B,CAAhC,EACI,MAAM,IAAIxC,OAAO,CAACuD,oBAAZ,CAAiC,yCAAjC,CAAN;AACJ,QAAI,CAACC,MAAM,CAACC,SAAP,CAAiB,KAAKjB,iBAAL,EAAjB,CAAL,EACI,MAAM,IAAIxC,OAAO,CAAC0D,UAAZ,CAAuB,kCAAvB,CAAN;AACJ,QAAI,CAACF,MAAM,CAACC,SAAP,CAAiB,KAAKrB,WAAL,EAAjB,CAAL,EACI,MAAM,IAAIpC,OAAO,CAAC0D,UAAZ,CAAuB,4BAAvB,CAAN;AACJ,QAAI,CAACF,MAAM,CAACC,SAAP,CAAiB,KAAKf,WAAL,EAAjB,CAAL,EACI,MAAM,IAAI1C,OAAO,CAAC0D,UAAZ,CAAuB,4BAAvB,CAAN;AACJ,QAAI,KAAKC,WAAL,GAAmBC,MAAnB,GAA4B7D,UAAU,CAAC8D,aAA3C,EACI,MAAM,IAAI7D,OAAO,CAAC8D,kBAAZ,CAA+B,oBAA/B,CAAN;AACJ,QAAI,KAAKpB,WAAL,MAAsB,CAA1B,EACI,MAAM,IAAI1C,OAAO,CAAC0D,UAAZ,CAAwB,oCAAmC,KAAKhB,WAAL,EAAmB,EAA9E,CAAN;AACJ,QAAI,KAAKN,WAAL,KAAqB,KAAKM,WAAL,EAAzB,EACI,MAAM,IAAI1C,OAAO,CAAC0D,UAAZ,CAAwB,mCAAkC,KAAKhB,WAAL,EAAmB,eAAc,KAAKN,WAAL,EAAmB,EAA9G,CAAN;AACJ,SAAKW,eAAL,GAAuBgB,OAAvB,CAAgCd,IAAD,IAAU;AACrC,UAAIO,MAAM,CAACP,IAAI,CAACe,SAAL,EAAD,CAAN,IAA4BR,MAAM,CAACP,IAAI,CAACe,SAAL,EAAD,CAAN,GAA2B,CAA3D,EAA8D;AAC1D,cAAM,IAAIhE,OAAO,CAACuD,oBAAZ,CAAiC,oCAAjC,CAAN;AACH,OAFD,MAGK,IAAI,CAACC,MAAM,CAACP,IAAI,CAACe,SAAL,EAAD,CAAX,EAA+B;AAChC,cAAM,IAAIhE,OAAO,CAACiE,eAAZ,CAA4B,iDAA5B,CAAN;AACH;AACJ,KAPD;AAQH;;AA3D+C;;AA6DpD9E,OAAO,CAACS,cAAR,GAAyBA,cAAzB;;AACA,MAAMD,OAAN,SAAsBO,OAAO,CAACP,OAA9B,CAAsC;AAClCY,EAAAA,WAAW,CAAC2D,IAAD,EAAOC,EAAP,EAAWC,UAAX,EAAuB;AAC9B;AACA,SAAKC,cAAL,CAAoBH,IAApB;AACA,SAAKI,YAAL,CAAkBH,EAAlB;AACA,SAAKI,aAAL,CAAmBH,UAAnB;AACH;;AACD1C,EAAAA,KAAK,GAAG;AACJ,SAAKC,QAAL;AACA,UAAMC,MAAM,GAAG,IAAI/B,QAAQ,CAACgC,GAAb,EAAf;AACA,UAAMC,IAAI,GAAG,6BAAb;AACAF,IAAAA,MAAM,CAACG,IAAP,CAAY,KAAKC,eAAL,EAAZ,EAAoCF,IAApC,EAA0C,GAA1C;AACA,WAAOF,MAAP;AACH;;AACDK,EAAAA,MAAM,GAAG;AACL,WAAO;AACHC,MAAAA,IAAI,EAAE,oBADH;AAEH9C,MAAAA,KAAK,EAAE;AACHoF,QAAAA,YAAY,EAAE,KAAKC,cAAL,EADX;AAEHC,QAAAA,UAAU,EAAE,KAAKC,YAAL,EAFT;AAGHC,QAAAA,MAAM,EAAE,KAAKC,aAAL,GAAqB7B,GAArB,CAA0BC,IAAD,IAAUA,IAAI,CAACC,QAAL,EAAnC;AAHL;AAFJ,KAAP;AAQH;;AACDvB,EAAAA,QAAQ,GAAG;AACP,QAAI,KAAKkD,aAAL,GAAqBjB,MAArB,KAAgC,CAApC,EAAuC;AACnC,YAAM,IAAI5D,OAAO,CAAC8E,qBAAZ,CAAkC,wBAAlC,CAAN;AACH;;AACD,QAAI,KAAKH,YAAL,OAAwB,EAAxB,IAA8B,KAAKF,cAAL,OAA0B,EAA5D,EAAgE;AAC5D,YAAM,IAAIzE,OAAO,CAAC0D,UAAZ,CAAuB,uCAAvB,CAAN;AACH;AACJ;;AA/BiC;;AAiCtCvE,OAAO,CAACQ,OAAR,GAAkBA,OAAlB;;AACA,MAAMD,WAAN,SAA0BS,OAAO,CAACT,WAAlC,CAA8C;AAC1Ca,EAAAA,WAAW,CAACwE,SAAD,EAAYC,SAAZ,EAAuBJ,MAAvB,EAA+B;AACtC;AACA,SAAKK,mBAAL,CAAyBF,SAAzB;AACA,SAAKG,mBAAL,CAAyBF,SAAzB;AACA,SAAKG,SAAL,CAAeP,MAAf;AACH;;AACDlD,EAAAA,KAAK,GAAG;AACJ,SAAKC,QAAL;AACA,UAAMC,MAAM,GAAG,IAAI/B,QAAQ,CAACgC,GAAb,EAAf;AACA,UAAMC,IAAI,GAAG,oCAAb;AACAF,IAAAA,MAAM,CAACG,IAAP,CAAY,KAAKC,eAAL,EAAZ,EAAoCF,IAApC,EAA0C,GAA1C;AACA,WAAOF,MAAP;AACH;;AACDK,EAAAA,MAAM,GAAG;AACL,WAAO;AACHC,MAAAA,IAAI,EAAE,wBADH;AAEH9C,MAAAA,KAAK,EAAE;AACHgG,QAAAA,iBAAiB,EAAE,KAAKC,mBAAL,EADhB;AAEHC,QAAAA,iBAAiB,EAAE,KAAKC,mBAAL,EAFhB;AAGHX,QAAAA,MAAM,EAAE,KAAKZ,SAAL,GAAiBd,QAAjB;AAHL;AAFJ,KAAP;AAQH;;AACDvB,EAAAA,QAAQ,GAAG;AACP,QAAI,KAAKqC,SAAL,OAAqBwB,SAAzB,EAAoC;AAChC,YAAM,IAAIxF,OAAO,CAAC8E,qBAAZ,CAAkC,wBAAlC,CAAN;AACH;;AACD,QAAI,KAAKO,mBAAL,OAA+B,EAA/B,IACA,KAAKE,mBAAL,OAA+B,EADnC,EACuC;AACnC,YAAM,IAAIvF,OAAO,CAAC0D,UAAZ,CAAuB,uCAAvB,CAAN;AACH;AACJ;;AAhCyC;;AAkC9CvE,OAAO,CAACO,WAAR,GAAsBA,WAAtB;;AACA,MAAMD,aAAN,SAA4BU,OAAO,CAACV,aAApC,CAAkD;AAC9Cc,EAAAA,WAAW,CAACwE,SAAD,EAAYC,SAAZ,EAAuBJ,MAAvB,EAA+B;AACtC;AACA,SAAKK,mBAAL,CAAyBF,SAAzB;AACA,SAAKG,mBAAL,CAAyBF,SAAzB;AACA,SAAKG,SAAL,CAAeP,MAAf;AACH;;AACDlD,EAAAA,KAAK,GAAG;AACJ,SAAKC,QAAL;AACA,UAAMC,MAAM,GAAG,IAAI/B,QAAQ,CAACgC,GAAb,EAAf;AACA,UAAMC,IAAI,GAAG,sCAAb;AACAF,IAAAA,MAAM,CAACG,IAAP,CAAY,KAAKC,eAAL,EAAZ,EAAoCF,IAApC,EAA0C,GAA1C;AACA,WAAOF,MAAP;AACH;;AACDK,EAAAA,MAAM,GAAG;AACL,WAAO;AACHC,MAAAA,IAAI,EAAE,0BADH;AAEH9C,MAAAA,KAAK,EAAE;AACHgG,QAAAA,iBAAiB,EAAE,KAAKC,mBAAL,EADhB;AAEHC,QAAAA,iBAAiB,EAAE,KAAKC,mBAAL,EAFhB;AAGHX,QAAAA,MAAM,EAAE,KAAKZ,SAAL,GAAiBd,QAAjB;AAHL;AAFJ,KAAP;AAQH;;AACDvB,EAAAA,QAAQ,GAAG;AACP,QAAI,KAAKqC,SAAL,OAAqBwB,SAAzB,EAAoC;AAChC,YAAM,IAAIxF,OAAO,CAAC8E,qBAAZ,CAAkC,wBAAlC,CAAN;AACH;;AACD,QAAI,KAAKO,mBAAL,OAA+B,EAA/B,IACA,KAAKE,mBAAL,OAA+B,EADnC,EACuC;AACnC,YAAM,IAAIvF,OAAO,CAAC0D,UAAZ,CAAuB,uCAAvB,CAAN;AACH;AACJ;;AAhC6C;;AAkClDvE,OAAO,CAACM,aAAR,GAAwBA,aAAxB;;AACA,MAAMD,kBAAN,SAAiCW,OAAO,CAACX,kBAAzC,CAA4D;AACxDe,EAAAA,WAAW,CAACwE,SAAD,EAAYU,YAAZ,EAA0BC,YAA1B,EAAwCd,MAAxC,EAAgD;AACvD;AACA,SAAKK,mBAAL,CAAyBF,SAAzB;AACA,SAAKY,sBAAL,CAA4BF,YAA5B;AACA,SAAKG,sBAAL,CAA4BF,YAA5B;AACA,SAAKP,SAAL,CAAeP,MAAf;AACH;;AACDlD,EAAAA,KAAK,GAAG;AACJ,SAAKC,QAAL;AACA,UAAMC,MAAM,GAAG,IAAI/B,QAAQ,CAACgC,GAAb,EAAf;AACA,UAAMC,IAAI,GAAG,2CAAb;AACAF,IAAAA,MAAM,CAACG,IAAP,CAAY,KAAKC,eAAL,EAAZ,EAAoCF,IAApC,EAA0C,GAA1C;AACA,WAAOF,MAAP;AACH;;AACDK,EAAAA,MAAM,GAAG;AACL,WAAO;AACHC,MAAAA,IAAI,EAAE,+BADH;AAEH9C,MAAAA,KAAK,EAAE;AACHgG,QAAAA,iBAAiB,EAAE,KAAKC,mBAAL,EADhB;AAEHQ,QAAAA,qBAAqB,EAAE,KAAKC,sBAAL,EAFpB;AAGHC,QAAAA,qBAAqB,EAAE,KAAKC,sBAAL,EAHpB;AAIHpB,QAAAA,MAAM,EAAE,KAAKZ,SAAL,GAAiBd,QAAjB;AAJL;AAFJ,KAAP;AASH;;AACDvB,EAAAA,QAAQ,GAAG;AACP,QAAI,KAAKqC,SAAL,OAAqBwB,SAAzB,EAAoC;AAChC,YAAM,IAAIxF,OAAO,CAAC8E,qBAAZ,CAAkC,wBAAlC,CAAN;AACH;;AACD,QAAI,KAAKO,mBAAL,OAA+B,EAA/B,IACA,KAAKS,sBAAL,OAAkC,EADlC,IAEA,KAAKE,sBAAL,OAAkC,EAFtC,EAE0C;AACtC,YAAM,IAAIhG,OAAO,CAAC0D,UAAZ,CAAuB,uCAAvB,CAAN;AACH;AACJ;;AAnCuD;;AAqC5DvE,OAAO,CAACK,kBAAR,GAA6BA,kBAA7B;;AACA,MAAMD,0BAAN,SAAyCa,OAAO,CAACb,0BAAjD,CAA4E;AACxEgB,EAAAA,WAAW,CAACwE,SAAD,EAAYC,SAAZ,EAAuB;AAC9B;AACA,SAAKC,mBAAL,CAAyBF,SAAzB;AACA,SAAKG,mBAAL,CAAyBF,SAAzB;AACH;;AACDtD,EAAAA,KAAK,GAAG;AACJ,SAAKC,QAAL;AACA,UAAMC,MAAM,GAAG,IAAI/B,QAAQ,CAACgC,GAAb,EAAf;AACA,UAAMC,IAAI,GAAG,wDAAb;AACAF,IAAAA,MAAM,CAACG,IAAP,CAAY,KAAKC,eAAL,EAAZ,EAAoCF,IAApC,EAA0C,GAA1C;AACA,WAAOF,MAAP;AACH;;AACDK,EAAAA,MAAM,GAAG;AACL,WAAO;AACHC,MAAAA,IAAI,EAAE,wCADH;AAEH9C,MAAAA,KAAK,EAAE;AACHgG,QAAAA,iBAAiB,EAAE,KAAKC,mBAAL,EADhB;AAEHC,QAAAA,iBAAiB,EAAE,KAAKC,mBAAL;AAFhB;AAFJ,KAAP;AAOH;;AACD5D,EAAAA,QAAQ,GAAG;AACP,QAAI,KAAK0D,mBAAL,OAA+B,EAA/B,IACA,KAAKE,mBAAL,OAA+B,EADnC,EACuC;AACnC,YAAM,IAAIvF,OAAO,CAAC0D,UAAZ,CAAuB,uCAAvB,CAAN;AACH;AACJ;;AA3BuE;;AA6B5EvE,OAAO,CAACI,0BAAR,GAAqCA,0BAArC;;AACA,MAAMD,OAAN,SAAsBe,QAAQ,CAAC4F,IAA/B,CAAoC;AAChC1F,EAAAA,WAAW,CAAC2F,UAAD,EAAaC,KAAb,EAAoBC,MAApB,EAA4B;AACnC;AACA,SAAKC,aAAL,CAAmBH,UAAnB;AACA,SAAKI,QAAL,CAAcH,KAAd;AACA,SAAKI,SAAL,CAAeH,MAAf;AACH;;AACD1E,EAAAA,KAAK,GAAG;AACJ,SAAKC,QAAL;AACA,UAAMC,MAAM,GAAG,IAAI/B,QAAQ,CAACgC,GAAb,EAAf;AACA,UAAMC,IAAI,GAAG,4BAAb;AACAF,IAAAA,MAAM,CAACG,IAAP,CAAY,KAAKC,eAAL,EAAZ,EAAoCF,IAApC,EAA0C,GAA1C;AACA,WAAOF,MAAP;AACH;;AACDK,EAAAA,MAAM,GAAG;AACL,WAAO;AACHC,MAAAA,IAAI,EAAE,oBADH;AAEH9C,MAAAA,KAAK,EAAE;AACHoH,QAAAA,WAAW,EAAE,KAAKC,aAAL,GAAqBpE,QAArB,EADV;AAEH8D,QAAAA,KAAK,EAAE,KAAKO,QAAL,EAFJ;AAGHN,QAAAA,MAAM,EAAE,KAAKO,SAAL;AAHL;AAFJ,KAAP;AAQH;;AACDhF,EAAAA,QAAQ,GAAG;AACP,QAAI,KAAK8E,aAAL,MAAwB,CAA5B,EAA+B;AAC3B,YAAM,IAAIzG,OAAO,CAACuD,oBAAZ,CAAiC,qCAAjC,CAAN;AACH;;AACD,QAAI,KAAKmD,QAAL,OAAoB,EAAxB,EAA4B;AACxB,YAAM,IAAI1G,OAAO,CAAC0D,UAAZ,CAAuB,uCAAvB,CAAN;AACH;;AACD,QAAI,KAAKiD,SAAL,OAAqBtG,QAAQ,CAACuG,UAAT,CAAoBC,uBAA7C,EAAsE;AAClE,YAAM,IAAI7G,OAAO,CAAC0D,UAAZ,CAAuB,kDAAvB,CAAN;AACH;AACJ;;AAlC+B;;AAoCpCvE,OAAO,CAACG,OAAR,GAAkBA,OAAlB;;AACA,MAAMD,WAAN,SAA0BiB,OAAO,CAACjB,WAAlC,CAA8C;AAC1CkB,EAAAA,WAAW,CAACuG,UAAD,EAAaC,aAAb,EAA4BlG,MAA5B,EAAoCmG,QAApC,EAA8CC,KAA9C,EAAqDC,gBAArD,EAAuE;AAC9E;AACA,SAAKC,aAAL,CAAmBL,UAAnB;AACA,SAAKM,gBAAL,CAAsBL,aAAtB;AACA,SAAKtF,SAAL,CAAeZ,MAAf;AACA,SAAKwG,WAAL,CAAiBL,QAAjB;AACA,SAAKM,QAAL,CAAcL,KAAd;AACA,SAAKM,mBAAL,CAAyBL,gBAAzB;AACH;;AACDxF,EAAAA,KAAK,GAAG;AACJ,SAAKC,QAAL;AACA,UAAMC,MAAM,GAAG,IAAI/B,QAAQ,CAACgC,GAAb,EAAf;AACA,UAAMC,IAAI,GAAG,0CAAb;AACAF,IAAAA,MAAM,CAACG,IAAP,CAAY,KAAKC,eAAL,EAAZ,EAAoCF,IAApC,EAA0C,GAA1C;AACA,WAAOF,MAAP;AACH;;AACDK,EAAAA,MAAM,GAAG;AACL,WAAO;AACHC,MAAAA,IAAI,EAAE,wBADH;AAEH9C,MAAAA,KAAK,EAAE;AACHoI,QAAAA,WAAW,EAAE,KAAKC,aAAL,EADV;AAEHC,QAAAA,cAAc,EAAE,KAAKC,gBAAL,EAFb;AAGH9G,QAAAA,MAAM,EAAE,KAAKgC,SAAL,EAHL;AAIHmE,QAAAA,QAAQ,EAAE,KAAKY,WAAL,EAJP;AAKHX,QAAAA,KAAK,EAAE,KAAKY,QAAL,GAAgB3E,QAAhB,EALJ;AAMH4E,QAAAA,cAAc,EAAE,EANb;AAOHC,QAAAA,iBAAiB,EAAE,KAAKC,mBAAL,GAA2B3F,QAA3B;AAPhB;AAFJ,KAAP;AAYH;;AACDV,EAAAA,QAAQ,GAAG;AACP,QAAI,KAAK8F,aAAL,OAAyB,EAA7B,EAAiC;AAC7B,YAAM,IAAIzH,OAAO,CAAC0D,UAAZ,CAAuB,0CAAvB,CAAN;AACH;;AACD,QAAI,KAAKiE,gBAAL,OAA4B,EAAhC,EAAoC;AAChC,YAAM,IAAI3H,OAAO,CAAC0D,UAAZ,CAAuB,6CAAvB,CAAN;AACH;;AACD,QAAI,KAAKb,SAAL,OAAqB,EAAzB,EAA6B;AACzB,YAAM,IAAI7C,OAAO,CAAC0D,UAAZ,CAAuB,sCAAvB,CAAN;AACH;;AACD,QAAI,KAAKkE,WAAL,OAAuB,EAA3B,EAA+B;AAC3B,YAAM,IAAI5H,OAAO,CAAC0D,UAAZ,CAAuB,wCAAvB,CAAN;AACH;AACJ;;AA5CyC;;AA8C9CvE,OAAO,CAACE,WAAR,GAAsBA,WAAtB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MsgTransfer = exports.MsgVote = exports.MsgWithdrawDelegatorReward = exports.MsgBeginRedelegate = exports.MsgUndelegate = exports.MsgDelegate = exports.MsgSend = exports.MsgRequestData = void 0;\nconst any_pb_1 = require(\"google-protobuf/google/protobuf/any_pb\");\nconst constant_1 = require(\"./constant\");\nconst error_1 = require(\"./error\");\nconst tx_pb_1 = require(\"../proto/oracle/v1/tx_pb\");\nconst tx_pb_2 = require(\"../proto/cosmos/bank/v1beta1/tx_pb\");\nconst tx_pb_3 = require(\"../proto/cosmos/staking/v1beta1/tx_pb\");\nconst tx_pb_4 = require(\"../proto/cosmos/distribution/v1beta1/tx_pb\");\nconst gov_pb_1 = require(\"../proto/cosmos/gov/v1beta1/gov_pb\");\nconst tx_pb_5 = require(\"../proto/ibc/applications/transfer/v1/tx_pb\");\nclass MsgRequestData extends tx_pb_1.MsgRequestData {\n    constructor(oracleScriptId, calldata, askCount, minCount, clientId, sender, feeLimitList = [], prepareGas = 50000, executeGas = 300000) {\n        super();\n        this.setOracleScriptId(oracleScriptId);\n        this.setCalldata(calldata);\n        this.setAskCount(askCount);\n        this.setMinCount(minCount);\n        this.setClientId(clientId);\n        this.setFeeLimitList(feeLimitList);\n        this.setPrepareGas(prepareGas);\n        this.setExecuteGas(executeGas);\n        this.setSender(sender);\n    }\n    toAny() {\n        this.validate();\n        const anyMsg = new any_pb_1.Any();\n        const name = 'oracle.v1.MsgRequestData';\n        anyMsg.pack(this.serializeBinary(), name, '/');\n        return anyMsg;\n    }\n    toJSON() {\n        return {\n            type: 'oracle/Request',\n            value: {\n                ask_count: this.getAskCount().toString(),\n                calldata: this.getCalldata_asB64(),\n                oracle_script_id: this.getOracleScriptId().toString(),\n                min_count: this.getMinCount().toString(),\n                client_id: this.getClientId(),\n                sender: this.getSender(),\n                fee_limit: this.getFeeLimitList().map((coin) => coin.toObject()),\n                prepare_gas: this.getPrepareGas().toString(),\n                execute_gas: this.getExecuteGas().toString(),\n            },\n        };\n    }\n    validate() {\n        if (this.getOracleScriptId() <= 0)\n            throw new error_1.NegativeIntegerError('oracleScriptId cannot be less than zero');\n        if (!Number.isInteger(this.getOracleScriptId()))\n            throw new error_1.ValueError('oracleScriptId is not an integer');\n        if (!Number.isInteger(this.getAskCount()))\n            throw new error_1.ValueError('askCount is not an integer');\n        if (!Number.isInteger(this.getMinCount()))\n            throw new error_1.ValueError('minCount is not an integer');\n        if (this.getCalldata().length > constant_1.MAX_DATA_SIZE)\n            throw new error_1.ValueTooLargeError('Too large calldata');\n        if (this.getMinCount() <= 0)\n            throw new error_1.ValueError(`Invalid minCount, got: minCount: ${this.getMinCount()}`);\n        if (this.getAskCount() < this.getMinCount())\n            throw new error_1.ValueError(`Invalid askCount got: minCount: ${this.getMinCount()}, askCount: ${this.getAskCount()}`);\n        this.getFeeLimitList().forEach((coin) => {\n            if (Number(coin.getAmount()) && Number(coin.getAmount()) < 0) {\n                throw new error_1.NegativeIntegerError('Fee limit cannot be less than zero');\n            }\n            else if (!Number(coin.getAmount())) {\n                throw new error_1.NotIntegerError('Invalid fee limit, fee limit should be a number');\n            }\n        });\n    }\n}\nexports.MsgRequestData = MsgRequestData;\nclass MsgSend extends tx_pb_2.MsgSend {\n    constructor(from, to, amountList) {\n        super();\n        this.setFromAddress(from);\n        this.setToAddress(to);\n        this.setAmountList(amountList);\n    }\n    toAny() {\n        this.validate();\n        const anyMsg = new any_pb_1.Any();\n        const name = 'cosmos.bank.v1beta1.MsgSend';\n        anyMsg.pack(this.serializeBinary(), name, '/');\n        return anyMsg;\n    }\n    toJSON() {\n        return {\n            type: 'cosmos-sdk/MsgSend',\n            value: {\n                from_address: this.getFromAddress(),\n                to_address: this.getToAddress(),\n                amount: this.getAmountList().map((coin) => coin.toObject()),\n            },\n        };\n    }\n    validate() {\n        if (this.getAmountList().length === 0) {\n            throw new error_1.InsufficientCoinError('Expect at least 1 coin');\n        }\n        if (this.getToAddress() === '' || this.getFromAddress() === '') {\n            throw new error_1.ValueError('Address should not be an empty string');\n        }\n    }\n}\nexports.MsgSend = MsgSend;\nclass MsgDelegate extends tx_pb_3.MsgDelegate {\n    constructor(delegator, validator, amount) {\n        super();\n        this.setDelegatorAddress(delegator);\n        this.setValidatorAddress(validator);\n        this.setAmount(amount);\n    }\n    toAny() {\n        this.validate();\n        const anyMsg = new any_pb_1.Any();\n        const name = 'cosmos.staking.v1beta1.MsgDelegate';\n        anyMsg.pack(this.serializeBinary(), name, '/');\n        return anyMsg;\n    }\n    toJSON() {\n        return {\n            type: 'cosmos-sdk/MsgDelegate',\n            value: {\n                delegator_address: this.getDelegatorAddress(),\n                validator_address: this.getValidatorAddress(),\n                amount: this.getAmount().toObject(),\n            },\n        };\n    }\n    validate() {\n        if (this.getAmount() === undefined) {\n            throw new error_1.InsufficientCoinError('Expect at least 1 coin');\n        }\n        if (this.getDelegatorAddress() === '' ||\n            this.getValidatorAddress() === '') {\n            throw new error_1.ValueError('Address should not be an empty string');\n        }\n    }\n}\nexports.MsgDelegate = MsgDelegate;\nclass MsgUndelegate extends tx_pb_3.MsgUndelegate {\n    constructor(delegator, validator, amount) {\n        super();\n        this.setDelegatorAddress(delegator);\n        this.setValidatorAddress(validator);\n        this.setAmount(amount);\n    }\n    toAny() {\n        this.validate();\n        const anyMsg = new any_pb_1.Any();\n        const name = 'cosmos.staking.v1beta1.MsgUndelegate';\n        anyMsg.pack(this.serializeBinary(), name, '/');\n        return anyMsg;\n    }\n    toJSON() {\n        return {\n            type: 'cosmos-sdk/MsgUndelegate',\n            value: {\n                delegator_address: this.getDelegatorAddress(),\n                validator_address: this.getValidatorAddress(),\n                amount: this.getAmount().toObject(),\n            },\n        };\n    }\n    validate() {\n        if (this.getAmount() === undefined) {\n            throw new error_1.InsufficientCoinError('Expect at least 1 coin');\n        }\n        if (this.getDelegatorAddress() === '' ||\n            this.getValidatorAddress() === '') {\n            throw new error_1.ValueError('Address should not be an empty string');\n        }\n    }\n}\nexports.MsgUndelegate = MsgUndelegate;\nclass MsgBeginRedelegate extends tx_pb_3.MsgBeginRedelegate {\n    constructor(delegator, srcValidator, dstValidator, amount) {\n        super();\n        this.setDelegatorAddress(delegator);\n        this.setValidatorSrcAddress(srcValidator);\n        this.setValidatorDstAddress(dstValidator);\n        this.setAmount(amount);\n    }\n    toAny() {\n        this.validate();\n        const anyMsg = new any_pb_1.Any();\n        const name = 'cosmos.staking.v1beta1.MsgBeginRedelegate';\n        anyMsg.pack(this.serializeBinary(), name, '/');\n        return anyMsg;\n    }\n    toJSON() {\n        return {\n            type: 'cosmos-sdk/MsgBeginRedelegate',\n            value: {\n                delegator_address: this.getDelegatorAddress(),\n                validator_src_address: this.getValidatorSrcAddress(),\n                validator_dst_address: this.getValidatorDstAddress(),\n                amount: this.getAmount().toObject(),\n            },\n        };\n    }\n    validate() {\n        if (this.getAmount() === undefined) {\n            throw new error_1.InsufficientCoinError('Expect at least 1 coin');\n        }\n        if (this.getDelegatorAddress() === '' ||\n            this.getValidatorSrcAddress() === '' ||\n            this.getValidatorDstAddress() === '') {\n            throw new error_1.ValueError('Address should not be an empty string');\n        }\n    }\n}\nexports.MsgBeginRedelegate = MsgBeginRedelegate;\nclass MsgWithdrawDelegatorReward extends tx_pb_4.MsgWithdrawDelegatorReward {\n    constructor(delegator, validator) {\n        super();\n        this.setDelegatorAddress(delegator);\n        this.setValidatorAddress(validator);\n    }\n    toAny() {\n        this.validate();\n        const anyMsg = new any_pb_1.Any();\n        const name = 'cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward';\n        anyMsg.pack(this.serializeBinary(), name, '/');\n        return anyMsg;\n    }\n    toJSON() {\n        return {\n            type: 'cosmos-sdk/MsgWithdrawDelegationReward',\n            value: {\n                delegator_address: this.getDelegatorAddress(),\n                validator_address: this.getValidatorAddress(),\n            },\n        };\n    }\n    validate() {\n        if (this.getDelegatorAddress() === '' ||\n            this.getValidatorAddress() === '') {\n            throw new error_1.ValueError('Address should not be an empty string');\n        }\n    }\n}\nexports.MsgWithdrawDelegatorReward = MsgWithdrawDelegatorReward;\nclass MsgVote extends gov_pb_1.Vote {\n    constructor(proposalId, voter, option) {\n        super();\n        this.setProposalId(proposalId);\n        this.setVoter(voter);\n        this.setOption(option);\n    }\n    toAny() {\n        this.validate();\n        const anyMsg = new any_pb_1.Any();\n        const name = 'cosmos.gov.v1beta1.MsgVote';\n        anyMsg.pack(this.serializeBinary(), name, '/');\n        return anyMsg;\n    }\n    toJSON() {\n        return {\n            type: 'cosmos-sdk/MsgVote',\n            value: {\n                proposal_id: this.getProposalId().toString(),\n                voter: this.getVoter(),\n                option: this.getOption(),\n            },\n        };\n    }\n    validate() {\n        if (this.getProposalId() <= 0) {\n            throw new error_1.NegativeIntegerError('proposalId cannot be less than zero');\n        }\n        if (this.getVoter() === '') {\n            throw new error_1.ValueError('Address should not be an empty string');\n        }\n        if (this.getOption() === gov_pb_1.VoteOption.VOTE_OPTION_UNSPECIFIED) {\n            throw new error_1.ValueError('VoteOption should not be VOTE_OPTION_UNSPECIFIED');\n        }\n    }\n}\nexports.MsgVote = MsgVote;\nclass MsgTransfer extends tx_pb_5.MsgTransfer {\n    constructor(sourcePort, sourceChannel, sender, receiver, token, timeoutTimestamp) {\n        super();\n        this.setSourcePort(sourcePort);\n        this.setSourceChannel(sourceChannel);\n        this.setSender(sender);\n        this.setReceiver(receiver);\n        this.setToken(token);\n        this.setTimeoutTimestamp(timeoutTimestamp);\n    }\n    toAny() {\n        this.validate();\n        const anyMsg = new any_pb_1.Any();\n        const name = 'ibc.applications.transfer.v1.MsgTransfer';\n        anyMsg.pack(this.serializeBinary(), name, '/');\n        return anyMsg;\n    }\n    toJSON() {\n        return {\n            type: 'cosmos-sdk/MsgTransfer',\n            value: {\n                source_port: this.getSourcePort(),\n                source_channel: this.getSourceChannel(),\n                sender: this.getSender(),\n                receiver: this.getReceiver(),\n                token: this.getToken().toObject(),\n                timeout_height: {},\n                timeout_timestamp: this.getTimeoutTimestamp().toString(),\n            },\n        };\n    }\n    validate() {\n        if (this.getSourcePort() === '') {\n            throw new error_1.ValueError('sourcePort should not be an empty string');\n        }\n        if (this.getSourceChannel() === '') {\n            throw new error_1.ValueError('sourceChannel should not be an empty string');\n        }\n        if (this.getSender() === '') {\n            throw new error_1.ValueError('sender should not be an empty string');\n        }\n        if (this.getReceiver() === '') {\n            throw new error_1.ValueError('receiver should not be an empty string');\n        }\n    }\n}\nexports.MsgTransfer = MsgTransfer;\n"]},"metadata":{},"sourceType":"script"}