{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ObiSpec = exports.Obi = exports.ObiBytes = exports.ObiString = exports.ObiStruct = exports.ObiVector = exports.ObiInteger = void 0;\n\nconst error_1 = require(\"./error\");\n\nclass ObiBase {}\n\nclass ObiInteger extends ObiBase {\n  constructor(schema) {\n    super();\n    this.isSigned = schema[0] === 'i';\n    this.sizeInBytes = parseInt(schema.slice(1)) / 8;\n  }\n\n  encode(value) {\n    let newValue = BigInt(value);\n    return Buffer.from([...Array(this.sizeInBytes)].map(() => {\n      const dataByte = newValue % BigInt(1 << 8);\n      newValue /= BigInt(1 << 8);\n      return Number(dataByte);\n    }).reverse());\n  }\n\n  decode(buff) {\n    let value = BigInt(0);\n    let multiplier = BigInt(1);\n\n    for (let i = 0; i < this.sizeInBytes; i++) {\n      value += BigInt(buff.readUInt8(this.sizeInBytes - i - 1)) * multiplier;\n      multiplier *= BigInt(1 << 8);\n    }\n\n    return [value, buff.slice(this.sizeInBytes)];\n  }\n\n}\n\nexports.ObiInteger = ObiInteger;\nObiInteger.REGEX = /^(u|i)(8|16|32|64|128|256)$/;\n\nclass ObiVector extends ObiBase {\n  constructor(schema) {\n    super();\n    this.internalObi = ObiSpec.fromSpec(schema.slice(1, -1));\n  }\n\n  encode(value) {\n    return Buffer.concat([new ObiInteger('u32').encode(value.length), ...value.map(item => this.internalObi.encode(item))]);\n  }\n\n  decode(buff) {\n    let [length, remaining] = new ObiInteger('u32').decode(buff);\n    let value = [];\n\n    for (let i = 0; i < Number(length); i++) {\n      const decodeInternalResult = this.internalObi.decode(remaining);\n      value.push(decodeInternalResult[0]);\n      remaining = decodeInternalResult[1];\n    }\n\n    return [value, remaining];\n  }\n\n}\n\nexports.ObiVector = ObiVector;\nObiVector.REGEX = /^\\[.*\\]$/;\n\nclass ObiStruct extends ObiBase {\n  constructor(schema) {\n    super();\n    this.internalObiKvs = [];\n    let curlyCount = 0;\n    let kv = ['', ''],\n        fill = 0;\n\n    for (let c of schema.slice(1)) {\n      if (c == '{') curlyCount++;else if (curlyCount && c == '}') curlyCount--;else if (!curlyCount && c === ':') {\n        fill = 1;\n        continue;\n      } else if (!curlyCount && (c === ',' || c === '}')) {\n        kv[1] = ObiSpec.fromSpec(kv[1]);\n        this.internalObiKvs.push(kv);\n        kv = ['', ''];\n        fill = 0;\n        continue;\n      }\n      kv[fill] += c;\n    }\n  }\n\n  encode(value) {\n    return Buffer.concat(this.internalObiKvs.map(([k, obi]) => obi.encode(value[k])));\n  }\n\n  decode(buff) {\n    let value = {};\n    let remaining = buff;\n\n    for (let [k, obi] of this.internalObiKvs) {\n      const decodeInternalResult = obi.decode(remaining);\n      value[k] = decodeInternalResult[0];\n      remaining = decodeInternalResult[1];\n    }\n\n    return [value, remaining];\n  }\n\n}\n\nexports.ObiStruct = ObiStruct;\nObiStruct.REGEX = /^{.*}$/;\n\nclass ObiString extends ObiBase {\n  encode(value) {\n    return Buffer.concat([new ObiInteger('u32').encode(BigInt(value.length)), Buffer.from(value)]);\n  }\n\n  decode(buff) {\n    let [length, remaining] = new ObiInteger('u32').decode(buff);\n    return [remaining.slice(0, parseInt(length)).toString(), remaining.slice(parseInt(length))];\n  }\n\n}\n\nexports.ObiString = ObiString;\nObiString.REGEX = /^string$/;\n\nclass ObiBytes {\n  encode(value) {\n    return Buffer.concat([new ObiInteger('u32').encode(value.length), Buffer.from(value)]);\n  }\n\n  decode(buff) {\n    let [length, remaining] = new ObiInteger('u32').decode(buff);\n    return [remaining.slice(0, parseInt(length)), remaining.slice(parseInt(length))];\n  }\n\n}\n\nexports.ObiBytes = ObiBytes;\nObiBytes.REGEX = /^bytes$/;\n\nclass Obi {\n  constructor(schema) {\n    const normalizedSchema = schema.replace(/\\s+/g, '');\n    const tokens = normalizedSchema.split('/');\n    this.inputObi = ObiSpec.fromSpec(tokens[0]);\n    this.outputObi = ObiSpec.fromSpec(tokens[1]);\n  }\n\n  encodeInput(value) {\n    return this.inputObi.encode(value);\n  }\n\n  decodeInput(buff) {\n    const [value, remaining] = this.inputObi.decode(buff);\n    if (remaining.length != 0) throw new error_1.DecodeError('Not all data is consumed after decoding output');\n    return value;\n  }\n\n  encodeOutput(value) {\n    return this.outputObi.encode(value);\n  }\n\n  decodeOutput(buff) {\n    const [value, remaining] = this.outputObi.decode(buff);\n    if (remaining.length != 0) throw new error_1.DecodeError('Not all data is consumed after decoding output');\n    return value;\n  }\n\n}\n\nexports.Obi = Obi;\n\nclass ObiSpec {\n  static fromSpec(schema) {\n    for (let impl of ObiSpec.impls) {\n      if (schema.match(impl.REGEX)) {\n        return new impl(schema);\n      }\n    }\n\n    throw new error_1.SchemaError(`No schema matched: <${schema}>`);\n  }\n\n}\n\nexports.ObiSpec = ObiSpec;\nObiSpec.impls = [ObiInteger, ObiVector, ObiStruct, ObiString, ObiBytes];","map":{"version":3,"sources":["/Users/pangp/Band/demo-bandchainjs/client/node_modules/@bandprotocol/bandchain.js/lib/obi.js"],"names":["Object","defineProperty","exports","value","ObiSpec","Obi","ObiBytes","ObiString","ObiStruct","ObiVector","ObiInteger","error_1","require","ObiBase","constructor","schema","isSigned","sizeInBytes","parseInt","slice","encode","newValue","BigInt","Buffer","from","Array","map","dataByte","Number","reverse","decode","buff","multiplier","i","readUInt8","REGEX","internalObi","fromSpec","concat","length","item","remaining","decodeInternalResult","push","internalObiKvs","curlyCount","kv","fill","c","k","obi","toString","normalizedSchema","replace","tokens","split","inputObi","outputObi","encodeInput","decodeInput","DecodeError","encodeOutput","decodeOutput","impl","impls","match","SchemaError"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ObiSpec = exports.Obi = exports.ObiBytes = exports.ObiString = exports.ObiStruct = exports.ObiVector = exports.ObiInteger = void 0;\nconst error_1 = require(\"./error\");\nclass ObiBase {\n}\nclass ObiInteger extends ObiBase {\n    constructor(schema) {\n        super();\n        this.isSigned = schema[0] === 'i';\n        this.sizeInBytes = parseInt(schema.slice(1)) / 8;\n    }\n    encode(value) {\n        let newValue = BigInt(value);\n        return Buffer.from([...Array(this.sizeInBytes)]\n            .map(() => {\n            const dataByte = newValue % BigInt(1 << 8);\n            newValue /= BigInt(1 << 8);\n            return Number(dataByte);\n        })\n            .reverse());\n    }\n    decode(buff) {\n        let value = BigInt(0);\n        let multiplier = BigInt(1);\n        for (let i = 0; i < this.sizeInBytes; i++) {\n            value += BigInt(buff.readUInt8(this.sizeInBytes - i - 1)) * multiplier;\n            multiplier *= BigInt(1 << 8);\n        }\n        return [value, buff.slice(this.sizeInBytes)];\n    }\n}\nexports.ObiInteger = ObiInteger;\nObiInteger.REGEX = /^(u|i)(8|16|32|64|128|256)$/;\nclass ObiVector extends ObiBase {\n    constructor(schema) {\n        super();\n        this.internalObi = ObiSpec.fromSpec(schema.slice(1, -1));\n    }\n    encode(value) {\n        return Buffer.concat([\n            new ObiInteger('u32').encode(value.length),\n            ...value.map((item) => this.internalObi.encode(item)),\n        ]);\n    }\n    decode(buff) {\n        let [length, remaining] = new ObiInteger('u32').decode(buff);\n        let value = [];\n        for (let i = 0; i < Number(length); i++) {\n            const decodeInternalResult = this.internalObi.decode(remaining);\n            value.push(decodeInternalResult[0]);\n            remaining = decodeInternalResult[1];\n        }\n        return [value, remaining];\n    }\n}\nexports.ObiVector = ObiVector;\nObiVector.REGEX = /^\\[.*\\]$/;\nclass ObiStruct extends ObiBase {\n    constructor(schema) {\n        super();\n        this.internalObiKvs = [];\n        let curlyCount = 0;\n        let kv = ['', ''], fill = 0;\n        for (let c of schema.slice(1)) {\n            if (c == '{')\n                curlyCount++;\n            else if (curlyCount && c == '}')\n                curlyCount--;\n            else if (!curlyCount && c === ':') {\n                fill = 1;\n                continue;\n            }\n            else if (!curlyCount && (c === ',' || c === '}')) {\n                kv[1] = ObiSpec.fromSpec(kv[1]);\n                this.internalObiKvs.push(kv);\n                kv = ['', ''];\n                fill = 0;\n                continue;\n            }\n            kv[fill] += c;\n        }\n    }\n    encode(value) {\n        return Buffer.concat(this.internalObiKvs.map(([k, obi]) => obi.encode(value[k])));\n    }\n    decode(buff) {\n        let value = {};\n        let remaining = buff;\n        for (let [k, obi] of this.internalObiKvs) {\n            const decodeInternalResult = obi.decode(remaining);\n            value[k] = decodeInternalResult[0];\n            remaining = decodeInternalResult[1];\n        }\n        return [value, remaining];\n    }\n}\nexports.ObiStruct = ObiStruct;\nObiStruct.REGEX = /^{.*}$/;\nclass ObiString extends ObiBase {\n    encode(value) {\n        return Buffer.concat([\n            new ObiInteger('u32').encode(BigInt(value.length)),\n            Buffer.from(value),\n        ]);\n    }\n    decode(buff) {\n        let [length, remaining] = new ObiInteger('u32').decode(buff);\n        return [\n            remaining.slice(0, parseInt(length)).toString(),\n            remaining.slice(parseInt(length)),\n        ];\n    }\n}\nexports.ObiString = ObiString;\nObiString.REGEX = /^string$/;\nclass ObiBytes {\n    encode(value) {\n        return Buffer.concat([\n            new ObiInteger('u32').encode(value.length),\n            Buffer.from(value),\n        ]);\n    }\n    decode(buff) {\n        let [length, remaining] = new ObiInteger('u32').decode(buff);\n        return [\n            remaining.slice(0, parseInt(length)),\n            remaining.slice(parseInt(length)),\n        ];\n    }\n}\nexports.ObiBytes = ObiBytes;\nObiBytes.REGEX = /^bytes$/;\nclass Obi {\n    constructor(schema) {\n        const normalizedSchema = schema.replace(/\\s+/g, '');\n        const tokens = normalizedSchema.split('/');\n        this.inputObi = ObiSpec.fromSpec(tokens[0]);\n        this.outputObi = ObiSpec.fromSpec(tokens[1]);\n    }\n    encodeInput(value) {\n        return this.inputObi.encode(value);\n    }\n    decodeInput(buff) {\n        const [value, remaining] = this.inputObi.decode(buff);\n        if (remaining.length != 0)\n            throw new error_1.DecodeError('Not all data is consumed after decoding output');\n        return value;\n    }\n    encodeOutput(value) {\n        return this.outputObi.encode(value);\n    }\n    decodeOutput(buff) {\n        const [value, remaining] = this.outputObi.decode(buff);\n        if (remaining.length != 0)\n            throw new error_1.DecodeError('Not all data is consumed after decoding output');\n        return value;\n    }\n}\nexports.Obi = Obi;\nclass ObiSpec {\n    static fromSpec(schema) {\n        for (let impl of ObiSpec.impls) {\n            if (schema.match(impl.REGEX)) {\n                return new impl(schema);\n            }\n        }\n        throw new error_1.SchemaError(`No schema matched: <${schema}>`);\n    }\n}\nexports.ObiSpec = ObiSpec;\nObiSpec.impls = [ObiInteger, ObiVector, ObiStruct, ObiString, ObiBytes];\n"]},"metadata":{},"sourceType":"script"}