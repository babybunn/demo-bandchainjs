{"ast":null,"code":"// package: cosmos.auth.v1beta1\n// file: cosmos/auth/v1beta1/query.proto\nvar cosmos_auth_v1beta1_query_pb = require(\"../../../cosmos/auth/v1beta1/query_pb\");\n\nvar grpc = require(\"@improbable-eng/grpc-web\").grpc;\n\nvar Query = function () {\n  function Query() {}\n\n  Query.serviceName = \"cosmos.auth.v1beta1.Query\";\n  return Query;\n}();\n\nQuery.Accounts = {\n  methodName: \"Accounts\",\n  service: Query,\n  requestStream: false,\n  responseStream: false,\n  requestType: cosmos_auth_v1beta1_query_pb.QueryAccountsRequest,\n  responseType: cosmos_auth_v1beta1_query_pb.QueryAccountsResponse\n};\nQuery.Account = {\n  methodName: \"Account\",\n  service: Query,\n  requestStream: false,\n  responseStream: false,\n  requestType: cosmos_auth_v1beta1_query_pb.QueryAccountRequest,\n  responseType: cosmos_auth_v1beta1_query_pb.QueryAccountResponse\n};\nQuery.Params = {\n  methodName: \"Params\",\n  service: Query,\n  requestStream: false,\n  responseStream: false,\n  requestType: cosmos_auth_v1beta1_query_pb.QueryParamsRequest,\n  responseType: cosmos_auth_v1beta1_query_pb.QueryParamsResponse\n};\nexports.Query = Query;\n\nfunction QueryClient(serviceHost, options) {\n  this.serviceHost = serviceHost;\n  this.options = options || {};\n}\n\nQueryClient.prototype.accounts = function accounts(requestMessage, metadata, callback) {\n  if (arguments.length === 2) {\n    callback = arguments[1];\n  }\n\n  var client = grpc.unary(Query.Accounts, {\n    request: requestMessage,\n    host: this.serviceHost,\n    metadata: metadata,\n    transport: this.options.transport,\n    debug: this.options.debug,\n    onEnd: function (response) {\n      if (callback) {\n        if (response.status !== grpc.Code.OK) {\n          var err = new Error(response.statusMessage);\n          err.code = response.status;\n          err.metadata = response.trailers;\n          callback(err, null);\n        } else {\n          callback(null, response.message);\n        }\n      }\n    }\n  });\n  return {\n    cancel: function () {\n      callback = null;\n      client.close();\n    }\n  };\n};\n\nQueryClient.prototype.account = function account(requestMessage, metadata, callback) {\n  if (arguments.length === 2) {\n    callback = arguments[1];\n  }\n\n  var client = grpc.unary(Query.Account, {\n    request: requestMessage,\n    host: this.serviceHost,\n    metadata: metadata,\n    transport: this.options.transport,\n    debug: this.options.debug,\n    onEnd: function (response) {\n      if (callback) {\n        if (response.status !== grpc.Code.OK) {\n          var err = new Error(response.statusMessage);\n          err.code = response.status;\n          err.metadata = response.trailers;\n          callback(err, null);\n        } else {\n          callback(null, response.message);\n        }\n      }\n    }\n  });\n  return {\n    cancel: function () {\n      callback = null;\n      client.close();\n    }\n  };\n};\n\nQueryClient.prototype.params = function params(requestMessage, metadata, callback) {\n  if (arguments.length === 2) {\n    callback = arguments[1];\n  }\n\n  var client = grpc.unary(Query.Params, {\n    request: requestMessage,\n    host: this.serviceHost,\n    metadata: metadata,\n    transport: this.options.transport,\n    debug: this.options.debug,\n    onEnd: function (response) {\n      if (callback) {\n        if (response.status !== grpc.Code.OK) {\n          var err = new Error(response.statusMessage);\n          err.code = response.status;\n          err.metadata = response.trailers;\n          callback(err, null);\n        } else {\n          callback(null, response.message);\n        }\n      }\n    }\n  });\n  return {\n    cancel: function () {\n      callback = null;\n      client.close();\n    }\n  };\n};\n\nexports.QueryClient = QueryClient;","map":{"version":3,"sources":["/Users/pangp/Band/demo-bandchainjs/node_modules/@bandprotocol/bandchain.js/proto/cosmos/auth/v1beta1/query_pb_service.js"],"names":["cosmos_auth_v1beta1_query_pb","require","grpc","Query","serviceName","Accounts","methodName","service","requestStream","responseStream","requestType","QueryAccountsRequest","responseType","QueryAccountsResponse","Account","QueryAccountRequest","QueryAccountResponse","Params","QueryParamsRequest","QueryParamsResponse","exports","QueryClient","serviceHost","options","prototype","accounts","requestMessage","metadata","callback","arguments","length","client","unary","request","host","transport","debug","onEnd","response","status","Code","OK","err","Error","statusMessage","code","trailers","message","cancel","close","account","params"],"mappings":"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","sourcesContent":["// package: cosmos.auth.v1beta1\n// file: cosmos/auth/v1beta1/query.proto\n\nvar cosmos_auth_v1beta1_query_pb = require(\"../../../cosmos/auth/v1beta1/query_pb\");\nvar grpc = require(\"@improbable-eng/grpc-web\").grpc;\n\nvar Query = (function () {\n  function Query() {}\n  Query.serviceName = \"cosmos.auth.v1beta1.Query\";\n  return Query;\n}());\n\nQuery.Accounts = {\n  methodName: \"Accounts\",\n  service: Query,\n  requestStream: false,\n  responseStream: false,\n  requestType: cosmos_auth_v1beta1_query_pb.QueryAccountsRequest,\n  responseType: cosmos_auth_v1beta1_query_pb.QueryAccountsResponse\n};\n\nQuery.Account = {\n  methodName: \"Account\",\n  service: Query,\n  requestStream: false,\n  responseStream: false,\n  requestType: cosmos_auth_v1beta1_query_pb.QueryAccountRequest,\n  responseType: cosmos_auth_v1beta1_query_pb.QueryAccountResponse\n};\n\nQuery.Params = {\n  methodName: \"Params\",\n  service: Query,\n  requestStream: false,\n  responseStream: false,\n  requestType: cosmos_auth_v1beta1_query_pb.QueryParamsRequest,\n  responseType: cosmos_auth_v1beta1_query_pb.QueryParamsResponse\n};\n\nexports.Query = Query;\n\nfunction QueryClient(serviceHost, options) {\n  this.serviceHost = serviceHost;\n  this.options = options || {};\n}\n\nQueryClient.prototype.accounts = function accounts(requestMessage, metadata, callback) {\n  if (arguments.length === 2) {\n    callback = arguments[1];\n  }\n  var client = grpc.unary(Query.Accounts, {\n    request: requestMessage,\n    host: this.serviceHost,\n    metadata: metadata,\n    transport: this.options.transport,\n    debug: this.options.debug,\n    onEnd: function (response) {\n      if (callback) {\n        if (response.status !== grpc.Code.OK) {\n          var err = new Error(response.statusMessage);\n          err.code = response.status;\n          err.metadata = response.trailers;\n          callback(err, null);\n        } else {\n          callback(null, response.message);\n        }\n      }\n    }\n  });\n  return {\n    cancel: function () {\n      callback = null;\n      client.close();\n    }\n  };\n};\n\nQueryClient.prototype.account = function account(requestMessage, metadata, callback) {\n  if (arguments.length === 2) {\n    callback = arguments[1];\n  }\n  var client = grpc.unary(Query.Account, {\n    request: requestMessage,\n    host: this.serviceHost,\n    metadata: metadata,\n    transport: this.options.transport,\n    debug: this.options.debug,\n    onEnd: function (response) {\n      if (callback) {\n        if (response.status !== grpc.Code.OK) {\n          var err = new Error(response.statusMessage);\n          err.code = response.status;\n          err.metadata = response.trailers;\n          callback(err, null);\n        } else {\n          callback(null, response.message);\n        }\n      }\n    }\n  });\n  return {\n    cancel: function () {\n      callback = null;\n      client.close();\n    }\n  };\n};\n\nQueryClient.prototype.params = function params(requestMessage, metadata, callback) {\n  if (arguments.length === 2) {\n    callback = arguments[1];\n  }\n  var client = grpc.unary(Query.Params, {\n    request: requestMessage,\n    host: this.serviceHost,\n    metadata: metadata,\n    transport: this.options.transport,\n    debug: this.options.debug,\n    onEnd: function (response) {\n      if (callback) {\n        if (response.status !== grpc.Code.OK) {\n          var err = new Error(response.statusMessage);\n          err.code = response.status;\n          err.metadata = response.trailers;\n          callback(err, null);\n        } else {\n          callback(null, response.message);\n        }\n      }\n    }\n  });\n  return {\n    cancel: function () {\n      callback = null;\n      client.close();\n    }\n  };\n};\n\nexports.QueryClient = QueryClient;\n\n"]},"metadata":{},"sourceType":"script"}