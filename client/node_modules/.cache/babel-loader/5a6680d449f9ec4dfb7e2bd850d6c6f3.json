{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst grpc_web_node_http_transport_1 = require(\"@improbable-eng/grpc-web-node-http-transport\");\n\nconst error_1 = require(\"./error\");\n\nconst query_pb_service_1 = require(\"../proto/oracle/v1/query_pb_service\");\n\nconst query_pb_service_2 = require(\"../proto/cosmos/base/tendermint/v1beta1/query_pb_service\");\n\nconst query_pb_service_3 = require(\"../proto/cosmos/auth/v1beta1/query_pb_service\");\n\nconst service_pb_service_1 = require(\"../proto/cosmos/tx/v1beta1/service_pb_service\");\n\nconst query_pb_1 = require(\"../proto/oracle/v1/query_pb\");\n\nconst query_pb_2 = require(\"../proto/cosmos/base/tendermint/v1beta1/query_pb\");\n\nconst query_pb_3 = require(\"../proto/cosmos/auth/v1beta1/query_pb\");\n\nconst service_pb_1 = require(\"../proto/cosmos/tx/v1beta1/service_pb\");\n\nconst service_pb_2 = require(\"../proto/cosmos/tx/v1beta1/service_pb\");\n\nconst auth_pb_1 = require(\"../proto/cosmos/auth/v1beta1/auth_pb\");\n\nclass Client {\n  constructor(grpcUrl) {\n    this.queryClient = new query_pb_service_1.QueryClient(grpcUrl, {\n      transport: grpc_web_node_http_transport_1.NodeHttpTransport()\n    });\n    this.serviceClient = new query_pb_service_2.ServiceClient(grpcUrl, {\n      transport: grpc_web_node_http_transport_1.NodeHttpTransport()\n    });\n    this.authQueryClient = new query_pb_service_3.QueryClient(grpcUrl, {\n      transport: grpc_web_node_http_transport_1.NodeHttpTransport()\n    });\n    this.txServiceClient = new service_pb_service_1.ServiceClient(grpcUrl, {\n      transport: grpc_web_node_http_transport_1.NodeHttpTransport()\n    });\n  }\n\n  getDataSource(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!Number.isInteger(id)) throw new error_1.NotIntegerError('id is not an integer');\n      const request = new query_pb_1.QueryDataSourceRequest();\n      request.setDataSourceId(id);\n      return new Promise((resolve, reject) => {\n        this.queryClient.dataSource(request, {}, (err, response) => {\n          if (err !== null) {\n            reject(err);\n            return;\n          }\n\n          if (response !== null && response.hasDataSource()) {\n            resolve(response.getDataSource().toObject());\n            return;\n          }\n\n          reject(new error_1.NotFoundError(`data source with ID ${id} does not exist`));\n        });\n      });\n    });\n  }\n\n  getOracleScript(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!Number.isInteger(id)) throw new error_1.NotIntegerError('id is not an integer');\n      const request = new query_pb_1.QueryOracleScriptRequest();\n      request.setOracleScriptId(id);\n      return new Promise((resolve, reject) => {\n        this.queryClient.oracleScript(request, {}, (err, response) => {\n          if (err !== null) {\n            reject(err);\n            return;\n          }\n\n          if (response !== null && response.hasOracleScript()) {\n            resolve(response.getOracleScript().toObject());\n            return;\n          }\n\n          reject(new error_1.NotFoundError(`oracle script with ID ${id} does not exist`));\n        });\n      });\n    });\n  }\n\n  getRequestById(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!Number.isInteger(id)) throw new error_1.NotIntegerError('id is not an integer');\n      const request = new query_pb_1.QueryRequestRequest();\n      request.setRequestId(id);\n      return new Promise((resolve, reject) => {\n        this.queryClient.request(request, {}, (err, response) => {\n          if (err !== null) {\n            reject(err);\n            return;\n          }\n\n          if (response !== null) {\n            resolve(response.toObject());\n          }\n        });\n      });\n    });\n  }\n\n  getReporters(validator) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const request = new query_pb_1.QueryReportersRequest();\n      request.setValidatorAddress(validator);\n      return new Promise((resolve, reject) => {\n        this.queryClient.reporters(request, {}, (err, response) => {\n          if (err !== null) {\n            reject(err);\n            return;\n          }\n\n          if (response !== null) {\n            resolve(response.getReporterList());\n          }\n        });\n      });\n    });\n  }\n\n  getLatestBlock() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const request = new query_pb_2.GetLatestBlockRequest();\n      return new Promise((resolve, reject) => {\n        this.serviceClient.getLatestBlock(request, {}, (err, response) => {\n          if (err !== null) {\n            reject(err);\n            return;\n          }\n\n          if (response !== null) {\n            resolve(response.toObject());\n          }\n        });\n      });\n    });\n  }\n\n  getAccount(address) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const request = new query_pb_3.QueryAccountRequest();\n      request.setAddress(address);\n      return new Promise((resolve, reject) => {\n        this.authQueryClient.account(request, {}, (err, response) => {\n          if (err !== null) {\n            reject(err);\n            return;\n          }\n\n          if (response !== null && response.hasAccount()) {\n            let accBaseAccount = response.getAccount().unpack(auth_pb_1.BaseAccount.deserializeBinary, 'cosmos.auth.v1beta1.BaseAccount');\n\n            if (accBaseAccount !== null) {\n              resolve(accBaseAccount.toObject());\n              return;\n            }\n\n            reject(new error_1.ValueError(`only base account allowed, expected BaseAccount, got ${response.getAccount().getTypeName()}`));\n          }\n        });\n      });\n    });\n  }\n\n  getRequestIdByTxHash(txHash) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const request = new service_pb_1.GetTxRequest();\n      request.setHash(txHash);\n      return new Promise((resolve, reject) => {\n        this.txServiceClient.getTx(request, {}, (err, response) => {\n          if (err !== null) {\n            reject(err);\n            return;\n          }\n\n          if (response === null || !response.hasTxResponse()) {\n            reject(new error_1.NotFoundError('the given tx hash does not exists'));\n          }\n\n          let reqIdList = [];\n          response.toObject().txResponse.logsList.forEach(txLog => {\n            txLog.eventsList.forEach(event => {\n              if (event.type === 'report' || event.type === 'request') {\n                event.attributesList.forEach(attribute => {\n                  if (attribute.key === 'id') {\n                    reqIdList.push(Number(attribute.value));\n                  }\n                });\n              }\n            });\n          });\n\n          if (reqIdList.length === 0) {\n            reject(new error_1.NotFoundError('request ID is not found in given transaction hash'));\n            return;\n          }\n\n          resolve(reqIdList);\n        });\n      });\n    });\n  }\n\n  getChainId() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const latestBlock = yield this.getLatestBlock();\n      return latestBlock.block.header.chainId;\n    });\n  }\n\n  sendTxSyncMode(txBytes) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const request = new service_pb_2.BroadcastTxRequest();\n      request.setTxBytes(txBytes);\n      request.setMode(2);\n      return new Promise((resolve, reject) => {\n        this.txServiceClient.broadcastTx(request, {}, (err, response) => {\n          if (err !== null) {\n            reject(err);\n            return;\n          }\n\n          if (response !== null && response.hasTxResponse()) {\n            resolve(response.getTxResponse().toObject());\n          }\n        });\n      });\n    });\n  }\n\n  sendTxAsyncMode(txBytes) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const request = new service_pb_2.BroadcastTxRequest();\n      request.setTxBytes(txBytes);\n      request.setMode(3);\n      return new Promise((resolve, reject) => {\n        this.txServiceClient.broadcastTx(request, {}, (err, response) => {\n          if (err !== null) {\n            reject(err);\n            return;\n          }\n\n          if (response !== null && response.hasTxResponse()) {\n            resolve(response.getTxResponse().toObject());\n          }\n        });\n      });\n    });\n  }\n\n  sendTxBlockMode(txBytes) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const request = new service_pb_2.BroadcastTxRequest();\n      request.setTxBytes(txBytes);\n      request.setMode(1);\n      return new Promise((resolve, reject) => {\n        this.txServiceClient.broadcastTx(request, {}, (err, response) => {\n          if (err !== null) {\n            reject(err);\n            return;\n          }\n\n          if (response !== null && response.hasTxResponse()) {\n            resolve(response.getTxResponse().toObject());\n          }\n        });\n      });\n    });\n  }\n\n  getReferenceData(pairs, minCount, askCount) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const request = new query_pb_1.QueryRequestPriceRequest();\n      let symbolSet = new Set();\n      pairs.forEach(pair => {\n        let symbols = pair.split('/');\n        symbols.forEach(symbol => {\n          if (symbol === 'USD') return;\n          symbolSet.add(symbol);\n        });\n      });\n      request.setSymbolsList(Array.from(symbolSet));\n      request.setAskCount(askCount);\n      request.setMinCount(minCount);\n      return new Promise((resolve, reject) => {\n        this.queryClient.requestPrice(request, {}, (err, response) => {\n          if (err !== null) {\n            reject(err);\n            return;\n          }\n\n          const finalResult = [];\n          const symbolMap = {};\n          symbolMap['USD'] = {\n            symbol: 'USD',\n            multiplier: 1000000000,\n            px: 1000000000,\n            requestId: 0,\n            resolveTime: Math.floor(Date.now() / 1000)\n          };\n          response.toObject().priceResultsList.forEach(priceResult => {\n            symbolMap[priceResult.symbol] = priceResult;\n          });\n          pairs.forEach(pair => {\n            let [baseSymbol, quoteSymbol] = pair.split('/');\n            finalResult.push({\n              pair,\n              rate: Number(symbolMap[baseSymbol].px) * Number(symbolMap[quoteSymbol].multiplier) / (Number(symbolMap[quoteSymbol].px) * Number(symbolMap[baseSymbol].multiplier)),\n              updatedAt: {\n                base: Number(symbolMap[baseSymbol].resolveTime),\n                quote: Number(symbolMap[quoteSymbol].resolveTime)\n              },\n              requestId: {\n                base: Number(symbolMap[baseSymbol].requestId),\n                quote: Number(symbolMap[quoteSymbol].requestId)\n              }\n            });\n          });\n          resolve(finalResult);\n        });\n      });\n    });\n  }\n\n  getLatestRequest(oid, calldata, minCount, askCount) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!Number.isInteger(oid)) throw new error_1.NotIntegerError('oid is not an integer');\n      if (!Number.isInteger(minCount)) throw new error_1.NotIntegerError('minCount is not an integer');\n      if (!Number.isInteger(askCount)) throw new error_1.NotIntegerError('askCount is not an integer');\n      const request = new query_pb_1.QueryRequestSearchRequest();\n      request.setOracleScriptId(oid);\n      request.setCalldata(calldata);\n      request.setAskCount(askCount);\n      request.setMinCount(minCount);\n      return new Promise((resolve, reject) => {\n        this.queryClient.requestSearch(request, {}, (err, response) => {\n          if (err !== null) {\n            reject(err);\n            return;\n          }\n\n          if (response !== null && response.hasRequest()) {\n            resolve(response.getRequest().toObject());\n            return;\n          }\n\n          reject(new error_1.NotFoundError('request not found'));\n        });\n      });\n    });\n  }\n\n}\n\nexports.default = Client;","map":{"version":3,"sources":["/Users/pangp/Band/demo-bandchainjs/client/node_modules/@bandprotocol/bandchain.js/lib/client.js"],"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","grpc_web_node_http_transport_1","require","error_1","query_pb_service_1","query_pb_service_2","query_pb_service_3","service_pb_service_1","query_pb_1","query_pb_2","query_pb_3","service_pb_1","service_pb_2","auth_pb_1","Client","constructor","grpcUrl","queryClient","QueryClient","transport","NodeHttpTransport","serviceClient","ServiceClient","authQueryClient","txServiceClient","getDataSource","id","Number","isInteger","NotIntegerError","request","QueryDataSourceRequest","setDataSourceId","dataSource","err","response","hasDataSource","toObject","NotFoundError","getOracleScript","QueryOracleScriptRequest","setOracleScriptId","oracleScript","hasOracleScript","getRequestById","QueryRequestRequest","setRequestId","getReporters","validator","QueryReportersRequest","setValidatorAddress","reporters","getReporterList","getLatestBlock","GetLatestBlockRequest","getAccount","address","QueryAccountRequest","setAddress","account","hasAccount","accBaseAccount","unpack","BaseAccount","deserializeBinary","ValueError","getTypeName","getRequestIdByTxHash","txHash","GetTxRequest","setHash","getTx","hasTxResponse","reqIdList","txResponse","logsList","forEach","txLog","eventsList","event","type","attributesList","attribute","key","push","length","getChainId","latestBlock","block","header","chainId","sendTxSyncMode","txBytes","BroadcastTxRequest","setTxBytes","setMode","broadcastTx","getTxResponse","sendTxAsyncMode","sendTxBlockMode","getReferenceData","pairs","minCount","askCount","QueryRequestPriceRequest","symbolSet","Set","pair","symbols","split","symbol","add","setSymbolsList","Array","from","setAskCount","setMinCount","requestPrice","finalResult","symbolMap","multiplier","px","requestId","resolveTime","Math","floor","Date","now","priceResultsList","priceResult","baseSymbol","quoteSymbol","rate","updatedAt","base","quote","getLatestRequest","oid","calldata","QueryRequestSearchRequest","setCalldata","requestSearch","hasRequest","getRequest","default"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst grpc_web_node_http_transport_1 = require(\"@improbable-eng/grpc-web-node-http-transport\");\nconst error_1 = require(\"./error\");\nconst query_pb_service_1 = require(\"../proto/oracle/v1/query_pb_service\");\nconst query_pb_service_2 = require(\"../proto/cosmos/base/tendermint/v1beta1/query_pb_service\");\nconst query_pb_service_3 = require(\"../proto/cosmos/auth/v1beta1/query_pb_service\");\nconst service_pb_service_1 = require(\"../proto/cosmos/tx/v1beta1/service_pb_service\");\nconst query_pb_1 = require(\"../proto/oracle/v1/query_pb\");\nconst query_pb_2 = require(\"../proto/cosmos/base/tendermint/v1beta1/query_pb\");\nconst query_pb_3 = require(\"../proto/cosmos/auth/v1beta1/query_pb\");\nconst service_pb_1 = require(\"../proto/cosmos/tx/v1beta1/service_pb\");\nconst service_pb_2 = require(\"../proto/cosmos/tx/v1beta1/service_pb\");\nconst auth_pb_1 = require(\"../proto/cosmos/auth/v1beta1/auth_pb\");\nclass Client {\n    constructor(grpcUrl) {\n        this.queryClient = new query_pb_service_1.QueryClient(grpcUrl, {\n            transport: grpc_web_node_http_transport_1.NodeHttpTransport(),\n        });\n        this.serviceClient = new query_pb_service_2.ServiceClient(grpcUrl, {\n            transport: grpc_web_node_http_transport_1.NodeHttpTransport(),\n        });\n        this.authQueryClient = new query_pb_service_3.QueryClient(grpcUrl, {\n            transport: grpc_web_node_http_transport_1.NodeHttpTransport(),\n        });\n        this.txServiceClient = new service_pb_service_1.ServiceClient(grpcUrl, {\n            transport: grpc_web_node_http_transport_1.NodeHttpTransport(),\n        });\n    }\n    getDataSource(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!Number.isInteger(id))\n                throw new error_1.NotIntegerError('id is not an integer');\n            const request = new query_pb_1.QueryDataSourceRequest();\n            request.setDataSourceId(id);\n            return new Promise((resolve, reject) => {\n                this.queryClient.dataSource(request, {}, (err, response) => {\n                    if (err !== null) {\n                        reject(err);\n                        return;\n                    }\n                    if (response !== null && response.hasDataSource()) {\n                        resolve(response.getDataSource().toObject());\n                        return;\n                    }\n                    reject(new error_1.NotFoundError(`data source with ID ${id} does not exist`));\n                });\n            });\n        });\n    }\n    getOracleScript(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!Number.isInteger(id))\n                throw new error_1.NotIntegerError('id is not an integer');\n            const request = new query_pb_1.QueryOracleScriptRequest();\n            request.setOracleScriptId(id);\n            return new Promise((resolve, reject) => {\n                this.queryClient.oracleScript(request, {}, (err, response) => {\n                    if (err !== null) {\n                        reject(err);\n                        return;\n                    }\n                    if (response !== null && response.hasOracleScript()) {\n                        resolve(response.getOracleScript().toObject());\n                        return;\n                    }\n                    reject(new error_1.NotFoundError(`oracle script with ID ${id} does not exist`));\n                });\n            });\n        });\n    }\n    getRequestById(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!Number.isInteger(id))\n                throw new error_1.NotIntegerError('id is not an integer');\n            const request = new query_pb_1.QueryRequestRequest();\n            request.setRequestId(id);\n            return new Promise((resolve, reject) => {\n                this.queryClient.request(request, {}, (err, response) => {\n                    if (err !== null) {\n                        reject(err);\n                        return;\n                    }\n                    if (response !== null) {\n                        resolve(response.toObject());\n                    }\n                });\n            });\n        });\n    }\n    getReporters(validator) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const request = new query_pb_1.QueryReportersRequest();\n            request.setValidatorAddress(validator);\n            return new Promise((resolve, reject) => {\n                this.queryClient.reporters(request, {}, (err, response) => {\n                    if (err !== null) {\n                        reject(err);\n                        return;\n                    }\n                    if (response !== null) {\n                        resolve(response.getReporterList());\n                    }\n                });\n            });\n        });\n    }\n    getLatestBlock() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const request = new query_pb_2.GetLatestBlockRequest();\n            return new Promise((resolve, reject) => {\n                this.serviceClient.getLatestBlock(request, {}, (err, response) => {\n                    if (err !== null) {\n                        reject(err);\n                        return;\n                    }\n                    if (response !== null) {\n                        resolve(response.toObject());\n                    }\n                });\n            });\n        });\n    }\n    getAccount(address) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const request = new query_pb_3.QueryAccountRequest();\n            request.setAddress(address);\n            return new Promise((resolve, reject) => {\n                this.authQueryClient.account(request, {}, (err, response) => {\n                    if (err !== null) {\n                        reject(err);\n                        return;\n                    }\n                    if (response !== null && response.hasAccount()) {\n                        let accBaseAccount = response\n                            .getAccount()\n                            .unpack(auth_pb_1.BaseAccount.deserializeBinary, 'cosmos.auth.v1beta1.BaseAccount');\n                        if (accBaseAccount !== null) {\n                            resolve(accBaseAccount.toObject());\n                            return;\n                        }\n                        reject(new error_1.ValueError(`only base account allowed, expected BaseAccount, got ${response\n                            .getAccount()\n                            .getTypeName()}`));\n                    }\n                });\n            });\n        });\n    }\n    getRequestIdByTxHash(txHash) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const request = new service_pb_1.GetTxRequest();\n            request.setHash(txHash);\n            return new Promise((resolve, reject) => {\n                this.txServiceClient.getTx(request, {}, (err, response) => {\n                    if (err !== null) {\n                        reject(err);\n                        return;\n                    }\n                    if (response === null || !response.hasTxResponse()) {\n                        reject(new error_1.NotFoundError('the given tx hash does not exists'));\n                    }\n                    let reqIdList = [];\n                    response.toObject().txResponse.logsList.forEach((txLog) => {\n                        txLog.eventsList.forEach((event) => {\n                            if (event.type === 'report' || event.type === 'request') {\n                                event.attributesList.forEach((attribute) => {\n                                    if (attribute.key === 'id') {\n                                        reqIdList.push(Number(attribute.value));\n                                    }\n                                });\n                            }\n                        });\n                    });\n                    if (reqIdList.length === 0) {\n                        reject(new error_1.NotFoundError('request ID is not found in given transaction hash'));\n                        return;\n                    }\n                    resolve(reqIdList);\n                });\n            });\n        });\n    }\n    getChainId() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const latestBlock = yield this.getLatestBlock();\n            return latestBlock.block.header.chainId;\n        });\n    }\n    sendTxSyncMode(txBytes) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const request = new service_pb_2.BroadcastTxRequest();\n            request.setTxBytes(txBytes);\n            request.setMode(2);\n            return new Promise((resolve, reject) => {\n                this.txServiceClient.broadcastTx(request, {}, (err, response) => {\n                    if (err !== null) {\n                        reject(err);\n                        return;\n                    }\n                    if (response !== null && response.hasTxResponse()) {\n                        resolve(response.getTxResponse().toObject());\n                    }\n                });\n            });\n        });\n    }\n    sendTxAsyncMode(txBytes) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const request = new service_pb_2.BroadcastTxRequest();\n            request.setTxBytes(txBytes);\n            request.setMode(3);\n            return new Promise((resolve, reject) => {\n                this.txServiceClient.broadcastTx(request, {}, (err, response) => {\n                    if (err !== null) {\n                        reject(err);\n                        return;\n                    }\n                    if (response !== null && response.hasTxResponse()) {\n                        resolve(response.getTxResponse().toObject());\n                    }\n                });\n            });\n        });\n    }\n    sendTxBlockMode(txBytes) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const request = new service_pb_2.BroadcastTxRequest();\n            request.setTxBytes(txBytes);\n            request.setMode(1);\n            return new Promise((resolve, reject) => {\n                this.txServiceClient.broadcastTx(request, {}, (err, response) => {\n                    if (err !== null) {\n                        reject(err);\n                        return;\n                    }\n                    if (response !== null && response.hasTxResponse()) {\n                        resolve(response.getTxResponse().toObject());\n                    }\n                });\n            });\n        });\n    }\n    getReferenceData(pairs, minCount, askCount) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const request = new query_pb_1.QueryRequestPriceRequest();\n            let symbolSet = new Set();\n            pairs.forEach((pair) => {\n                let symbols = pair.split('/');\n                symbols.forEach((symbol) => {\n                    if (symbol === 'USD')\n                        return;\n                    symbolSet.add(symbol);\n                });\n            });\n            request.setSymbolsList(Array.from(symbolSet));\n            request.setAskCount(askCount);\n            request.setMinCount(minCount);\n            return new Promise((resolve, reject) => {\n                this.queryClient.requestPrice(request, {}, (err, response) => {\n                    if (err !== null) {\n                        reject(err);\n                        return;\n                    }\n                    const finalResult = [];\n                    const symbolMap = {};\n                    symbolMap['USD'] = {\n                        symbol: 'USD',\n                        multiplier: 1000000000,\n                        px: 1000000000,\n                        requestId: 0,\n                        resolveTime: Math.floor(Date.now() / 1000),\n                    };\n                    response.toObject().priceResultsList.forEach((priceResult) => {\n                        symbolMap[priceResult.symbol] = priceResult;\n                    });\n                    pairs.forEach((pair) => {\n                        let [baseSymbol, quoteSymbol] = pair.split('/');\n                        finalResult.push({\n                            pair,\n                            rate: (Number(symbolMap[baseSymbol].px) *\n                                Number(symbolMap[quoteSymbol].multiplier)) /\n                                (Number(symbolMap[quoteSymbol].px) *\n                                    Number(symbolMap[baseSymbol].multiplier)),\n                            updatedAt: {\n                                base: Number(symbolMap[baseSymbol].resolveTime),\n                                quote: Number(symbolMap[quoteSymbol].resolveTime),\n                            },\n                            requestId: {\n                                base: Number(symbolMap[baseSymbol].requestId),\n                                quote: Number(symbolMap[quoteSymbol].requestId),\n                            },\n                        });\n                    });\n                    resolve(finalResult);\n                });\n            });\n        });\n    }\n    getLatestRequest(oid, calldata, minCount, askCount) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!Number.isInteger(oid))\n                throw new error_1.NotIntegerError('oid is not an integer');\n            if (!Number.isInteger(minCount))\n                throw new error_1.NotIntegerError('minCount is not an integer');\n            if (!Number.isInteger(askCount))\n                throw new error_1.NotIntegerError('askCount is not an integer');\n            const request = new query_pb_1.QueryRequestSearchRequest();\n            request.setOracleScriptId(oid);\n            request.setCalldata(calldata);\n            request.setAskCount(askCount);\n            request.setMinCount(minCount);\n            return new Promise((resolve, reject) => {\n                this.queryClient.requestSearch(request, {}, (err, response) => {\n                    if (err !== null) {\n                        reject(err);\n                        return;\n                    }\n                    if (response !== null && response.hasRequest()) {\n                        resolve(response.getRequest().toObject());\n                        return;\n                    }\n                    reject(new error_1.NotFoundError('request not found'));\n                });\n            });\n        });\n    }\n}\nexports.default = Client;\n"]},"metadata":{},"sourceType":"script"}