{"ast":null,"code":"import { Client, Wallet, Obi, Message, Coin, Transaction, Fee } from \"@bandprotocol/bandchain.js\";\nimport moment from \"moment\";\nconst grpcUrl = \"https://laozi-testnet4.bandchain.org/grpc-web\";\nconst client = new Client(grpcUrl);\nexport function getWallet(mnemonic) {\n  const {\n    PrivateKey\n  } = Wallet;\n  const privateKey = PrivateKey.fromMnemonic(mnemonic);\n  const pubkey = privateKey.toPubkey();\n  const sender = pubkey.toAddress().toAccBech32();\n  return {\n    sender,\n    privateKey,\n    pubkey\n  };\n}\nexport async function makeRequest(symbols, multiplier, feeInput, prepareGas, executeGas) {\n  symbols = symbols.toUpperCase().replace(/\\s/g, \"\").split(\",\"); // Step 1: Import a private key for signing transaction\n\n  const {\n    PrivateKey\n  } = Wallet;\n  const mnemonic = \"s\";\n  const privateKey = PrivateKey.fromMnemonic(mnemonic);\n  const pubkey = privateKey.toPubkey();\n  const sender = pubkey.toAddress().toAccBech32(); // Step 2.1: Prepare oracle request's properties\n\n  const obi = new Obi(\"{symbols:[string],multiplier:u64}/{rates:[u64]}\");\n  const calldata = obi.encodeInput({\n    symbols: symbols,\n    multiplier: multiplier\n  });\n  const oracleScriptId = 37;\n  const askCount = 2;\n  const minCount = 1;\n  const clientId = \"from_bandchain.js\";\n  let feeLimit = new Coin();\n  feeLimit.setDenom(\"uband\");\n  feeLimit.setAmount(feeInput); // Step 2.2: Create an oracle request message\n\n  const requestMessage = new Message.MsgRequestData(oracleScriptId, calldata, askCount, minCount, clientId, sender, [feeLimit], prepareGas, executeGas);\n  const txRawBytes = await createSignedTransaction(requestMessage, sender, pubkey, privateKey); // Step 4: Broadcast the transaction\n\n  const sendTx = await client.sendTxBlockMode(txRawBytes);\n  return sendTx;\n}\nexport const sendCoin = async (address, amount, privateKey, pubkey, sender, action = \"send\") => {\n  const {\n    MsgSend,\n    MsgDelegate\n  } = Message;\n  const receiver = address;\n  const sendAmount = new Coin();\n  sendAmount.setDenom(\"uband\");\n  sendAmount.setAmount((amount * 1e6).toString());\n  const msg = action === \"delegate\" ? new MsgDelegate(sender, receiver, sendAmount) : new MsgSend(sender, receiver, [sendAmount]);\n  const txRawBytes = await createSignedTransaction(msg, sender, pubkey, privateKey); // Step 5 send the transaction\n\n  const response = await client.sendTxBlockMode(txRawBytes);\n  return response;\n};\nexport const sendIBC = async (address, amount, privateKey, pubkey, sender) => {\n  const {\n    MsgTransfer\n  } = Message; // Here we use different message type, which is MsgSend\n\n  const receiver = address;\n  const sendAmount = new Coin();\n  sendAmount.setDenom(\"uband\");\n  sendAmount.setAmount((amount * 1e6).toString());\n  const timeoutTimestamp = moment().unix() * 1e9;\n  const msg = new MsgTransfer(\"transfer\", \"channel-25\", sender, receiver, sendAmount, timeoutTimestamp);\n  const signedTx = await createSignedTransaction(msg, sender, pubkey, privateKey); // Step 5 send the transaction\n\n  const response = await client.sendTxBlockMode(signedTx);\n  return response;\n};\nexport const createDataSource = async (title, code, sender, owner, treasury, privateKey, pubkey, ...desc) => {\n  const {\n    MsgCreateDataSource\n  } = Message;\n  let feeCoin = new Coin();\n  feeCoin.setDenom(\"uband\");\n  feeCoin.setAmount(\"1000\");\n  const msg = MsgCreateDataSource(title, code, [feeCoin], treasury, owner, sender, desc); // const msg = new Message.MsgCreateDataSource(title, code, [feeCoin], treasury, owner, sender);\n\n  const signedTx = await createSignedTransaction(msg, sender, pubkey, privateKey); // Step 5 send the transaction\n\n  const response = await client.sendTxBlockMode(signedTx);\n  return response;\n};\nexport const editDataSource = async (id, code, sender, owner, privateKey, pubkey, ...args) => {\n  let feeCoin = new Coin();\n  feeCoin.setDenom(\"uband\");\n  feeCoin.setAmount(\"1000\");\n  const msg = new Message.MsgEditDataSource(parseInt(id), code, [feeCoin], owner, sender);\n  const fee = new Fee();\n  fee.setAmountList([feeCoin]);\n  fee.setGasLimit(1000000);\n  const account = await client.getAccount(sender);\n  const tx = new Transaction().withMessages(msg).withAccountNum(account.accountNumber).withSequence(account.sequence).withChainId(\"band-laozi-testnet4\").withFee(fee); // Step 4 sign the transaction\n\n  const txSignData = tx.getSignDoc(pubkey);\n  const signature = privateKey.sign(txSignData);\n  const signedTx = tx.getTxData(signature, pubkey); // Step 5 send the transaction\n\n  const response = await client.sendTxBlockMode(signedTx);\n  return response;\n};\nexport async function createOracleScript(title, desc, schema, source_code_url, code, sender, owner, privateKey, pubkey) {\n  let coin = new Coin();\n  coin.setDenom(\"uband\");\n  coin.setAmount(\"1000000\");\n  let feeCoin = new Coin();\n  feeCoin.setDenom(\"uband\");\n  feeCoin.setAmount(\"1000\");\n  const requestMessage = new Message.MsgCreateOracleScript(title, desc, schema, source_code_url, Buffer.from(code), owner, sender);\n  const fee = new Fee();\n  fee.setAmountList([feeCoin]);\n  fee.setGasLimit(1000000);\n  const chainId = await client.getChainId();\n  const txn = new Transaction();\n  txn.withMessages(requestMessage);\n  await txn.withSender(client, sender);\n  txn.withChainId(chainId);\n  txn.withFee(fee);\n  txn.withMemo(\"\");\n  const signDoc = txn.getSignDoc(pubkey);\n  const signature = privateKey.sign(signDoc);\n  const txRawBytes = txn.getTxData(signature, pubkey);\n  const sendTx = await client.sendTxBlockMode(txRawBytes);\n  return sendTx;\n}\nexport async function createMsgEditOS(id, title, desc, schema, source_code_url, code, sender, owner, privateKey, pubkey) {\n  let coin = new Coin();\n  coin.setDenom(\"uband\");\n  coin.setAmount(\"1000000\");\n  let feeCoin = new Coin();\n  feeCoin.setDenom(\"uband\");\n  feeCoin.setAmount(\"1000\");\n  const requestMessage = new Message.MsgEditOracleScript(id, title, desc, schema, source_code_url, Buffer.from(code), owner, sender);\n  const fee = new Fee();\n  fee.setAmountList([feeCoin]);\n  fee.setGasLimit(1000000);\n  const chainId = await client.getChainId();\n  const txn = new Transaction();\n  txn.withMessages(requestMessage);\n  await txn.withSender(client, sender);\n  txn.withChainId(chainId);\n  txn.withFee(fee);\n  txn.withMemo(\"\");\n  const signDoc = txn.getSignDoc(pubkey);\n  const signature = privateKey.sign(signDoc);\n  const txRawBytes = txn.getTxData(signature, pubkey);\n  const sendTx = await client.sendTxBlockMode(txRawBytes);\n  return sendTx;\n}\nexport async function getRawPreview(title, desc, schema, source_code_url, code, sender, owner, privateKey, pubkey) {\n  let coin = new Coin();\n  coin.setDenom(\"uband\");\n  coin.setAmount(\"1000000\");\n  let feeCoin = new Coin();\n  feeCoin.setDenom(\"uband\");\n  feeCoin.setAmount(\"1000\");\n  const requestMessage = new Message.MsgCreateOracleScript(title, desc, schema, source_code_url, Buffer.from(code), owner, sender);\n  const fee = new Fee();\n  fee.setAmountList([feeCoin]);\n  fee.setGasLimit(1000000);\n  const chainId = await client.getChainId();\n  const txn = new Transaction();\n  txn.withMessages(requestMessage);\n  await txn.withSender(client, sender);\n  txn.withChainId(chainId);\n  txn.withFee(fee);\n  txn.withMemo(\"\");\n  const signDoc = txn.getSignDoc(pubkey);\n  const signature = privateKey.sign(signDoc);\n  const txRawBytes = txn.getTxData(signature, pubkey);\n  return txRawBytes;\n}\nexport async function getRawPreviewEditOs(title, desc, schema, source_code_url, code, sender, owner, privateKey, pubkey) {\n  let coin = new Coin();\n  coin.setDenom(\"uband\");\n  coin.setAmount(\"1000000\");\n  let feeCoin = new Coin();\n  feeCoin.setDenom(\"uband\");\n  feeCoin.setAmount(\"1000\");\n  const requestMessage = new Message.MsgCreateOracleScript(title, desc, schema, source_code_url, Buffer.from(code), owner, sender);\n  const fee = new Fee();\n  fee.setAmountList([feeCoin]);\n  fee.setGasLimit(1000000);\n  const chainId = await client.getChainId();\n  const txn = new Transaction();\n  txn.withMessages(requestMessage);\n  await txn.withSender(client, sender);\n  txn.withChainId(chainId);\n  txn.withFee(fee);\n  txn.withMemo(\"\");\n  const signDoc = txn.getSignDoc(pubkey);\n  const signature = privateKey.sign(signDoc);\n  const txRawBytes = txn.getTxData(signature, pubkey);\n  return txRawBytes;\n}\nexport async function withdrawReward(delegator, validator, sender) {\n  const msg = Message.MsgWithdrawDelegatorReward(delegator, validator);\n}\nexport async function createSignedTransaction(msg, sender, pubkey, privateKey) {\n  let feeCoin = new Coin();\n  feeCoin.setDenom(\"uband\");\n  feeCoin.setAmount(\"1000\");\n  const fee = new Fee();\n  fee.setAmountList([feeCoin]);\n  fee.setGasLimit(1000000);\n  const chainId = await client.getChainId();\n  const txn = new Transaction();\n  txn.withMessages(msg);\n  await txn.withSender(client, sender);\n  txn.withChainId(chainId);\n  txn.withFee(fee);\n  txn.withMemo(\"From Bandchain.js Demo App\");\n  const signDoc = txn.getSignDoc(pubkey);\n  const signature = privateKey.sign(signDoc);\n  const txRawBytes = txn.getTxData(signature, pubkey);\n  return txRawBytes;\n}","map":{"version":3,"sources":["/Users/pangp/Band/demo-bandchainjs/src/band.js"],"names":["Client","Wallet","Obi","Message","Coin","Transaction","Fee","moment","grpcUrl","client","getWallet","mnemonic","PrivateKey","privateKey","fromMnemonic","pubkey","toPubkey","sender","toAddress","toAccBech32","makeRequest","symbols","multiplier","feeInput","prepareGas","executeGas","toUpperCase","replace","split","obi","calldata","encodeInput","oracleScriptId","askCount","minCount","clientId","feeLimit","setDenom","setAmount","requestMessage","MsgRequestData","txRawBytes","createSignedTransaction","sendTx","sendTxBlockMode","sendCoin","address","amount","action","MsgSend","MsgDelegate","receiver","sendAmount","toString","msg","response","sendIBC","MsgTransfer","timeoutTimestamp","unix","signedTx","createDataSource","title","code","owner","treasury","desc","MsgCreateDataSource","feeCoin","editDataSource","id","args","MsgEditDataSource","parseInt","fee","setAmountList","setGasLimit","account","getAccount","tx","withMessages","withAccountNum","accountNumber","withSequence","sequence","withChainId","withFee","txSignData","getSignDoc","signature","sign","getTxData","createOracleScript","schema","source_code_url","coin","MsgCreateOracleScript","Buffer","from","chainId","getChainId","txn","withSender","withMemo","signDoc","createMsgEditOS","MsgEditOracleScript","getRawPreview","getRawPreviewEditOs","withdrawReward","delegator","validator","MsgWithdrawDelegatorReward"],"mappings":"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","sourcesContent":["import { Client, Wallet, Obi, Message, Coin, Transaction, Fee } from \"@bandprotocol/bandchain.js\";\nimport moment from \"moment\";\n\nconst grpcUrl = \"https://laozi-testnet4.bandchain.org/grpc-web\";\nconst client = new Client(grpcUrl);\n\nexport function getWallet(mnemonic) {\n  const { PrivateKey } = Wallet;\n  const privateKey = PrivateKey.fromMnemonic(mnemonic);\n  const pubkey = privateKey.toPubkey();\n  const sender = pubkey.toAddress().toAccBech32();\n  return { sender, privateKey, pubkey };\n}\n\nexport async function makeRequest(symbols, multiplier, feeInput, prepareGas, executeGas) {\n  symbols = symbols.toUpperCase().replace(/\\s/g, \"\").split(\",\");\n\n  // Step 1: Import a private key for signing transaction\n  const { PrivateKey } = Wallet;\n  const mnemonic = \"s\";\n  const privateKey = PrivateKey.fromMnemonic(mnemonic);\n  const pubkey = privateKey.toPubkey();\n  const sender = pubkey.toAddress().toAccBech32();\n\n  // Step 2.1: Prepare oracle request's properties\n  const obi = new Obi(\"{symbols:[string],multiplier:u64}/{rates:[u64]}\");\n  const calldata = obi.encodeInput({ symbols: symbols, multiplier: multiplier });\n\n  const oracleScriptId = 37;\n  const askCount = 2;\n  const minCount = 1;\n  const clientId = \"from_bandchain.js\";\n\n  let feeLimit = new Coin();\n  feeLimit.setDenom(\"uband\");\n  feeLimit.setAmount(feeInput);\n\n  // Step 2.2: Create an oracle request message\n  const requestMessage = new Message.MsgRequestData(\n    oracleScriptId,\n    calldata,\n    askCount,\n    minCount,\n    clientId,\n    sender,\n    [feeLimit],\n    prepareGas,\n    executeGas\n  );\n\n  const txRawBytes = await createSignedTransaction(requestMessage, sender, pubkey, privateKey);\n\n  // Step 4: Broadcast the transaction\n  const sendTx = await client.sendTxBlockMode(txRawBytes);\n  return sendTx;\n}\n\nexport const sendCoin = async (address, amount, privateKey, pubkey, sender, action = \"send\") => {\n  const { MsgSend, MsgDelegate } = Message;\n\n  const receiver = address;\n  const sendAmount = new Coin();\n  sendAmount.setDenom(\"uband\");\n  sendAmount.setAmount((amount * 1e6).toString());\n\n  const msg =\n    action === \"delegate\"\n      ? new MsgDelegate(sender, receiver, sendAmount)\n      : new MsgSend(sender, receiver, [sendAmount]);\n\n  const txRawBytes = await createSignedTransaction(msg, sender, pubkey, privateKey);\n\n  // Step 5 send the transaction\n  const response = await client.sendTxBlockMode(txRawBytes);\n\n  return response;\n};\n\nexport const sendIBC = async (address, amount, privateKey, pubkey, sender) => {\n  const { MsgTransfer } = Message;\n\n  // Here we use different message type, which is MsgSend\n  const receiver = address;\n  const sendAmount = new Coin();\n  sendAmount.setDenom(\"uband\");\n  sendAmount.setAmount((amount * 1e6).toString());\n  const timeoutTimestamp = moment().unix() * 1e9;\n\n  const msg = new MsgTransfer(\n    \"transfer\",\n    \"channel-25\",\n    sender,\n    receiver,\n    sendAmount,\n    timeoutTimestamp\n  );\n\n  const signedTx = await createSignedTransaction(msg, sender, pubkey, privateKey);\n\n  // Step 5 send the transaction\n  const response = await client.sendTxBlockMode(signedTx);\n\n  return response;\n};\n\nexport const createDataSource = async (\n  title,\n  code,\n  sender,\n  owner,\n  treasury,\n  privateKey,\n  pubkey,\n  ...desc\n) => {\n  const { MsgCreateDataSource } = Message;\n  let feeCoin = new Coin();\n  feeCoin.setDenom(\"uband\");\n  feeCoin.setAmount(\"1000\");\n\n  const msg = MsgCreateDataSource(title, code, [feeCoin], treasury, owner, sender, desc);\n\n  // const msg = new Message.MsgCreateDataSource(title, code, [feeCoin], treasury, owner, sender);\n\n  const signedTx = await createSignedTransaction(msg, sender, pubkey, privateKey);\n\n  // Step 5 send the transaction\n  const response = await client.sendTxBlockMode(signedTx);\n\n  return response;\n};\n\nexport const editDataSource = async (id, code, sender, owner, privateKey, pubkey, ...args) => {\n  let feeCoin = new Coin();\n  feeCoin.setDenom(\"uband\");\n  feeCoin.setAmount(\"1000\");\n\n  const msg = new Message.MsgEditDataSource(parseInt(id), code, [feeCoin], owner, sender);\n\n  const fee = new Fee();\n  fee.setAmountList([feeCoin]);\n  fee.setGasLimit(1000000);\n\n  const account = await client.getAccount(sender);\n\n  const tx = new Transaction()\n    .withMessages(msg)\n    .withAccountNum(account.accountNumber)\n    .withSequence(account.sequence)\n    .withChainId(\"band-laozi-testnet4\")\n    .withFee(fee);\n\n  // Step 4 sign the transaction\n  const txSignData = tx.getSignDoc(pubkey);\n  const signature = privateKey.sign(txSignData);\n  const signedTx = tx.getTxData(signature, pubkey);\n\n  // Step 5 send the transaction\n  const response = await client.sendTxBlockMode(signedTx);\n\n  return response;\n};\n\nexport async function createOracleScript(\n  title,\n  desc,\n  schema,\n  source_code_url,\n  code,\n  sender,\n  owner,\n  privateKey,\n  pubkey\n) {\n  let coin = new Coin();\n  coin.setDenom(\"uband\");\n  coin.setAmount(\"1000000\");\n\n  let feeCoin = new Coin();\n  feeCoin.setDenom(\"uband\");\n  feeCoin.setAmount(\"1000\");\n\n  const requestMessage = new Message.MsgCreateOracleScript(\n    title,\n    desc,\n    schema,\n    source_code_url,\n    Buffer.from(code),\n    owner,\n    sender\n  );\n\n  const fee = new Fee();\n  fee.setAmountList([feeCoin]);\n  fee.setGasLimit(1000000);\n  const chainId = await client.getChainId();\n  const txn = new Transaction();\n  txn.withMessages(requestMessage);\n  await txn.withSender(client, sender);\n  txn.withChainId(chainId);\n  txn.withFee(fee);\n  txn.withMemo(\"\");\n\n  const signDoc = txn.getSignDoc(pubkey);\n  const signature = privateKey.sign(signDoc);\n\n  const txRawBytes = txn.getTxData(signature, pubkey);\n  const sendTx = await client.sendTxBlockMode(txRawBytes);\n\n  return sendTx;\n}\n\nexport async function createMsgEditOS(\n  id,\n  title,\n  desc,\n  schema,\n  source_code_url,\n  code,\n  sender,\n  owner,\n  privateKey,\n  pubkey\n) {\n  let coin = new Coin();\n  coin.setDenom(\"uband\");\n  coin.setAmount(\"1000000\");\n\n  let feeCoin = new Coin();\n  feeCoin.setDenom(\"uband\");\n  feeCoin.setAmount(\"1000\");\n\n  const requestMessage = new Message.MsgEditOracleScript(\n    id,\n    title,\n    desc,\n    schema,\n    source_code_url,\n    Buffer.from(code),\n    owner,\n    sender\n  );\n\n  const fee = new Fee();\n  fee.setAmountList([feeCoin]);\n  fee.setGasLimit(1000000);\n  const chainId = await client.getChainId();\n  const txn = new Transaction();\n  txn.withMessages(requestMessage);\n  await txn.withSender(client, sender);\n  txn.withChainId(chainId);\n  txn.withFee(fee);\n  txn.withMemo(\"\");\n\n  const signDoc = txn.getSignDoc(pubkey);\n  const signature = privateKey.sign(signDoc);\n\n  const txRawBytes = txn.getTxData(signature, pubkey);\n  const sendTx = await client.sendTxBlockMode(txRawBytes);\n\n  return sendTx;\n}\n\nexport async function getRawPreview(\n  title,\n  desc,\n  schema,\n  source_code_url,\n  code,\n  sender,\n  owner,\n  privateKey,\n  pubkey\n) {\n  let coin = new Coin();\n  coin.setDenom(\"uband\");\n  coin.setAmount(\"1000000\");\n\n  let feeCoin = new Coin();\n  feeCoin.setDenom(\"uband\");\n  feeCoin.setAmount(\"1000\");\n\n  const requestMessage = new Message.MsgCreateOracleScript(\n    title,\n    desc,\n    schema,\n    source_code_url,\n    Buffer.from(code),\n    owner,\n    sender\n  );\n\n  const fee = new Fee();\n  fee.setAmountList([feeCoin]);\n  fee.setGasLimit(1000000);\n  const chainId = await client.getChainId();\n  const txn = new Transaction();\n  txn.withMessages(requestMessage);\n  await txn.withSender(client, sender);\n  txn.withChainId(chainId);\n  txn.withFee(fee);\n  txn.withMemo(\"\");\n\n  const signDoc = txn.getSignDoc(pubkey);\n  const signature = privateKey.sign(signDoc);\n\n  const txRawBytes = txn.getTxData(signature, pubkey);\n\n  return txRawBytes;\n}\n\nexport async function getRawPreviewEditOs(\n  title,\n  desc,\n  schema,\n  source_code_url,\n  code,\n  sender,\n  owner,\n  privateKey,\n  pubkey\n) {\n  let coin = new Coin();\n  coin.setDenom(\"uband\");\n  coin.setAmount(\"1000000\");\n\n  let feeCoin = new Coin();\n  feeCoin.setDenom(\"uband\");\n  feeCoin.setAmount(\"1000\");\n\n  const requestMessage = new Message.MsgCreateOracleScript(\n    title,\n    desc,\n    schema,\n    source_code_url,\n    Buffer.from(code),\n    owner,\n    sender\n  );\n\n  const fee = new Fee();\n  fee.setAmountList([feeCoin]);\n  fee.setGasLimit(1000000);\n  const chainId = await client.getChainId();\n  const txn = new Transaction();\n  txn.withMessages(requestMessage);\n  await txn.withSender(client, sender);\n  txn.withChainId(chainId);\n  txn.withFee(fee);\n  txn.withMemo(\"\");\n\n  const signDoc = txn.getSignDoc(pubkey);\n  const signature = privateKey.sign(signDoc);\n\n  const txRawBytes = txn.getTxData(signature, pubkey);\n\n  return txRawBytes;\n}\n\nexport async function withdrawReward(delegator, validator, sender) {\n  const msg = Message.MsgWithdrawDelegatorReward(delegator, validator);\n}\n\nexport async function createSignedTransaction(msg, sender, pubkey, privateKey) {\n  let feeCoin = new Coin();\n  feeCoin.setDenom(\"uband\");\n  feeCoin.setAmount(\"1000\");\n\n  const fee = new Fee();\n  fee.setAmountList([feeCoin]);\n  fee.setGasLimit(1000000);\n  const chainId = await client.getChainId();\n  const txn = new Transaction();\n  txn.withMessages(msg);\n  await txn.withSender(client, sender);\n  txn.withChainId(chainId);\n  txn.withFee(fee);\n  txn.withMemo(\"From Bandchain.js Demo App\");\n\n  const signDoc = txn.getSignDoc(pubkey);\n  const signature = privateKey.sign(signDoc);\n\n  const txRawBytes = txn.getTxData(signature, pubkey);\n\n  return txRawBytes;\n}\n"]},"metadata":{},"sourceType":"module"}